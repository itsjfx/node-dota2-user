/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.CMsgBotWorldState = (function() {
    
        /**
         * Properties of a CMsgBotWorldState.
         * @exports ICMsgBotWorldState
         * @interface ICMsgBotWorldState
         * @property {number|null} [team_id] CMsgBotWorldState team_id
         * @property {number|null} [game_time] CMsgBotWorldState game_time
         * @property {number|null} [dota_time] CMsgBotWorldState dota_time
         * @property {number|null} [game_state] CMsgBotWorldState game_state
         * @property {number|null} [hero_pick_state] CMsgBotWorldState hero_pick_state
         * @property {number|null} [time_of_day] CMsgBotWorldState time_of_day
         * @property {number|null} [glyph_cooldown] CMsgBotWorldState glyph_cooldown
         * @property {number|null} [glyph_cooldown_enemy] CMsgBotWorldState glyph_cooldown_enemy
         * @property {Array.<CMsgBotWorldState.IPlayer>|null} [players] CMsgBotWorldState players
         * @property {Array.<CMsgBotWorldState.IUnit>|null} [units] CMsgBotWorldState units
         * @property {Array.<CMsgBotWorldState.IDroppedItem>|null} [dropped_items] CMsgBotWorldState dropped_items
         * @property {Array.<number>|null} [dropped_items_deltas] CMsgBotWorldState dropped_items_deltas
         * @property {Array.<CMsgBotWorldState.IRuneInfo>|null} [rune_infos] CMsgBotWorldState rune_infos
         * @property {Array.<number>|null} [rune_infos_deltas] CMsgBotWorldState rune_infos_deltas
         * @property {Array.<CMsgBotWorldState.ITeleportInfo>|null} [incoming_teleports] CMsgBotWorldState incoming_teleports
         * @property {Array.<CMsgBotWorldState.ILinearProjectile>|null} [linear_projectiles] CMsgBotWorldState linear_projectiles
         * @property {Array.<CMsgBotWorldState.IAvoidanceZone>|null} [avoidance_zones] CMsgBotWorldState avoidance_zones
         * @property {Array.<CMsgBotWorldState.ICourier>|null} [couriers] CMsgBotWorldState couriers
         * @property {Array.<CMsgBotWorldState.IEventAbility>|null} [ability_events] CMsgBotWorldState ability_events
         * @property {Array.<CMsgBotWorldState.IEventDamage>|null} [damage_events] CMsgBotWorldState damage_events
         * @property {Array.<CMsgBotWorldState.IEventCourierKilled>|null} [courier_killed_events] CMsgBotWorldState courier_killed_events
         * @property {Array.<CMsgBotWorldState.IEventRoshanKilled>|null} [roshan_killed_events] CMsgBotWorldState roshan_killed_events
         * @property {Array.<CMsgBotWorldState.IEventTree>|null} [tree_events] CMsgBotWorldState tree_events
         */
    
        /**
         * Constructs a new CMsgBotWorldState.
         * @exports CMsgBotWorldState
         * @classdesc Represents a CMsgBotWorldState.
         * @implements ICMsgBotWorldState
         * @constructor
         * @param {ICMsgBotWorldState=} [properties] Properties to set
         */
        function CMsgBotWorldState(properties) {
            this.players = [];
            this.units = [];
            this.dropped_items = [];
            this.dropped_items_deltas = [];
            this.rune_infos = [];
            this.rune_infos_deltas = [];
            this.incoming_teleports = [];
            this.linear_projectiles = [];
            this.avoidance_zones = [];
            this.couriers = [];
            this.ability_events = [];
            this.damage_events = [];
            this.courier_killed_events = [];
            this.roshan_killed_events = [];
            this.tree_events = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgBotWorldState team_id.
         * @member {number} team_id
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.team_id = 0;
    
        /**
         * CMsgBotWorldState game_time.
         * @member {number} game_time
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.game_time = 0;
    
        /**
         * CMsgBotWorldState dota_time.
         * @member {number} dota_time
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.dota_time = 0;
    
        /**
         * CMsgBotWorldState game_state.
         * @member {number} game_state
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.game_state = 0;
    
        /**
         * CMsgBotWorldState hero_pick_state.
         * @member {number} hero_pick_state
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.hero_pick_state = 0;
    
        /**
         * CMsgBotWorldState time_of_day.
         * @member {number} time_of_day
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.time_of_day = 0;
    
        /**
         * CMsgBotWorldState glyph_cooldown.
         * @member {number} glyph_cooldown
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.glyph_cooldown = 0;
    
        /**
         * CMsgBotWorldState glyph_cooldown_enemy.
         * @member {number} glyph_cooldown_enemy
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.glyph_cooldown_enemy = 0;
    
        /**
         * CMsgBotWorldState players.
         * @member {Array.<CMsgBotWorldState.IPlayer>} players
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.players = $util.emptyArray;
    
        /**
         * CMsgBotWorldState units.
         * @member {Array.<CMsgBotWorldState.IUnit>} units
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.units = $util.emptyArray;
    
        /**
         * CMsgBotWorldState dropped_items.
         * @member {Array.<CMsgBotWorldState.IDroppedItem>} dropped_items
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.dropped_items = $util.emptyArray;
    
        /**
         * CMsgBotWorldState dropped_items_deltas.
         * @member {Array.<number>} dropped_items_deltas
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.dropped_items_deltas = $util.emptyArray;
    
        /**
         * CMsgBotWorldState rune_infos.
         * @member {Array.<CMsgBotWorldState.IRuneInfo>} rune_infos
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.rune_infos = $util.emptyArray;
    
        /**
         * CMsgBotWorldState rune_infos_deltas.
         * @member {Array.<number>} rune_infos_deltas
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.rune_infos_deltas = $util.emptyArray;
    
        /**
         * CMsgBotWorldState incoming_teleports.
         * @member {Array.<CMsgBotWorldState.ITeleportInfo>} incoming_teleports
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.incoming_teleports = $util.emptyArray;
    
        /**
         * CMsgBotWorldState linear_projectiles.
         * @member {Array.<CMsgBotWorldState.ILinearProjectile>} linear_projectiles
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.linear_projectiles = $util.emptyArray;
    
        /**
         * CMsgBotWorldState avoidance_zones.
         * @member {Array.<CMsgBotWorldState.IAvoidanceZone>} avoidance_zones
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.avoidance_zones = $util.emptyArray;
    
        /**
         * CMsgBotWorldState couriers.
         * @member {Array.<CMsgBotWorldState.ICourier>} couriers
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.couriers = $util.emptyArray;
    
        /**
         * CMsgBotWorldState ability_events.
         * @member {Array.<CMsgBotWorldState.IEventAbility>} ability_events
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.ability_events = $util.emptyArray;
    
        /**
         * CMsgBotWorldState damage_events.
         * @member {Array.<CMsgBotWorldState.IEventDamage>} damage_events
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.damage_events = $util.emptyArray;
    
        /**
         * CMsgBotWorldState courier_killed_events.
         * @member {Array.<CMsgBotWorldState.IEventCourierKilled>} courier_killed_events
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.courier_killed_events = $util.emptyArray;
    
        /**
         * CMsgBotWorldState roshan_killed_events.
         * @member {Array.<CMsgBotWorldState.IEventRoshanKilled>} roshan_killed_events
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.roshan_killed_events = $util.emptyArray;
    
        /**
         * CMsgBotWorldState tree_events.
         * @member {Array.<CMsgBotWorldState.IEventTree>} tree_events
         * @memberof CMsgBotWorldState
         * @instance
         */
        CMsgBotWorldState.prototype.tree_events = $util.emptyArray;
    
        /**
         * Creates a new CMsgBotWorldState instance using the specified properties.
         * @function create
         * @memberof CMsgBotWorldState
         * @static
         * @param {ICMsgBotWorldState=} [properties] Properties to set
         * @returns {CMsgBotWorldState} CMsgBotWorldState instance
         */
        CMsgBotWorldState.create = function create(properties) {
            return new CMsgBotWorldState(properties);
        };
    
        /**
         * Encodes the specified CMsgBotWorldState message. Does not implicitly {@link CMsgBotWorldState.verify|verify} messages.
         * @function encode
         * @memberof CMsgBotWorldState
         * @static
         * @param {ICMsgBotWorldState} message CMsgBotWorldState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBotWorldState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.team_id != null && Object.hasOwnProperty.call(message, "team_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.team_id);
            if (message.game_time != null && Object.hasOwnProperty.call(message, "game_time"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.game_time);
            if (message.dota_time != null && Object.hasOwnProperty.call(message, "dota_time"))
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.dota_time);
            if (message.game_state != null && Object.hasOwnProperty.call(message, "game_state"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.game_state);
            if (message.hero_pick_state != null && Object.hasOwnProperty.call(message, "hero_pick_state"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.hero_pick_state);
            if (message.time_of_day != null && Object.hasOwnProperty.call(message, "time_of_day"))
                writer.uint32(/* id 6, wireType 5 =*/53).float(message.time_of_day);
            if (message.glyph_cooldown != null && Object.hasOwnProperty.call(message, "glyph_cooldown"))
                writer.uint32(/* id 7, wireType 5 =*/61).float(message.glyph_cooldown);
            if (message.glyph_cooldown_enemy != null && Object.hasOwnProperty.call(message, "glyph_cooldown_enemy"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.glyph_cooldown_enemy);
            if (message.players != null && message.players.length)
                for (var i = 0; i < message.players.length; ++i)
                    $root.CMsgBotWorldState.Player.encode(message.players[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.units != null && message.units.length)
                for (var i = 0; i < message.units.length; ++i)
                    $root.CMsgBotWorldState.Unit.encode(message.units[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.dropped_items != null && message.dropped_items.length)
                for (var i = 0; i < message.dropped_items.length; ++i)
                    $root.CMsgBotWorldState.DroppedItem.encode(message.dropped_items[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.rune_infos != null && message.rune_infos.length)
                for (var i = 0; i < message.rune_infos.length; ++i)
                    $root.CMsgBotWorldState.RuneInfo.encode(message.rune_infos[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.incoming_teleports != null && message.incoming_teleports.length)
                for (var i = 0; i < message.incoming_teleports.length; ++i)
                    $root.CMsgBotWorldState.TeleportInfo.encode(message.incoming_teleports[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.linear_projectiles != null && message.linear_projectiles.length)
                for (var i = 0; i < message.linear_projectiles.length; ++i)
                    $root.CMsgBotWorldState.LinearProjectile.encode(message.linear_projectiles[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.avoidance_zones != null && message.avoidance_zones.length)
                for (var i = 0; i < message.avoidance_zones.length; ++i)
                    $root.CMsgBotWorldState.AvoidanceZone.encode(message.avoidance_zones[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.couriers != null && message.couriers.length)
                for (var i = 0; i < message.couriers.length; ++i)
                    $root.CMsgBotWorldState.Courier.encode(message.couriers[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.ability_events != null && message.ability_events.length)
                for (var i = 0; i < message.ability_events.length; ++i)
                    $root.CMsgBotWorldState.EventAbility.encode(message.ability_events[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
            if (message.damage_events != null && message.damage_events.length)
                for (var i = 0; i < message.damage_events.length; ++i)
                    $root.CMsgBotWorldState.EventDamage.encode(message.damage_events[i], writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
            if (message.courier_killed_events != null && message.courier_killed_events.length)
                for (var i = 0; i < message.courier_killed_events.length; ++i)
                    $root.CMsgBotWorldState.EventCourierKilled.encode(message.courier_killed_events[i], writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
            if (message.roshan_killed_events != null && message.roshan_killed_events.length)
                for (var i = 0; i < message.roshan_killed_events.length; ++i)
                    $root.CMsgBotWorldState.EventRoshanKilled.encode(message.roshan_killed_events[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
            if (message.tree_events != null && message.tree_events.length)
                for (var i = 0; i < message.tree_events.length; ++i)
                    $root.CMsgBotWorldState.EventTree.encode(message.tree_events[i], writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
            if (message.dropped_items_deltas != null && message.dropped_items_deltas.length)
                for (var i = 0; i < message.dropped_items_deltas.length; ++i)
                    writer.uint32(/* id 112, wireType 0 =*/896).int32(message.dropped_items_deltas[i]);
            if (message.rune_infos_deltas != null && message.rune_infos_deltas.length)
                for (var i = 0; i < message.rune_infos_deltas.length; ++i)
                    writer.uint32(/* id 113, wireType 0 =*/904).int32(message.rune_infos_deltas[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgBotWorldState message, length delimited. Does not implicitly {@link CMsgBotWorldState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgBotWorldState
         * @static
         * @param {ICMsgBotWorldState} message CMsgBotWorldState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgBotWorldState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgBotWorldState message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgBotWorldState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgBotWorldState} CMsgBotWorldState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBotWorldState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.team_id = reader.uint32();
                    break;
                case 2:
                    message.game_time = reader.float();
                    break;
                case 3:
                    message.dota_time = reader.float();
                    break;
                case 4:
                    message.game_state = reader.uint32();
                    break;
                case 5:
                    message.hero_pick_state = reader.uint32();
                    break;
                case 6:
                    message.time_of_day = reader.float();
                    break;
                case 7:
                    message.glyph_cooldown = reader.float();
                    break;
                case 8:
                    message.glyph_cooldown_enemy = reader.uint32();
                    break;
                case 10:
                    if (!(message.players && message.players.length))
                        message.players = [];
                    message.players.push($root.CMsgBotWorldState.Player.decode(reader, reader.uint32()));
                    break;
                case 11:
                    if (!(message.units && message.units.length))
                        message.units = [];
                    message.units.push($root.CMsgBotWorldState.Unit.decode(reader, reader.uint32()));
                    break;
                case 12:
                    if (!(message.dropped_items && message.dropped_items.length))
                        message.dropped_items = [];
                    message.dropped_items.push($root.CMsgBotWorldState.DroppedItem.decode(reader, reader.uint32()));
                    break;
                case 112:
                    if (!(message.dropped_items_deltas && message.dropped_items_deltas.length))
                        message.dropped_items_deltas = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.dropped_items_deltas.push(reader.int32());
                    } else
                        message.dropped_items_deltas.push(reader.int32());
                    break;
                case 13:
                    if (!(message.rune_infos && message.rune_infos.length))
                        message.rune_infos = [];
                    message.rune_infos.push($root.CMsgBotWorldState.RuneInfo.decode(reader, reader.uint32()));
                    break;
                case 113:
                    if (!(message.rune_infos_deltas && message.rune_infos_deltas.length))
                        message.rune_infos_deltas = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.rune_infos_deltas.push(reader.int32());
                    } else
                        message.rune_infos_deltas.push(reader.int32());
                    break;
                case 14:
                    if (!(message.incoming_teleports && message.incoming_teleports.length))
                        message.incoming_teleports = [];
                    message.incoming_teleports.push($root.CMsgBotWorldState.TeleportInfo.decode(reader, reader.uint32()));
                    break;
                case 15:
                    if (!(message.linear_projectiles && message.linear_projectiles.length))
                        message.linear_projectiles = [];
                    message.linear_projectiles.push($root.CMsgBotWorldState.LinearProjectile.decode(reader, reader.uint32()));
                    break;
                case 16:
                    if (!(message.avoidance_zones && message.avoidance_zones.length))
                        message.avoidance_zones = [];
                    message.avoidance_zones.push($root.CMsgBotWorldState.AvoidanceZone.decode(reader, reader.uint32()));
                    break;
                case 17:
                    if (!(message.couriers && message.couriers.length))
                        message.couriers = [];
                    message.couriers.push($root.CMsgBotWorldState.Courier.decode(reader, reader.uint32()));
                    break;
                case 20:
                    if (!(message.ability_events && message.ability_events.length))
                        message.ability_events = [];
                    message.ability_events.push($root.CMsgBotWorldState.EventAbility.decode(reader, reader.uint32()));
                    break;
                case 21:
                    if (!(message.damage_events && message.damage_events.length))
                        message.damage_events = [];
                    message.damage_events.push($root.CMsgBotWorldState.EventDamage.decode(reader, reader.uint32()));
                    break;
                case 22:
                    if (!(message.courier_killed_events && message.courier_killed_events.length))
                        message.courier_killed_events = [];
                    message.courier_killed_events.push($root.CMsgBotWorldState.EventCourierKilled.decode(reader, reader.uint32()));
                    break;
                case 23:
                    if (!(message.roshan_killed_events && message.roshan_killed_events.length))
                        message.roshan_killed_events = [];
                    message.roshan_killed_events.push($root.CMsgBotWorldState.EventRoshanKilled.decode(reader, reader.uint32()));
                    break;
                case 24:
                    if (!(message.tree_events && message.tree_events.length))
                        message.tree_events = [];
                    message.tree_events.push($root.CMsgBotWorldState.EventTree.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgBotWorldState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgBotWorldState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgBotWorldState} CMsgBotWorldState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgBotWorldState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgBotWorldState message.
         * @function verify
         * @memberof CMsgBotWorldState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgBotWorldState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                if (!$util.isInteger(message.team_id))
                    return "team_id: integer expected";
            if (message.game_time != null && message.hasOwnProperty("game_time"))
                if (typeof message.game_time !== "number")
                    return "game_time: number expected";
            if (message.dota_time != null && message.hasOwnProperty("dota_time"))
                if (typeof message.dota_time !== "number")
                    return "dota_time: number expected";
            if (message.game_state != null && message.hasOwnProperty("game_state"))
                if (!$util.isInteger(message.game_state))
                    return "game_state: integer expected";
            if (message.hero_pick_state != null && message.hasOwnProperty("hero_pick_state"))
                if (!$util.isInteger(message.hero_pick_state))
                    return "hero_pick_state: integer expected";
            if (message.time_of_day != null && message.hasOwnProperty("time_of_day"))
                if (typeof message.time_of_day !== "number")
                    return "time_of_day: number expected";
            if (message.glyph_cooldown != null && message.hasOwnProperty("glyph_cooldown"))
                if (typeof message.glyph_cooldown !== "number")
                    return "glyph_cooldown: number expected";
            if (message.glyph_cooldown_enemy != null && message.hasOwnProperty("glyph_cooldown_enemy"))
                if (!$util.isInteger(message.glyph_cooldown_enemy))
                    return "glyph_cooldown_enemy: integer expected";
            if (message.players != null && message.hasOwnProperty("players")) {
                if (!Array.isArray(message.players))
                    return "players: array expected";
                for (var i = 0; i < message.players.length; ++i) {
                    var error = $root.CMsgBotWorldState.Player.verify(message.players[i]);
                    if (error)
                        return "players." + error;
                }
            }
            if (message.units != null && message.hasOwnProperty("units")) {
                if (!Array.isArray(message.units))
                    return "units: array expected";
                for (var i = 0; i < message.units.length; ++i) {
                    var error = $root.CMsgBotWorldState.Unit.verify(message.units[i]);
                    if (error)
                        return "units." + error;
                }
            }
            if (message.dropped_items != null && message.hasOwnProperty("dropped_items")) {
                if (!Array.isArray(message.dropped_items))
                    return "dropped_items: array expected";
                for (var i = 0; i < message.dropped_items.length; ++i) {
                    var error = $root.CMsgBotWorldState.DroppedItem.verify(message.dropped_items[i]);
                    if (error)
                        return "dropped_items." + error;
                }
            }
            if (message.dropped_items_deltas != null && message.hasOwnProperty("dropped_items_deltas")) {
                if (!Array.isArray(message.dropped_items_deltas))
                    return "dropped_items_deltas: array expected";
                for (var i = 0; i < message.dropped_items_deltas.length; ++i)
                    if (!$util.isInteger(message.dropped_items_deltas[i]))
                        return "dropped_items_deltas: integer[] expected";
            }
            if (message.rune_infos != null && message.hasOwnProperty("rune_infos")) {
                if (!Array.isArray(message.rune_infos))
                    return "rune_infos: array expected";
                for (var i = 0; i < message.rune_infos.length; ++i) {
                    var error = $root.CMsgBotWorldState.RuneInfo.verify(message.rune_infos[i]);
                    if (error)
                        return "rune_infos." + error;
                }
            }
            if (message.rune_infos_deltas != null && message.hasOwnProperty("rune_infos_deltas")) {
                if (!Array.isArray(message.rune_infos_deltas))
                    return "rune_infos_deltas: array expected";
                for (var i = 0; i < message.rune_infos_deltas.length; ++i)
                    if (!$util.isInteger(message.rune_infos_deltas[i]))
                        return "rune_infos_deltas: integer[] expected";
            }
            if (message.incoming_teleports != null && message.hasOwnProperty("incoming_teleports")) {
                if (!Array.isArray(message.incoming_teleports))
                    return "incoming_teleports: array expected";
                for (var i = 0; i < message.incoming_teleports.length; ++i) {
                    var error = $root.CMsgBotWorldState.TeleportInfo.verify(message.incoming_teleports[i]);
                    if (error)
                        return "incoming_teleports." + error;
                }
            }
            if (message.linear_projectiles != null && message.hasOwnProperty("linear_projectiles")) {
                if (!Array.isArray(message.linear_projectiles))
                    return "linear_projectiles: array expected";
                for (var i = 0; i < message.linear_projectiles.length; ++i) {
                    var error = $root.CMsgBotWorldState.LinearProjectile.verify(message.linear_projectiles[i]);
                    if (error)
                        return "linear_projectiles." + error;
                }
            }
            if (message.avoidance_zones != null && message.hasOwnProperty("avoidance_zones")) {
                if (!Array.isArray(message.avoidance_zones))
                    return "avoidance_zones: array expected";
                for (var i = 0; i < message.avoidance_zones.length; ++i) {
                    var error = $root.CMsgBotWorldState.AvoidanceZone.verify(message.avoidance_zones[i]);
                    if (error)
                        return "avoidance_zones." + error;
                }
            }
            if (message.couriers != null && message.hasOwnProperty("couriers")) {
                if (!Array.isArray(message.couriers))
                    return "couriers: array expected";
                for (var i = 0; i < message.couriers.length; ++i) {
                    var error = $root.CMsgBotWorldState.Courier.verify(message.couriers[i]);
                    if (error)
                        return "couriers." + error;
                }
            }
            if (message.ability_events != null && message.hasOwnProperty("ability_events")) {
                if (!Array.isArray(message.ability_events))
                    return "ability_events: array expected";
                for (var i = 0; i < message.ability_events.length; ++i) {
                    var error = $root.CMsgBotWorldState.EventAbility.verify(message.ability_events[i]);
                    if (error)
                        return "ability_events." + error;
                }
            }
            if (message.damage_events != null && message.hasOwnProperty("damage_events")) {
                if (!Array.isArray(message.damage_events))
                    return "damage_events: array expected";
                for (var i = 0; i < message.damage_events.length; ++i) {
                    var error = $root.CMsgBotWorldState.EventDamage.verify(message.damage_events[i]);
                    if (error)
                        return "damage_events." + error;
                }
            }
            if (message.courier_killed_events != null && message.hasOwnProperty("courier_killed_events")) {
                if (!Array.isArray(message.courier_killed_events))
                    return "courier_killed_events: array expected";
                for (var i = 0; i < message.courier_killed_events.length; ++i) {
                    var error = $root.CMsgBotWorldState.EventCourierKilled.verify(message.courier_killed_events[i]);
                    if (error)
                        return "courier_killed_events." + error;
                }
            }
            if (message.roshan_killed_events != null && message.hasOwnProperty("roshan_killed_events")) {
                if (!Array.isArray(message.roshan_killed_events))
                    return "roshan_killed_events: array expected";
                for (var i = 0; i < message.roshan_killed_events.length; ++i) {
                    var error = $root.CMsgBotWorldState.EventRoshanKilled.verify(message.roshan_killed_events[i]);
                    if (error)
                        return "roshan_killed_events." + error;
                }
            }
            if (message.tree_events != null && message.hasOwnProperty("tree_events")) {
                if (!Array.isArray(message.tree_events))
                    return "tree_events: array expected";
                for (var i = 0; i < message.tree_events.length; ++i) {
                    var error = $root.CMsgBotWorldState.EventTree.verify(message.tree_events[i]);
                    if (error)
                        return "tree_events." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgBotWorldState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgBotWorldState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgBotWorldState} CMsgBotWorldState
         */
        CMsgBotWorldState.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgBotWorldState)
                return object;
            var message = new $root.CMsgBotWorldState();
            if (object.team_id != null)
                message.team_id = object.team_id >>> 0;
            if (object.game_time != null)
                message.game_time = Number(object.game_time);
            if (object.dota_time != null)
                message.dota_time = Number(object.dota_time);
            if (object.game_state != null)
                message.game_state = object.game_state >>> 0;
            if (object.hero_pick_state != null)
                message.hero_pick_state = object.hero_pick_state >>> 0;
            if (object.time_of_day != null)
                message.time_of_day = Number(object.time_of_day);
            if (object.glyph_cooldown != null)
                message.glyph_cooldown = Number(object.glyph_cooldown);
            if (object.glyph_cooldown_enemy != null)
                message.glyph_cooldown_enemy = object.glyph_cooldown_enemy >>> 0;
            if (object.players) {
                if (!Array.isArray(object.players))
                    throw TypeError(".CMsgBotWorldState.players: array expected");
                message.players = [];
                for (var i = 0; i < object.players.length; ++i) {
                    if (typeof object.players[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.players: object expected");
                    message.players[i] = $root.CMsgBotWorldState.Player.fromObject(object.players[i]);
                }
            }
            if (object.units) {
                if (!Array.isArray(object.units))
                    throw TypeError(".CMsgBotWorldState.units: array expected");
                message.units = [];
                for (var i = 0; i < object.units.length; ++i) {
                    if (typeof object.units[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.units: object expected");
                    message.units[i] = $root.CMsgBotWorldState.Unit.fromObject(object.units[i]);
                }
            }
            if (object.dropped_items) {
                if (!Array.isArray(object.dropped_items))
                    throw TypeError(".CMsgBotWorldState.dropped_items: array expected");
                message.dropped_items = [];
                for (var i = 0; i < object.dropped_items.length; ++i) {
                    if (typeof object.dropped_items[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.dropped_items: object expected");
                    message.dropped_items[i] = $root.CMsgBotWorldState.DroppedItem.fromObject(object.dropped_items[i]);
                }
            }
            if (object.dropped_items_deltas) {
                if (!Array.isArray(object.dropped_items_deltas))
                    throw TypeError(".CMsgBotWorldState.dropped_items_deltas: array expected");
                message.dropped_items_deltas = [];
                for (var i = 0; i < object.dropped_items_deltas.length; ++i)
                    message.dropped_items_deltas[i] = object.dropped_items_deltas[i] | 0;
            }
            if (object.rune_infos) {
                if (!Array.isArray(object.rune_infos))
                    throw TypeError(".CMsgBotWorldState.rune_infos: array expected");
                message.rune_infos = [];
                for (var i = 0; i < object.rune_infos.length; ++i) {
                    if (typeof object.rune_infos[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.rune_infos: object expected");
                    message.rune_infos[i] = $root.CMsgBotWorldState.RuneInfo.fromObject(object.rune_infos[i]);
                }
            }
            if (object.rune_infos_deltas) {
                if (!Array.isArray(object.rune_infos_deltas))
                    throw TypeError(".CMsgBotWorldState.rune_infos_deltas: array expected");
                message.rune_infos_deltas = [];
                for (var i = 0; i < object.rune_infos_deltas.length; ++i)
                    message.rune_infos_deltas[i] = object.rune_infos_deltas[i] | 0;
            }
            if (object.incoming_teleports) {
                if (!Array.isArray(object.incoming_teleports))
                    throw TypeError(".CMsgBotWorldState.incoming_teleports: array expected");
                message.incoming_teleports = [];
                for (var i = 0; i < object.incoming_teleports.length; ++i) {
                    if (typeof object.incoming_teleports[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.incoming_teleports: object expected");
                    message.incoming_teleports[i] = $root.CMsgBotWorldState.TeleportInfo.fromObject(object.incoming_teleports[i]);
                }
            }
            if (object.linear_projectiles) {
                if (!Array.isArray(object.linear_projectiles))
                    throw TypeError(".CMsgBotWorldState.linear_projectiles: array expected");
                message.linear_projectiles = [];
                for (var i = 0; i < object.linear_projectiles.length; ++i) {
                    if (typeof object.linear_projectiles[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.linear_projectiles: object expected");
                    message.linear_projectiles[i] = $root.CMsgBotWorldState.LinearProjectile.fromObject(object.linear_projectiles[i]);
                }
            }
            if (object.avoidance_zones) {
                if (!Array.isArray(object.avoidance_zones))
                    throw TypeError(".CMsgBotWorldState.avoidance_zones: array expected");
                message.avoidance_zones = [];
                for (var i = 0; i < object.avoidance_zones.length; ++i) {
                    if (typeof object.avoidance_zones[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.avoidance_zones: object expected");
                    message.avoidance_zones[i] = $root.CMsgBotWorldState.AvoidanceZone.fromObject(object.avoidance_zones[i]);
                }
            }
            if (object.couriers) {
                if (!Array.isArray(object.couriers))
                    throw TypeError(".CMsgBotWorldState.couriers: array expected");
                message.couriers = [];
                for (var i = 0; i < object.couriers.length; ++i) {
                    if (typeof object.couriers[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.couriers: object expected");
                    message.couriers[i] = $root.CMsgBotWorldState.Courier.fromObject(object.couriers[i]);
                }
            }
            if (object.ability_events) {
                if (!Array.isArray(object.ability_events))
                    throw TypeError(".CMsgBotWorldState.ability_events: array expected");
                message.ability_events = [];
                for (var i = 0; i < object.ability_events.length; ++i) {
                    if (typeof object.ability_events[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.ability_events: object expected");
                    message.ability_events[i] = $root.CMsgBotWorldState.EventAbility.fromObject(object.ability_events[i]);
                }
            }
            if (object.damage_events) {
                if (!Array.isArray(object.damage_events))
                    throw TypeError(".CMsgBotWorldState.damage_events: array expected");
                message.damage_events = [];
                for (var i = 0; i < object.damage_events.length; ++i) {
                    if (typeof object.damage_events[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.damage_events: object expected");
                    message.damage_events[i] = $root.CMsgBotWorldState.EventDamage.fromObject(object.damage_events[i]);
                }
            }
            if (object.courier_killed_events) {
                if (!Array.isArray(object.courier_killed_events))
                    throw TypeError(".CMsgBotWorldState.courier_killed_events: array expected");
                message.courier_killed_events = [];
                for (var i = 0; i < object.courier_killed_events.length; ++i) {
                    if (typeof object.courier_killed_events[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.courier_killed_events: object expected");
                    message.courier_killed_events[i] = $root.CMsgBotWorldState.EventCourierKilled.fromObject(object.courier_killed_events[i]);
                }
            }
            if (object.roshan_killed_events) {
                if (!Array.isArray(object.roshan_killed_events))
                    throw TypeError(".CMsgBotWorldState.roshan_killed_events: array expected");
                message.roshan_killed_events = [];
                for (var i = 0; i < object.roshan_killed_events.length; ++i) {
                    if (typeof object.roshan_killed_events[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.roshan_killed_events: object expected");
                    message.roshan_killed_events[i] = $root.CMsgBotWorldState.EventRoshanKilled.fromObject(object.roshan_killed_events[i]);
                }
            }
            if (object.tree_events) {
                if (!Array.isArray(object.tree_events))
                    throw TypeError(".CMsgBotWorldState.tree_events: array expected");
                message.tree_events = [];
                for (var i = 0; i < object.tree_events.length; ++i) {
                    if (typeof object.tree_events[i] !== "object")
                        throw TypeError(".CMsgBotWorldState.tree_events: object expected");
                    message.tree_events[i] = $root.CMsgBotWorldState.EventTree.fromObject(object.tree_events[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgBotWorldState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgBotWorldState
         * @static
         * @param {CMsgBotWorldState} message CMsgBotWorldState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgBotWorldState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.players = [];
                object.units = [];
                object.dropped_items = [];
                object.rune_infos = [];
                object.incoming_teleports = [];
                object.linear_projectiles = [];
                object.avoidance_zones = [];
                object.couriers = [];
                object.ability_events = [];
                object.damage_events = [];
                object.courier_killed_events = [];
                object.roshan_killed_events = [];
                object.tree_events = [];
                object.dropped_items_deltas = [];
                object.rune_infos_deltas = [];
            }
            if (options.defaults) {
                object.team_id = 0;
                object.game_time = 0;
                object.dota_time = 0;
                object.game_state = 0;
                object.hero_pick_state = 0;
                object.time_of_day = 0;
                object.glyph_cooldown = 0;
                object.glyph_cooldown_enemy = 0;
            }
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                object.team_id = message.team_id;
            if (message.game_time != null && message.hasOwnProperty("game_time"))
                object.game_time = options.json && !isFinite(message.game_time) ? String(message.game_time) : message.game_time;
            if (message.dota_time != null && message.hasOwnProperty("dota_time"))
                object.dota_time = options.json && !isFinite(message.dota_time) ? String(message.dota_time) : message.dota_time;
            if (message.game_state != null && message.hasOwnProperty("game_state"))
                object.game_state = message.game_state;
            if (message.hero_pick_state != null && message.hasOwnProperty("hero_pick_state"))
                object.hero_pick_state = message.hero_pick_state;
            if (message.time_of_day != null && message.hasOwnProperty("time_of_day"))
                object.time_of_day = options.json && !isFinite(message.time_of_day) ? String(message.time_of_day) : message.time_of_day;
            if (message.glyph_cooldown != null && message.hasOwnProperty("glyph_cooldown"))
                object.glyph_cooldown = options.json && !isFinite(message.glyph_cooldown) ? String(message.glyph_cooldown) : message.glyph_cooldown;
            if (message.glyph_cooldown_enemy != null && message.hasOwnProperty("glyph_cooldown_enemy"))
                object.glyph_cooldown_enemy = message.glyph_cooldown_enemy;
            if (message.players && message.players.length) {
                object.players = [];
                for (var j = 0; j < message.players.length; ++j)
                    object.players[j] = $root.CMsgBotWorldState.Player.toObject(message.players[j], options);
            }
            if (message.units && message.units.length) {
                object.units = [];
                for (var j = 0; j < message.units.length; ++j)
                    object.units[j] = $root.CMsgBotWorldState.Unit.toObject(message.units[j], options);
            }
            if (message.dropped_items && message.dropped_items.length) {
                object.dropped_items = [];
                for (var j = 0; j < message.dropped_items.length; ++j)
                    object.dropped_items[j] = $root.CMsgBotWorldState.DroppedItem.toObject(message.dropped_items[j], options);
            }
            if (message.rune_infos && message.rune_infos.length) {
                object.rune_infos = [];
                for (var j = 0; j < message.rune_infos.length; ++j)
                    object.rune_infos[j] = $root.CMsgBotWorldState.RuneInfo.toObject(message.rune_infos[j], options);
            }
            if (message.incoming_teleports && message.incoming_teleports.length) {
                object.incoming_teleports = [];
                for (var j = 0; j < message.incoming_teleports.length; ++j)
                    object.incoming_teleports[j] = $root.CMsgBotWorldState.TeleportInfo.toObject(message.incoming_teleports[j], options);
            }
            if (message.linear_projectiles && message.linear_projectiles.length) {
                object.linear_projectiles = [];
                for (var j = 0; j < message.linear_projectiles.length; ++j)
                    object.linear_projectiles[j] = $root.CMsgBotWorldState.LinearProjectile.toObject(message.linear_projectiles[j], options);
            }
            if (message.avoidance_zones && message.avoidance_zones.length) {
                object.avoidance_zones = [];
                for (var j = 0; j < message.avoidance_zones.length; ++j)
                    object.avoidance_zones[j] = $root.CMsgBotWorldState.AvoidanceZone.toObject(message.avoidance_zones[j], options);
            }
            if (message.couriers && message.couriers.length) {
                object.couriers = [];
                for (var j = 0; j < message.couriers.length; ++j)
                    object.couriers[j] = $root.CMsgBotWorldState.Courier.toObject(message.couriers[j], options);
            }
            if (message.ability_events && message.ability_events.length) {
                object.ability_events = [];
                for (var j = 0; j < message.ability_events.length; ++j)
                    object.ability_events[j] = $root.CMsgBotWorldState.EventAbility.toObject(message.ability_events[j], options);
            }
            if (message.damage_events && message.damage_events.length) {
                object.damage_events = [];
                for (var j = 0; j < message.damage_events.length; ++j)
                    object.damage_events[j] = $root.CMsgBotWorldState.EventDamage.toObject(message.damage_events[j], options);
            }
            if (message.courier_killed_events && message.courier_killed_events.length) {
                object.courier_killed_events = [];
                for (var j = 0; j < message.courier_killed_events.length; ++j)
                    object.courier_killed_events[j] = $root.CMsgBotWorldState.EventCourierKilled.toObject(message.courier_killed_events[j], options);
            }
            if (message.roshan_killed_events && message.roshan_killed_events.length) {
                object.roshan_killed_events = [];
                for (var j = 0; j < message.roshan_killed_events.length; ++j)
                    object.roshan_killed_events[j] = $root.CMsgBotWorldState.EventRoshanKilled.toObject(message.roshan_killed_events[j], options);
            }
            if (message.tree_events && message.tree_events.length) {
                object.tree_events = [];
                for (var j = 0; j < message.tree_events.length; ++j)
                    object.tree_events[j] = $root.CMsgBotWorldState.EventTree.toObject(message.tree_events[j], options);
            }
            if (message.dropped_items_deltas && message.dropped_items_deltas.length) {
                object.dropped_items_deltas = [];
                for (var j = 0; j < message.dropped_items_deltas.length; ++j)
                    object.dropped_items_deltas[j] = message.dropped_items_deltas[j];
            }
            if (message.rune_infos_deltas && message.rune_infos_deltas.length) {
                object.rune_infos_deltas = [];
                for (var j = 0; j < message.rune_infos_deltas.length; ++j)
                    object.rune_infos_deltas[j] = message.rune_infos_deltas[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgBotWorldState to JSON.
         * @function toJSON
         * @memberof CMsgBotWorldState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgBotWorldState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgBotWorldState.Vector = (function() {
    
            /**
             * Properties of a Vector.
             * @memberof CMsgBotWorldState
             * @interface IVector
             * @property {number|null} [x] Vector x
             * @property {number|null} [y] Vector y
             * @property {number|null} [z] Vector z
             */
    
            /**
             * Constructs a new Vector.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a Vector.
             * @implements IVector
             * @constructor
             * @param {CMsgBotWorldState.IVector=} [properties] Properties to set
             */
            function Vector(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Vector x.
             * @member {number} x
             * @memberof CMsgBotWorldState.Vector
             * @instance
             */
            Vector.prototype.x = 0;
    
            /**
             * Vector y.
             * @member {number} y
             * @memberof CMsgBotWorldState.Vector
             * @instance
             */
            Vector.prototype.y = 0;
    
            /**
             * Vector z.
             * @member {number} z
             * @memberof CMsgBotWorldState.Vector
             * @instance
             */
            Vector.prototype.z = 0;
    
            /**
             * Creates a new Vector instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {CMsgBotWorldState.IVector=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Vector} Vector instance
             */
            Vector.create = function create(properties) {
                return new Vector(properties);
            };
    
            /**
             * Encodes the specified Vector message. Does not implicitly {@link CMsgBotWorldState.Vector.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {CMsgBotWorldState.IVector} message Vector message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vector.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                    writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                if (message.z != null && Object.hasOwnProperty.call(message, "z"))
                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.z);
                return writer;
            };
    
            /**
             * Encodes the specified Vector message, length delimited. Does not implicitly {@link CMsgBotWorldState.Vector.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {CMsgBotWorldState.IVector} message Vector message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vector.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Vector message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Vector} Vector
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vector.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Vector();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.x = reader.float();
                        break;
                    case 2:
                        message.y = reader.float();
                        break;
                    case 3:
                        message.z = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Vector message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Vector} Vector
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vector.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Vector message.
             * @function verify
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Vector.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.x != null && message.hasOwnProperty("x"))
                    if (typeof message.x !== "number")
                        return "x: number expected";
                if (message.y != null && message.hasOwnProperty("y"))
                    if (typeof message.y !== "number")
                        return "y: number expected";
                if (message.z != null && message.hasOwnProperty("z"))
                    if (typeof message.z !== "number")
                        return "z: number expected";
                return null;
            };
    
            /**
             * Creates a Vector message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Vector} Vector
             */
            Vector.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Vector)
                    return object;
                var message = new $root.CMsgBotWorldState.Vector();
                if (object.x != null)
                    message.x = Number(object.x);
                if (object.y != null)
                    message.y = Number(object.y);
                if (object.z != null)
                    message.z = Number(object.z);
                return message;
            };
    
            /**
             * Creates a plain object from a Vector message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Vector
             * @static
             * @param {CMsgBotWorldState.Vector} message Vector
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Vector.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.x = 0;
                    object.y = 0;
                    object.z = 0;
                }
                if (message.x != null && message.hasOwnProperty("x"))
                    object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                if (message.y != null && message.hasOwnProperty("y"))
                    object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                if (message.z != null && message.hasOwnProperty("z"))
                    object.z = options.json && !isFinite(message.z) ? String(message.z) : message.z;
                return object;
            };
    
            /**
             * Converts this Vector to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Vector
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Vector.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Vector;
        })();
    
        CMsgBotWorldState.Player = (function() {
    
            /**
             * Properties of a Player.
             * @memberof CMsgBotWorldState
             * @interface IPlayer
             * @property {number|null} [player_id] Player player_id
             * @property {number|null} [hero_id] Player hero_id
             * @property {boolean|null} [is_alive] Player is_alive
             * @property {number|null} [respawn_time] Player respawn_time
             * @property {number|null} [kills] Player kills
             * @property {number|null} [deaths] Player deaths
             * @property {number|null} [assists] Player assists
             * @property {number|null} [team_id] Player team_id
             */
    
            /**
             * Constructs a new Player.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a Player.
             * @implements IPlayer
             * @constructor
             * @param {CMsgBotWorldState.IPlayer=} [properties] Properties to set
             */
            function Player(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Player player_id.
             * @member {number} player_id
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.player_id = 0;
    
            /**
             * Player hero_id.
             * @member {number} hero_id
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.hero_id = 0;
    
            /**
             * Player is_alive.
             * @member {boolean} is_alive
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.is_alive = false;
    
            /**
             * Player respawn_time.
             * @member {number} respawn_time
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.respawn_time = 0;
    
            /**
             * Player kills.
             * @member {number} kills
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.kills = 0;
    
            /**
             * Player deaths.
             * @member {number} deaths
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.deaths = 0;
    
            /**
             * Player assists.
             * @member {number} assists
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.assists = 0;
    
            /**
             * Player team_id.
             * @member {number} team_id
             * @memberof CMsgBotWorldState.Player
             * @instance
             */
            Player.prototype.team_id = 0;
    
            /**
             * Creates a new Player instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {CMsgBotWorldState.IPlayer=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Player} Player instance
             */
            Player.create = function create(properties) {
                return new Player(properties);
            };
    
            /**
             * Encodes the specified Player message. Does not implicitly {@link CMsgBotWorldState.Player.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {CMsgBotWorldState.IPlayer} message Player message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Player.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.player_id != null && Object.hasOwnProperty.call(message, "player_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.player_id);
                if (message.hero_id != null && Object.hasOwnProperty.call(message, "hero_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.hero_id);
                if (message.is_alive != null && Object.hasOwnProperty.call(message, "is_alive"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_alive);
                if (message.respawn_time != null && Object.hasOwnProperty.call(message, "respawn_time"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.respawn_time);
                if (message.kills != null && Object.hasOwnProperty.call(message, "kills"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.kills);
                if (message.deaths != null && Object.hasOwnProperty.call(message, "deaths"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.deaths);
                if (message.assists != null && Object.hasOwnProperty.call(message, "assists"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.assists);
                if (message.team_id != null && Object.hasOwnProperty.call(message, "team_id"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.team_id);
                return writer;
            };
    
            /**
             * Encodes the specified Player message, length delimited. Does not implicitly {@link CMsgBotWorldState.Player.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {CMsgBotWorldState.IPlayer} message Player message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Player.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Player message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Player} Player
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Player.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Player();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.player_id = reader.int32();
                        break;
                    case 2:
                        message.hero_id = reader.uint32();
                        break;
                    case 3:
                        message.is_alive = reader.bool();
                        break;
                    case 4:
                        message.respawn_time = reader.float();
                        break;
                    case 5:
                        message.kills = reader.uint32();
                        break;
                    case 6:
                        message.deaths = reader.uint32();
                        break;
                    case 7:
                        message.assists = reader.uint32();
                        break;
                    case 8:
                        message.team_id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Player message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Player} Player
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Player.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Player message.
             * @function verify
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Player.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    if (!$util.isInteger(message.player_id))
                        return "player_id: integer expected";
                if (message.hero_id != null && message.hasOwnProperty("hero_id"))
                    if (!$util.isInteger(message.hero_id))
                        return "hero_id: integer expected";
                if (message.is_alive != null && message.hasOwnProperty("is_alive"))
                    if (typeof message.is_alive !== "boolean")
                        return "is_alive: boolean expected";
                if (message.respawn_time != null && message.hasOwnProperty("respawn_time"))
                    if (typeof message.respawn_time !== "number")
                        return "respawn_time: number expected";
                if (message.kills != null && message.hasOwnProperty("kills"))
                    if (!$util.isInteger(message.kills))
                        return "kills: integer expected";
                if (message.deaths != null && message.hasOwnProperty("deaths"))
                    if (!$util.isInteger(message.deaths))
                        return "deaths: integer expected";
                if (message.assists != null && message.hasOwnProperty("assists"))
                    if (!$util.isInteger(message.assists))
                        return "assists: integer expected";
                if (message.team_id != null && message.hasOwnProperty("team_id"))
                    if (!$util.isInteger(message.team_id))
                        return "team_id: integer expected";
                return null;
            };
    
            /**
             * Creates a Player message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Player} Player
             */
            Player.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Player)
                    return object;
                var message = new $root.CMsgBotWorldState.Player();
                if (object.player_id != null)
                    message.player_id = object.player_id | 0;
                if (object.hero_id != null)
                    message.hero_id = object.hero_id >>> 0;
                if (object.is_alive != null)
                    message.is_alive = Boolean(object.is_alive);
                if (object.respawn_time != null)
                    message.respawn_time = Number(object.respawn_time);
                if (object.kills != null)
                    message.kills = object.kills >>> 0;
                if (object.deaths != null)
                    message.deaths = object.deaths >>> 0;
                if (object.assists != null)
                    message.assists = object.assists >>> 0;
                if (object.team_id != null)
                    message.team_id = object.team_id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Player message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Player
             * @static
             * @param {CMsgBotWorldState.Player} message Player
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Player.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.player_id = 0;
                    object.hero_id = 0;
                    object.is_alive = false;
                    object.respawn_time = 0;
                    object.kills = 0;
                    object.deaths = 0;
                    object.assists = 0;
                    object.team_id = 0;
                }
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    object.player_id = message.player_id;
                if (message.hero_id != null && message.hasOwnProperty("hero_id"))
                    object.hero_id = message.hero_id;
                if (message.is_alive != null && message.hasOwnProperty("is_alive"))
                    object.is_alive = message.is_alive;
                if (message.respawn_time != null && message.hasOwnProperty("respawn_time"))
                    object.respawn_time = options.json && !isFinite(message.respawn_time) ? String(message.respawn_time) : message.respawn_time;
                if (message.kills != null && message.hasOwnProperty("kills"))
                    object.kills = message.kills;
                if (message.deaths != null && message.hasOwnProperty("deaths"))
                    object.deaths = message.deaths;
                if (message.assists != null && message.hasOwnProperty("assists"))
                    object.assists = message.assists;
                if (message.team_id != null && message.hasOwnProperty("team_id"))
                    object.team_id = message.team_id;
                return object;
            };
    
            /**
             * Converts this Player to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Player
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Player.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Player;
        })();
    
        CMsgBotWorldState.Ability = (function() {
    
            /**
             * Properties of an Ability.
             * @memberof CMsgBotWorldState
             * @interface IAbility
             * @property {number|null} [handle] Ability handle
             * @property {number|null} [ability_id] Ability ability_id
             * @property {number|null} [slot] Ability slot
             * @property {number|null} [caster_handle] Ability caster_handle
             * @property {number|null} [level] Ability level
             * @property {number|null} [cast_range] Ability cast_range
             * @property {number|null} [channel_time] Ability channel_time
             * @property {number|null} [cooldown_remaining] Ability cooldown_remaining
             * @property {boolean|null} [is_activated] Ability is_activated
             * @property {boolean|null} [is_toggled] Ability is_toggled
             * @property {boolean|null} [is_in_ability_phase] Ability is_in_ability_phase
             * @property {boolean|null} [is_channeling] Ability is_channeling
             * @property {boolean|null} [is_stolen] Ability is_stolen
             * @property {boolean|null} [is_fully_castable] Ability is_fully_castable
             * @property {number|null} [charges] Ability charges
             * @property {number|null} [secondary_charges] Ability secondary_charges
             * @property {boolean|null} [is_combined_locked] Ability is_combined_locked
             * @property {number|null} [power_treads_stat] Ability power_treads_stat
             */
    
            /**
             * Constructs a new Ability.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an Ability.
             * @implements IAbility
             * @constructor
             * @param {CMsgBotWorldState.IAbility=} [properties] Properties to set
             */
            function Ability(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Ability handle.
             * @member {number} handle
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.handle = 0;
    
            /**
             * Ability ability_id.
             * @member {number} ability_id
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.ability_id = 0;
    
            /**
             * Ability slot.
             * @member {number} slot
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.slot = 0;
    
            /**
             * Ability caster_handle.
             * @member {number} caster_handle
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.caster_handle = 0;
    
            /**
             * Ability level.
             * @member {number} level
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.level = 0;
    
            /**
             * Ability cast_range.
             * @member {number} cast_range
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.cast_range = 0;
    
            /**
             * Ability channel_time.
             * @member {number} channel_time
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.channel_time = 0;
    
            /**
             * Ability cooldown_remaining.
             * @member {number} cooldown_remaining
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.cooldown_remaining = 0;
    
            /**
             * Ability is_activated.
             * @member {boolean} is_activated
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.is_activated = false;
    
            /**
             * Ability is_toggled.
             * @member {boolean} is_toggled
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.is_toggled = false;
    
            /**
             * Ability is_in_ability_phase.
             * @member {boolean} is_in_ability_phase
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.is_in_ability_phase = false;
    
            /**
             * Ability is_channeling.
             * @member {boolean} is_channeling
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.is_channeling = false;
    
            /**
             * Ability is_stolen.
             * @member {boolean} is_stolen
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.is_stolen = false;
    
            /**
             * Ability is_fully_castable.
             * @member {boolean} is_fully_castable
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.is_fully_castable = false;
    
            /**
             * Ability charges.
             * @member {number} charges
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.charges = 0;
    
            /**
             * Ability secondary_charges.
             * @member {number} secondary_charges
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.secondary_charges = 0;
    
            /**
             * Ability is_combined_locked.
             * @member {boolean} is_combined_locked
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.is_combined_locked = false;
    
            /**
             * Ability power_treads_stat.
             * @member {number} power_treads_stat
             * @memberof CMsgBotWorldState.Ability
             * @instance
             */
            Ability.prototype.power_treads_stat = -1;
    
            /**
             * Creates a new Ability instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {CMsgBotWorldState.IAbility=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Ability} Ability instance
             */
            Ability.create = function create(properties) {
                return new Ability(properties);
            };
    
            /**
             * Encodes the specified Ability message. Does not implicitly {@link CMsgBotWorldState.Ability.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {CMsgBotWorldState.IAbility} message Ability message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ability.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.handle);
                if (message.ability_id != null && Object.hasOwnProperty.call(message, "ability_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ability_id);
                if (message.slot != null && Object.hasOwnProperty.call(message, "slot"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.slot);
                if (message.caster_handle != null && Object.hasOwnProperty.call(message, "caster_handle"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.caster_handle);
                if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.level);
                if (message.cast_range != null && Object.hasOwnProperty.call(message, "cast_range"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.cast_range);
                if (message.channel_time != null && Object.hasOwnProperty.call(message, "channel_time"))
                    writer.uint32(/* id 11, wireType 5 =*/93).float(message.channel_time);
                if (message.cooldown_remaining != null && Object.hasOwnProperty.call(message, "cooldown_remaining"))
                    writer.uint32(/* id 12, wireType 5 =*/101).float(message.cooldown_remaining);
                if (message.is_activated != null && Object.hasOwnProperty.call(message, "is_activated"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.is_activated);
                if (message.is_toggled != null && Object.hasOwnProperty.call(message, "is_toggled"))
                    writer.uint32(/* id 21, wireType 0 =*/168).bool(message.is_toggled);
                if (message.is_in_ability_phase != null && Object.hasOwnProperty.call(message, "is_in_ability_phase"))
                    writer.uint32(/* id 22, wireType 0 =*/176).bool(message.is_in_ability_phase);
                if (message.is_channeling != null && Object.hasOwnProperty.call(message, "is_channeling"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.is_channeling);
                if (message.is_stolen != null && Object.hasOwnProperty.call(message, "is_stolen"))
                    writer.uint32(/* id 24, wireType 0 =*/192).bool(message.is_stolen);
                if (message.is_fully_castable != null && Object.hasOwnProperty.call(message, "is_fully_castable"))
                    writer.uint32(/* id 25, wireType 0 =*/200).bool(message.is_fully_castable);
                if (message.charges != null && Object.hasOwnProperty.call(message, "charges"))
                    writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.charges);
                if (message.secondary_charges != null && Object.hasOwnProperty.call(message, "secondary_charges"))
                    writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.secondary_charges);
                if (message.is_combined_locked != null && Object.hasOwnProperty.call(message, "is_combined_locked"))
                    writer.uint32(/* id 40, wireType 0 =*/320).bool(message.is_combined_locked);
                if (message.power_treads_stat != null && Object.hasOwnProperty.call(message, "power_treads_stat"))
                    writer.uint32(/* id 50, wireType 0 =*/400).int32(message.power_treads_stat);
                return writer;
            };
    
            /**
             * Encodes the specified Ability message, length delimited. Does not implicitly {@link CMsgBotWorldState.Ability.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {CMsgBotWorldState.IAbility} message Ability message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ability.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Ability message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Ability} Ability
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ability.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Ability();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.handle = reader.uint32();
                        break;
                    case 2:
                        message.ability_id = reader.uint32();
                        break;
                    case 3:
                        message.slot = reader.uint32();
                        break;
                    case 5:
                        message.caster_handle = reader.uint32();
                        break;
                    case 6:
                        message.level = reader.uint32();
                        break;
                    case 10:
                        message.cast_range = reader.uint32();
                        break;
                    case 11:
                        message.channel_time = reader.float();
                        break;
                    case 12:
                        message.cooldown_remaining = reader.float();
                        break;
                    case 20:
                        message.is_activated = reader.bool();
                        break;
                    case 21:
                        message.is_toggled = reader.bool();
                        break;
                    case 22:
                        message.is_in_ability_phase = reader.bool();
                        break;
                    case 23:
                        message.is_channeling = reader.bool();
                        break;
                    case 24:
                        message.is_stolen = reader.bool();
                        break;
                    case 25:
                        message.is_fully_castable = reader.bool();
                        break;
                    case 30:
                        message.charges = reader.uint32();
                        break;
                    case 31:
                        message.secondary_charges = reader.uint32();
                        break;
                    case 40:
                        message.is_combined_locked = reader.bool();
                        break;
                    case 50:
                        message.power_treads_stat = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Ability message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Ability} Ability
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ability.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Ability message.
             * @function verify
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Ability.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.handle != null && message.hasOwnProperty("handle"))
                    if (!$util.isInteger(message.handle))
                        return "handle: integer expected";
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    if (!$util.isInteger(message.ability_id))
                        return "ability_id: integer expected";
                if (message.slot != null && message.hasOwnProperty("slot"))
                    if (!$util.isInteger(message.slot))
                        return "slot: integer expected";
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    if (!$util.isInteger(message.caster_handle))
                        return "caster_handle: integer expected";
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                if (message.cast_range != null && message.hasOwnProperty("cast_range"))
                    if (!$util.isInteger(message.cast_range))
                        return "cast_range: integer expected";
                if (message.channel_time != null && message.hasOwnProperty("channel_time"))
                    if (typeof message.channel_time !== "number")
                        return "channel_time: number expected";
                if (message.cooldown_remaining != null && message.hasOwnProperty("cooldown_remaining"))
                    if (typeof message.cooldown_remaining !== "number")
                        return "cooldown_remaining: number expected";
                if (message.is_activated != null && message.hasOwnProperty("is_activated"))
                    if (typeof message.is_activated !== "boolean")
                        return "is_activated: boolean expected";
                if (message.is_toggled != null && message.hasOwnProperty("is_toggled"))
                    if (typeof message.is_toggled !== "boolean")
                        return "is_toggled: boolean expected";
                if (message.is_in_ability_phase != null && message.hasOwnProperty("is_in_ability_phase"))
                    if (typeof message.is_in_ability_phase !== "boolean")
                        return "is_in_ability_phase: boolean expected";
                if (message.is_channeling != null && message.hasOwnProperty("is_channeling"))
                    if (typeof message.is_channeling !== "boolean")
                        return "is_channeling: boolean expected";
                if (message.is_stolen != null && message.hasOwnProperty("is_stolen"))
                    if (typeof message.is_stolen !== "boolean")
                        return "is_stolen: boolean expected";
                if (message.is_fully_castable != null && message.hasOwnProperty("is_fully_castable"))
                    if (typeof message.is_fully_castable !== "boolean")
                        return "is_fully_castable: boolean expected";
                if (message.charges != null && message.hasOwnProperty("charges"))
                    if (!$util.isInteger(message.charges))
                        return "charges: integer expected";
                if (message.secondary_charges != null && message.hasOwnProperty("secondary_charges"))
                    if (!$util.isInteger(message.secondary_charges))
                        return "secondary_charges: integer expected";
                if (message.is_combined_locked != null && message.hasOwnProperty("is_combined_locked"))
                    if (typeof message.is_combined_locked !== "boolean")
                        return "is_combined_locked: boolean expected";
                if (message.power_treads_stat != null && message.hasOwnProperty("power_treads_stat"))
                    if (!$util.isInteger(message.power_treads_stat))
                        return "power_treads_stat: integer expected";
                return null;
            };
    
            /**
             * Creates an Ability message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Ability} Ability
             */
            Ability.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Ability)
                    return object;
                var message = new $root.CMsgBotWorldState.Ability();
                if (object.handle != null)
                    message.handle = object.handle >>> 0;
                if (object.ability_id != null)
                    message.ability_id = object.ability_id >>> 0;
                if (object.slot != null)
                    message.slot = object.slot >>> 0;
                if (object.caster_handle != null)
                    message.caster_handle = object.caster_handle >>> 0;
                if (object.level != null)
                    message.level = object.level >>> 0;
                if (object.cast_range != null)
                    message.cast_range = object.cast_range >>> 0;
                if (object.channel_time != null)
                    message.channel_time = Number(object.channel_time);
                if (object.cooldown_remaining != null)
                    message.cooldown_remaining = Number(object.cooldown_remaining);
                if (object.is_activated != null)
                    message.is_activated = Boolean(object.is_activated);
                if (object.is_toggled != null)
                    message.is_toggled = Boolean(object.is_toggled);
                if (object.is_in_ability_phase != null)
                    message.is_in_ability_phase = Boolean(object.is_in_ability_phase);
                if (object.is_channeling != null)
                    message.is_channeling = Boolean(object.is_channeling);
                if (object.is_stolen != null)
                    message.is_stolen = Boolean(object.is_stolen);
                if (object.is_fully_castable != null)
                    message.is_fully_castable = Boolean(object.is_fully_castable);
                if (object.charges != null)
                    message.charges = object.charges >>> 0;
                if (object.secondary_charges != null)
                    message.secondary_charges = object.secondary_charges >>> 0;
                if (object.is_combined_locked != null)
                    message.is_combined_locked = Boolean(object.is_combined_locked);
                if (object.power_treads_stat != null)
                    message.power_treads_stat = object.power_treads_stat | 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Ability message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Ability
             * @static
             * @param {CMsgBotWorldState.Ability} message Ability
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Ability.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.handle = 0;
                    object.ability_id = 0;
                    object.slot = 0;
                    object.caster_handle = 0;
                    object.level = 0;
                    object.cast_range = 0;
                    object.channel_time = 0;
                    object.cooldown_remaining = 0;
                    object.is_activated = false;
                    object.is_toggled = false;
                    object.is_in_ability_phase = false;
                    object.is_channeling = false;
                    object.is_stolen = false;
                    object.is_fully_castable = false;
                    object.charges = 0;
                    object.secondary_charges = 0;
                    object.is_combined_locked = false;
                    object.power_treads_stat = -1;
                }
                if (message.handle != null && message.hasOwnProperty("handle"))
                    object.handle = message.handle;
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    object.ability_id = message.ability_id;
                if (message.slot != null && message.hasOwnProperty("slot"))
                    object.slot = message.slot;
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    object.caster_handle = message.caster_handle;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.cast_range != null && message.hasOwnProperty("cast_range"))
                    object.cast_range = message.cast_range;
                if (message.channel_time != null && message.hasOwnProperty("channel_time"))
                    object.channel_time = options.json && !isFinite(message.channel_time) ? String(message.channel_time) : message.channel_time;
                if (message.cooldown_remaining != null && message.hasOwnProperty("cooldown_remaining"))
                    object.cooldown_remaining = options.json && !isFinite(message.cooldown_remaining) ? String(message.cooldown_remaining) : message.cooldown_remaining;
                if (message.is_activated != null && message.hasOwnProperty("is_activated"))
                    object.is_activated = message.is_activated;
                if (message.is_toggled != null && message.hasOwnProperty("is_toggled"))
                    object.is_toggled = message.is_toggled;
                if (message.is_in_ability_phase != null && message.hasOwnProperty("is_in_ability_phase"))
                    object.is_in_ability_phase = message.is_in_ability_phase;
                if (message.is_channeling != null && message.hasOwnProperty("is_channeling"))
                    object.is_channeling = message.is_channeling;
                if (message.is_stolen != null && message.hasOwnProperty("is_stolen"))
                    object.is_stolen = message.is_stolen;
                if (message.is_fully_castable != null && message.hasOwnProperty("is_fully_castable"))
                    object.is_fully_castable = message.is_fully_castable;
                if (message.charges != null && message.hasOwnProperty("charges"))
                    object.charges = message.charges;
                if (message.secondary_charges != null && message.hasOwnProperty("secondary_charges"))
                    object.secondary_charges = message.secondary_charges;
                if (message.is_combined_locked != null && message.hasOwnProperty("is_combined_locked"))
                    object.is_combined_locked = message.is_combined_locked;
                if (message.power_treads_stat != null && message.hasOwnProperty("power_treads_stat"))
                    object.power_treads_stat = message.power_treads_stat;
                return object;
            };
    
            /**
             * Converts this Ability to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Ability
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Ability.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Ability;
        })();
    
        CMsgBotWorldState.DroppedItem = (function() {
    
            /**
             * Properties of a DroppedItem.
             * @memberof CMsgBotWorldState
             * @interface IDroppedItem
             * @property {number|null} [item_id] DroppedItem item_id
             * @property {CMsgBotWorldState.IVector|null} [location] DroppedItem location
             */
    
            /**
             * Constructs a new DroppedItem.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a DroppedItem.
             * @implements IDroppedItem
             * @constructor
             * @param {CMsgBotWorldState.IDroppedItem=} [properties] Properties to set
             */
            function DroppedItem(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DroppedItem item_id.
             * @member {number} item_id
             * @memberof CMsgBotWorldState.DroppedItem
             * @instance
             */
            DroppedItem.prototype.item_id = 0;
    
            /**
             * DroppedItem location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.DroppedItem
             * @instance
             */
            DroppedItem.prototype.location = null;
    
            /**
             * Creates a new DroppedItem instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {CMsgBotWorldState.IDroppedItem=} [properties] Properties to set
             * @returns {CMsgBotWorldState.DroppedItem} DroppedItem instance
             */
            DroppedItem.create = function create(properties) {
                return new DroppedItem(properties);
            };
    
            /**
             * Encodes the specified DroppedItem message. Does not implicitly {@link CMsgBotWorldState.DroppedItem.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {CMsgBotWorldState.IDroppedItem} message DroppedItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DroppedItem.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.item_id != null && Object.hasOwnProperty.call(message, "item_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.item_id);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DroppedItem message, length delimited. Does not implicitly {@link CMsgBotWorldState.DroppedItem.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {CMsgBotWorldState.IDroppedItem} message DroppedItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DroppedItem.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DroppedItem message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.DroppedItem} DroppedItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DroppedItem.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.DroppedItem();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.item_id = reader.uint32();
                        break;
                    case 2:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DroppedItem message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.DroppedItem} DroppedItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DroppedItem.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DroppedItem message.
             * @function verify
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DroppedItem.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.item_id != null && message.hasOwnProperty("item_id"))
                    if (!$util.isInteger(message.item_id))
                        return "item_id: integer expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                return null;
            };
    
            /**
             * Creates a DroppedItem message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.DroppedItem} DroppedItem
             */
            DroppedItem.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.DroppedItem)
                    return object;
                var message = new $root.CMsgBotWorldState.DroppedItem();
                if (object.item_id != null)
                    message.item_id = object.item_id >>> 0;
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.DroppedItem.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DroppedItem message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.DroppedItem
             * @static
             * @param {CMsgBotWorldState.DroppedItem} message DroppedItem
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DroppedItem.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.item_id = 0;
                    object.location = null;
                }
                if (message.item_id != null && message.hasOwnProperty("item_id"))
                    object.item_id = message.item_id;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                return object;
            };
    
            /**
             * Converts this DroppedItem to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.DroppedItem
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DroppedItem.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DroppedItem;
        })();
    
        CMsgBotWorldState.RuneInfo = (function() {
    
            /**
             * Properties of a RuneInfo.
             * @memberof CMsgBotWorldState
             * @interface IRuneInfo
             * @property {number|null} [type] RuneInfo type
             * @property {CMsgBotWorldState.IVector|null} [location] RuneInfo location
             * @property {number|null} [status] RuneInfo status
             * @property {number|null} [time_since_seen] RuneInfo time_since_seen
             */
    
            /**
             * Constructs a new RuneInfo.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a RuneInfo.
             * @implements IRuneInfo
             * @constructor
             * @param {CMsgBotWorldState.IRuneInfo=} [properties] Properties to set
             */
            function RuneInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RuneInfo type.
             * @member {number} type
             * @memberof CMsgBotWorldState.RuneInfo
             * @instance
             */
            RuneInfo.prototype.type = 0;
    
            /**
             * RuneInfo location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.RuneInfo
             * @instance
             */
            RuneInfo.prototype.location = null;
    
            /**
             * RuneInfo status.
             * @member {number} status
             * @memberof CMsgBotWorldState.RuneInfo
             * @instance
             */
            RuneInfo.prototype.status = 0;
    
            /**
             * RuneInfo time_since_seen.
             * @member {number} time_since_seen
             * @memberof CMsgBotWorldState.RuneInfo
             * @instance
             */
            RuneInfo.prototype.time_since_seen = 0;
    
            /**
             * Creates a new RuneInfo instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {CMsgBotWorldState.IRuneInfo=} [properties] Properties to set
             * @returns {CMsgBotWorldState.RuneInfo} RuneInfo instance
             */
            RuneInfo.create = function create(properties) {
                return new RuneInfo(properties);
            };
    
            /**
             * Encodes the specified RuneInfo message. Does not implicitly {@link CMsgBotWorldState.RuneInfo.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {CMsgBotWorldState.IRuneInfo} message RuneInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RuneInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.status);
                if (message.time_since_seen != null && Object.hasOwnProperty.call(message, "time_since_seen"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.time_since_seen);
                return writer;
            };
    
            /**
             * Encodes the specified RuneInfo message, length delimited. Does not implicitly {@link CMsgBotWorldState.RuneInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {CMsgBotWorldState.IRuneInfo} message RuneInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RuneInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RuneInfo message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.RuneInfo} RuneInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RuneInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.RuneInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.status = reader.uint32();
                        break;
                    case 4:
                        message.time_since_seen = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RuneInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.RuneInfo} RuneInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RuneInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RuneInfo message.
             * @function verify
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RuneInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.status != null && message.hasOwnProperty("status"))
                    if (!$util.isInteger(message.status))
                        return "status: integer expected";
                if (message.time_since_seen != null && message.hasOwnProperty("time_since_seen"))
                    if (typeof message.time_since_seen !== "number")
                        return "time_since_seen: number expected";
                return null;
            };
    
            /**
             * Creates a RuneInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.RuneInfo} RuneInfo
             */
            RuneInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.RuneInfo)
                    return object;
                var message = new $root.CMsgBotWorldState.RuneInfo();
                if (object.type != null)
                    message.type = object.type | 0;
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.RuneInfo.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.status != null)
                    message.status = object.status >>> 0;
                if (object.time_since_seen != null)
                    message.time_since_seen = Number(object.time_since_seen);
                return message;
            };
    
            /**
             * Creates a plain object from a RuneInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.RuneInfo
             * @static
             * @param {CMsgBotWorldState.RuneInfo} message RuneInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RuneInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    object.location = null;
                    object.status = 0;
                    object.time_since_seen = 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = message.status;
                if (message.time_since_seen != null && message.hasOwnProperty("time_since_seen"))
                    object.time_since_seen = options.json && !isFinite(message.time_since_seen) ? String(message.time_since_seen) : message.time_since_seen;
                return object;
            };
    
            /**
             * Converts this RuneInfo to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.RuneInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RuneInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RuneInfo;
        })();
    
        CMsgBotWorldState.TeleportInfo = (function() {
    
            /**
             * Properties of a TeleportInfo.
             * @memberof CMsgBotWorldState
             * @interface ITeleportInfo
             * @property {number|null} [player_id] TeleportInfo player_id
             * @property {CMsgBotWorldState.IVector|null} [location] TeleportInfo location
             * @property {number|null} [time_remaining] TeleportInfo time_remaining
             */
    
            /**
             * Constructs a new TeleportInfo.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a TeleportInfo.
             * @implements ITeleportInfo
             * @constructor
             * @param {CMsgBotWorldState.ITeleportInfo=} [properties] Properties to set
             */
            function TeleportInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TeleportInfo player_id.
             * @member {number} player_id
             * @memberof CMsgBotWorldState.TeleportInfo
             * @instance
             */
            TeleportInfo.prototype.player_id = 0;
    
            /**
             * TeleportInfo location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.TeleportInfo
             * @instance
             */
            TeleportInfo.prototype.location = null;
    
            /**
             * TeleportInfo time_remaining.
             * @member {number} time_remaining
             * @memberof CMsgBotWorldState.TeleportInfo
             * @instance
             */
            TeleportInfo.prototype.time_remaining = 0;
    
            /**
             * Creates a new TeleportInfo instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {CMsgBotWorldState.ITeleportInfo=} [properties] Properties to set
             * @returns {CMsgBotWorldState.TeleportInfo} TeleportInfo instance
             */
            TeleportInfo.create = function create(properties) {
                return new TeleportInfo(properties);
            };
    
            /**
             * Encodes the specified TeleportInfo message. Does not implicitly {@link CMsgBotWorldState.TeleportInfo.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {CMsgBotWorldState.ITeleportInfo} message TeleportInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeleportInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.player_id != null && Object.hasOwnProperty.call(message, "player_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.player_id);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.time_remaining != null && Object.hasOwnProperty.call(message, "time_remaining"))
                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.time_remaining);
                return writer;
            };
    
            /**
             * Encodes the specified TeleportInfo message, length delimited. Does not implicitly {@link CMsgBotWorldState.TeleportInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {CMsgBotWorldState.ITeleportInfo} message TeleportInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeleportInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TeleportInfo message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.TeleportInfo} TeleportInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeleportInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.TeleportInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.player_id = reader.int32();
                        break;
                    case 2:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.time_remaining = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TeleportInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.TeleportInfo} TeleportInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeleportInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TeleportInfo message.
             * @function verify
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TeleportInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    if (!$util.isInteger(message.player_id))
                        return "player_id: integer expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.time_remaining != null && message.hasOwnProperty("time_remaining"))
                    if (typeof message.time_remaining !== "number")
                        return "time_remaining: number expected";
                return null;
            };
    
            /**
             * Creates a TeleportInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.TeleportInfo} TeleportInfo
             */
            TeleportInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.TeleportInfo)
                    return object;
                var message = new $root.CMsgBotWorldState.TeleportInfo();
                if (object.player_id != null)
                    message.player_id = object.player_id | 0;
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.TeleportInfo.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.time_remaining != null)
                    message.time_remaining = Number(object.time_remaining);
                return message;
            };
    
            /**
             * Creates a plain object from a TeleportInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.TeleportInfo
             * @static
             * @param {CMsgBotWorldState.TeleportInfo} message TeleportInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TeleportInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.player_id = 0;
                    object.location = null;
                    object.time_remaining = 0;
                }
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    object.player_id = message.player_id;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.time_remaining != null && message.hasOwnProperty("time_remaining"))
                    object.time_remaining = options.json && !isFinite(message.time_remaining) ? String(message.time_remaining) : message.time_remaining;
                return object;
            };
    
            /**
             * Converts this TeleportInfo to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.TeleportInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TeleportInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TeleportInfo;
        })();
    
        CMsgBotWorldState.Modifier = (function() {
    
            /**
             * Properties of a Modifier.
             * @memberof CMsgBotWorldState
             * @interface IModifier
             * @property {number|null} [handle] Modifier handle
             * @property {string|null} [name] Modifier name
             * @property {number|null} [stack_count] Modifier stack_count
             * @property {number|null} [ability_handle] Modifier ability_handle
             * @property {number|null} [ability_id] Modifier ability_id
             * @property {number|null} [remaining_duration] Modifier remaining_duration
             * @property {Array.<number>|null} [auxiliary_units_handles] Modifier auxiliary_units_handles
             */
    
            /**
             * Constructs a new Modifier.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a Modifier.
             * @implements IModifier
             * @constructor
             * @param {CMsgBotWorldState.IModifier=} [properties] Properties to set
             */
            function Modifier(properties) {
                this.auxiliary_units_handles = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Modifier handle.
             * @member {number} handle
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             */
            Modifier.prototype.handle = 0;
    
            /**
             * Modifier name.
             * @member {string} name
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             */
            Modifier.prototype.name = "";
    
            /**
             * Modifier stack_count.
             * @member {number} stack_count
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             */
            Modifier.prototype.stack_count = 0;
    
            /**
             * Modifier ability_handle.
             * @member {number} ability_handle
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             */
            Modifier.prototype.ability_handle = 0;
    
            /**
             * Modifier ability_id.
             * @member {number} ability_id
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             */
            Modifier.prototype.ability_id = 0;
    
            /**
             * Modifier remaining_duration.
             * @member {number} remaining_duration
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             */
            Modifier.prototype.remaining_duration = 0;
    
            /**
             * Modifier auxiliary_units_handles.
             * @member {Array.<number>} auxiliary_units_handles
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             */
            Modifier.prototype.auxiliary_units_handles = $util.emptyArray;
    
            /**
             * Creates a new Modifier instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {CMsgBotWorldState.IModifier=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Modifier} Modifier instance
             */
            Modifier.create = function create(properties) {
                return new Modifier(properties);
            };
    
            /**
             * Encodes the specified Modifier message. Does not implicitly {@link CMsgBotWorldState.Modifier.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {CMsgBotWorldState.IModifier} message Modifier message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Modifier.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.stack_count != null && Object.hasOwnProperty.call(message, "stack_count"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.stack_count);
                if (message.ability_handle != null && Object.hasOwnProperty.call(message, "ability_handle"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ability_handle);
                if (message.ability_id != null && Object.hasOwnProperty.call(message, "ability_id"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ability_id);
                if (message.remaining_duration != null && Object.hasOwnProperty.call(message, "remaining_duration"))
                    writer.uint32(/* id 5, wireType 5 =*/45).float(message.remaining_duration);
                if (message.auxiliary_units_handles != null && message.auxiliary_units_handles.length)
                    for (var i = 0; i < message.auxiliary_units_handles.length; ++i)
                        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.auxiliary_units_handles[i]);
                if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.handle);
                return writer;
            };
    
            /**
             * Encodes the specified Modifier message, length delimited. Does not implicitly {@link CMsgBotWorldState.Modifier.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {CMsgBotWorldState.IModifier} message Modifier message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Modifier.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Modifier message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Modifier} Modifier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Modifier.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Modifier();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 7:
                        message.handle = reader.uint32();
                        break;
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.stack_count = reader.uint32();
                        break;
                    case 3:
                        message.ability_handle = reader.uint32();
                        break;
                    case 4:
                        message.ability_id = reader.uint32();
                        break;
                    case 5:
                        message.remaining_duration = reader.float();
                        break;
                    case 6:
                        if (!(message.auxiliary_units_handles && message.auxiliary_units_handles.length))
                            message.auxiliary_units_handles = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.auxiliary_units_handles.push(reader.uint32());
                        } else
                            message.auxiliary_units_handles.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Modifier message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Modifier} Modifier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Modifier.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Modifier message.
             * @function verify
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Modifier.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.handle != null && message.hasOwnProperty("handle"))
                    if (!$util.isInteger(message.handle))
                        return "handle: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.stack_count != null && message.hasOwnProperty("stack_count"))
                    if (!$util.isInteger(message.stack_count))
                        return "stack_count: integer expected";
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    if (!$util.isInteger(message.ability_handle))
                        return "ability_handle: integer expected";
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    if (!$util.isInteger(message.ability_id))
                        return "ability_id: integer expected";
                if (message.remaining_duration != null && message.hasOwnProperty("remaining_duration"))
                    if (typeof message.remaining_duration !== "number")
                        return "remaining_duration: number expected";
                if (message.auxiliary_units_handles != null && message.hasOwnProperty("auxiliary_units_handles")) {
                    if (!Array.isArray(message.auxiliary_units_handles))
                        return "auxiliary_units_handles: array expected";
                    for (var i = 0; i < message.auxiliary_units_handles.length; ++i)
                        if (!$util.isInteger(message.auxiliary_units_handles[i]))
                            return "auxiliary_units_handles: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a Modifier message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Modifier} Modifier
             */
            Modifier.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Modifier)
                    return object;
                var message = new $root.CMsgBotWorldState.Modifier();
                if (object.handle != null)
                    message.handle = object.handle >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.stack_count != null)
                    message.stack_count = object.stack_count >>> 0;
                if (object.ability_handle != null)
                    message.ability_handle = object.ability_handle >>> 0;
                if (object.ability_id != null)
                    message.ability_id = object.ability_id >>> 0;
                if (object.remaining_duration != null)
                    message.remaining_duration = Number(object.remaining_duration);
                if (object.auxiliary_units_handles) {
                    if (!Array.isArray(object.auxiliary_units_handles))
                        throw TypeError(".CMsgBotWorldState.Modifier.auxiliary_units_handles: array expected");
                    message.auxiliary_units_handles = [];
                    for (var i = 0; i < object.auxiliary_units_handles.length; ++i)
                        message.auxiliary_units_handles[i] = object.auxiliary_units_handles[i] >>> 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a Modifier message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Modifier
             * @static
             * @param {CMsgBotWorldState.Modifier} message Modifier
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Modifier.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.auxiliary_units_handles = [];
                if (options.defaults) {
                    object.name = "";
                    object.stack_count = 0;
                    object.ability_handle = 0;
                    object.ability_id = 0;
                    object.remaining_duration = 0;
                    object.handle = 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.stack_count != null && message.hasOwnProperty("stack_count"))
                    object.stack_count = message.stack_count;
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    object.ability_handle = message.ability_handle;
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    object.ability_id = message.ability_id;
                if (message.remaining_duration != null && message.hasOwnProperty("remaining_duration"))
                    object.remaining_duration = options.json && !isFinite(message.remaining_duration) ? String(message.remaining_duration) : message.remaining_duration;
                if (message.auxiliary_units_handles && message.auxiliary_units_handles.length) {
                    object.auxiliary_units_handles = [];
                    for (var j = 0; j < message.auxiliary_units_handles.length; ++j)
                        object.auxiliary_units_handles[j] = message.auxiliary_units_handles[j];
                }
                if (message.handle != null && message.hasOwnProperty("handle"))
                    object.handle = message.handle;
                return object;
            };
    
            /**
             * Converts this Modifier to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Modifier
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Modifier.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Modifier;
        })();
    
        CMsgBotWorldState.LinearProjectile = (function() {
    
            /**
             * Properties of a LinearProjectile.
             * @memberof CMsgBotWorldState
             * @interface ILinearProjectile
             * @property {number|null} [handle] LinearProjectile handle
             * @property {number|null} [caster_handle] LinearProjectile caster_handle
             * @property {CMsgBotWorldState.UnitType|null} [caster_unit_type] LinearProjectile caster_unit_type
             * @property {number|null} [caster_player_id] LinearProjectile caster_player_id
             * @property {number|null} [ability_handle] LinearProjectile ability_handle
             * @property {number|null} [ability_id] LinearProjectile ability_id
             * @property {CMsgBotWorldState.IVector|null} [location] LinearProjectile location
             * @property {CMsgBotWorldState.IVector|null} [velocity] LinearProjectile velocity
             * @property {number|null} [radius] LinearProjectile radius
             */
    
            /**
             * Constructs a new LinearProjectile.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a LinearProjectile.
             * @implements ILinearProjectile
             * @constructor
             * @param {CMsgBotWorldState.ILinearProjectile=} [properties] Properties to set
             */
            function LinearProjectile(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LinearProjectile handle.
             * @member {number} handle
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.handle = 0;
    
            /**
             * LinearProjectile caster_handle.
             * @member {number} caster_handle
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.caster_handle = 0;
    
            /**
             * LinearProjectile caster_unit_type.
             * @member {CMsgBotWorldState.UnitType} caster_unit_type
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.caster_unit_type = 0;
    
            /**
             * LinearProjectile caster_player_id.
             * @member {number} caster_player_id
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.caster_player_id = 0;
    
            /**
             * LinearProjectile ability_handle.
             * @member {number} ability_handle
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.ability_handle = 0;
    
            /**
             * LinearProjectile ability_id.
             * @member {number} ability_id
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.ability_id = 0;
    
            /**
             * LinearProjectile location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.location = null;
    
            /**
             * LinearProjectile velocity.
             * @member {CMsgBotWorldState.IVector|null|undefined} velocity
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.velocity = null;
    
            /**
             * LinearProjectile radius.
             * @member {number} radius
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             */
            LinearProjectile.prototype.radius = 0;
    
            /**
             * Creates a new LinearProjectile instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {CMsgBotWorldState.ILinearProjectile=} [properties] Properties to set
             * @returns {CMsgBotWorldState.LinearProjectile} LinearProjectile instance
             */
            LinearProjectile.create = function create(properties) {
                return new LinearProjectile(properties);
            };
    
            /**
             * Encodes the specified LinearProjectile message. Does not implicitly {@link CMsgBotWorldState.LinearProjectile.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {CMsgBotWorldState.ILinearProjectile} message LinearProjectile message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinearProjectile.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.handle);
                if (message.caster_handle != null && Object.hasOwnProperty.call(message, "caster_handle"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.caster_handle);
                if (message.caster_player_id != null && Object.hasOwnProperty.call(message, "caster_player_id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.caster_player_id);
                if (message.ability_handle != null && Object.hasOwnProperty.call(message, "ability_handle"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ability_handle);
                if (message.ability_id != null && Object.hasOwnProperty.call(message, "ability_id"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ability_id);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.velocity != null && Object.hasOwnProperty.call(message, "velocity"))
                    $root.CMsgBotWorldState.Vector.encode(message.velocity, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.radius != null && Object.hasOwnProperty.call(message, "radius"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.radius);
                if (message.caster_unit_type != null && Object.hasOwnProperty.call(message, "caster_unit_type"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.caster_unit_type);
                return writer;
            };
    
            /**
             * Encodes the specified LinearProjectile message, length delimited. Does not implicitly {@link CMsgBotWorldState.LinearProjectile.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {CMsgBotWorldState.ILinearProjectile} message LinearProjectile message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinearProjectile.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LinearProjectile message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.LinearProjectile} LinearProjectile
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinearProjectile.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.LinearProjectile();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.handle = reader.uint32();
                        break;
                    case 2:
                        message.caster_handle = reader.uint32();
                        break;
                    case 9:
                        message.caster_unit_type = reader.int32();
                        break;
                    case 3:
                        message.caster_player_id = reader.int32();
                        break;
                    case 4:
                        message.ability_handle = reader.uint32();
                        break;
                    case 5:
                        message.ability_id = reader.uint32();
                        break;
                    case 6:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.velocity = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.radius = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LinearProjectile message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.LinearProjectile} LinearProjectile
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinearProjectile.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LinearProjectile message.
             * @function verify
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LinearProjectile.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.handle != null && message.hasOwnProperty("handle"))
                    if (!$util.isInteger(message.handle))
                        return "handle: integer expected";
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    if (!$util.isInteger(message.caster_handle))
                        return "caster_handle: integer expected";
                if (message.caster_unit_type != null && message.hasOwnProperty("caster_unit_type"))
                    switch (message.caster_unit_type) {
                    default:
                        return "caster_unit_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                        break;
                    }
                if (message.caster_player_id != null && message.hasOwnProperty("caster_player_id"))
                    if (!$util.isInteger(message.caster_player_id))
                        return "caster_player_id: integer expected";
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    if (!$util.isInteger(message.ability_handle))
                        return "ability_handle: integer expected";
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    if (!$util.isInteger(message.ability_id))
                        return "ability_id: integer expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.velocity != null && message.hasOwnProperty("velocity")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.velocity);
                    if (error)
                        return "velocity." + error;
                }
                if (message.radius != null && message.hasOwnProperty("radius"))
                    if (!$util.isInteger(message.radius))
                        return "radius: integer expected";
                return null;
            };
    
            /**
             * Creates a LinearProjectile message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.LinearProjectile} LinearProjectile
             */
            LinearProjectile.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.LinearProjectile)
                    return object;
                var message = new $root.CMsgBotWorldState.LinearProjectile();
                if (object.handle != null)
                    message.handle = object.handle >>> 0;
                if (object.caster_handle != null)
                    message.caster_handle = object.caster_handle >>> 0;
                switch (object.caster_unit_type) {
                case "INVALID":
                case 0:
                    message.caster_unit_type = 0;
                    break;
                case "HERO":
                case 1:
                    message.caster_unit_type = 1;
                    break;
                case "CREEP_HERO":
                case 2:
                    message.caster_unit_type = 2;
                    break;
                case "LANE_CREEP":
                case 3:
                    message.caster_unit_type = 3;
                    break;
                case "JUNGLE_CREEP":
                case 4:
                    message.caster_unit_type = 4;
                    break;
                case "ROSHAN":
                case 5:
                    message.caster_unit_type = 5;
                    break;
                case "TOWER":
                case 6:
                    message.caster_unit_type = 6;
                    break;
                case "BARRACKS":
                case 7:
                    message.caster_unit_type = 7;
                    break;
                case "SHRINE":
                case 8:
                    message.caster_unit_type = 8;
                    break;
                case "FORT":
                case 9:
                    message.caster_unit_type = 9;
                    break;
                case "BUILDING":
                case 10:
                    message.caster_unit_type = 10;
                    break;
                case "COURIER":
                case 11:
                    message.caster_unit_type = 11;
                    break;
                case "WARD":
                case 12:
                    message.caster_unit_type = 12;
                    break;
                }
                if (object.caster_player_id != null)
                    message.caster_player_id = object.caster_player_id | 0;
                if (object.ability_handle != null)
                    message.ability_handle = object.ability_handle >>> 0;
                if (object.ability_id != null)
                    message.ability_id = object.ability_id >>> 0;
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.LinearProjectile.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.velocity != null) {
                    if (typeof object.velocity !== "object")
                        throw TypeError(".CMsgBotWorldState.LinearProjectile.velocity: object expected");
                    message.velocity = $root.CMsgBotWorldState.Vector.fromObject(object.velocity);
                }
                if (object.radius != null)
                    message.radius = object.radius >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LinearProjectile message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.LinearProjectile
             * @static
             * @param {CMsgBotWorldState.LinearProjectile} message LinearProjectile
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LinearProjectile.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.handle = 0;
                    object.caster_handle = 0;
                    object.caster_player_id = 0;
                    object.ability_handle = 0;
                    object.ability_id = 0;
                    object.location = null;
                    object.velocity = null;
                    object.radius = 0;
                    object.caster_unit_type = options.enums === String ? "INVALID" : 0;
                }
                if (message.handle != null && message.hasOwnProperty("handle"))
                    object.handle = message.handle;
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    object.caster_handle = message.caster_handle;
                if (message.caster_player_id != null && message.hasOwnProperty("caster_player_id"))
                    object.caster_player_id = message.caster_player_id;
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    object.ability_handle = message.ability_handle;
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    object.ability_id = message.ability_id;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.velocity != null && message.hasOwnProperty("velocity"))
                    object.velocity = $root.CMsgBotWorldState.Vector.toObject(message.velocity, options);
                if (message.radius != null && message.hasOwnProperty("radius"))
                    object.radius = message.radius;
                if (message.caster_unit_type != null && message.hasOwnProperty("caster_unit_type"))
                    object.caster_unit_type = options.enums === String ? $root.CMsgBotWorldState.UnitType[message.caster_unit_type] : message.caster_unit_type;
                return object;
            };
    
            /**
             * Converts this LinearProjectile to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.LinearProjectile
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LinearProjectile.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LinearProjectile;
        })();
    
        CMsgBotWorldState.TrackingProjectile = (function() {
    
            /**
             * Properties of a TrackingProjectile.
             * @memberof CMsgBotWorldState
             * @interface ITrackingProjectile
             * @property {number|null} [handle] TrackingProjectile handle
             * @property {number|null} [caster_handle] TrackingProjectile caster_handle
             * @property {CMsgBotWorldState.UnitType|null} [caster_unit_type] TrackingProjectile caster_unit_type
             * @property {number|null} [caster_player_id] TrackingProjectile caster_player_id
             * @property {number|null} [ability_handle] TrackingProjectile ability_handle
             * @property {number|null} [ability_id] TrackingProjectile ability_id
             * @property {CMsgBotWorldState.IVector|null} [location] TrackingProjectile location
             * @property {number|null} [velocity] TrackingProjectile velocity
             * @property {boolean|null} [is_dodgeable] TrackingProjectile is_dodgeable
             * @property {boolean|null} [is_attack] TrackingProjectile is_attack
             */
    
            /**
             * Constructs a new TrackingProjectile.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a TrackingProjectile.
             * @implements ITrackingProjectile
             * @constructor
             * @param {CMsgBotWorldState.ITrackingProjectile=} [properties] Properties to set
             */
            function TrackingProjectile(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TrackingProjectile handle.
             * @member {number} handle
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.handle = 0;
    
            /**
             * TrackingProjectile caster_handle.
             * @member {number} caster_handle
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.caster_handle = 0;
    
            /**
             * TrackingProjectile caster_unit_type.
             * @member {CMsgBotWorldState.UnitType} caster_unit_type
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.caster_unit_type = 0;
    
            /**
             * TrackingProjectile caster_player_id.
             * @member {number} caster_player_id
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.caster_player_id = 0;
    
            /**
             * TrackingProjectile ability_handle.
             * @member {number} ability_handle
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.ability_handle = 0;
    
            /**
             * TrackingProjectile ability_id.
             * @member {number} ability_id
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.ability_id = 0;
    
            /**
             * TrackingProjectile location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.location = null;
    
            /**
             * TrackingProjectile velocity.
             * @member {number} velocity
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.velocity = 0;
    
            /**
             * TrackingProjectile is_dodgeable.
             * @member {boolean} is_dodgeable
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.is_dodgeable = false;
    
            /**
             * TrackingProjectile is_attack.
             * @member {boolean} is_attack
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             */
            TrackingProjectile.prototype.is_attack = false;
    
            /**
             * Creates a new TrackingProjectile instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {CMsgBotWorldState.ITrackingProjectile=} [properties] Properties to set
             * @returns {CMsgBotWorldState.TrackingProjectile} TrackingProjectile instance
             */
            TrackingProjectile.create = function create(properties) {
                return new TrackingProjectile(properties);
            };
    
            /**
             * Encodes the specified TrackingProjectile message. Does not implicitly {@link CMsgBotWorldState.TrackingProjectile.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {CMsgBotWorldState.ITrackingProjectile} message TrackingProjectile message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TrackingProjectile.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.caster_handle != null && Object.hasOwnProperty.call(message, "caster_handle"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.caster_handle);
                if (message.caster_player_id != null && Object.hasOwnProperty.call(message, "caster_player_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.caster_player_id);
                if (message.ability_handle != null && Object.hasOwnProperty.call(message, "ability_handle"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ability_handle);
                if (message.ability_id != null && Object.hasOwnProperty.call(message, "ability_id"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ability_id);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.velocity != null && Object.hasOwnProperty.call(message, "velocity"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.velocity);
                if (message.is_dodgeable != null && Object.hasOwnProperty.call(message, "is_dodgeable"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.is_dodgeable);
                if (message.is_attack != null && Object.hasOwnProperty.call(message, "is_attack"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.is_attack);
                if (message.caster_unit_type != null && Object.hasOwnProperty.call(message, "caster_unit_type"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.caster_unit_type);
                if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.handle);
                return writer;
            };
    
            /**
             * Encodes the specified TrackingProjectile message, length delimited. Does not implicitly {@link CMsgBotWorldState.TrackingProjectile.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {CMsgBotWorldState.ITrackingProjectile} message TrackingProjectile message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TrackingProjectile.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TrackingProjectile message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.TrackingProjectile} TrackingProjectile
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TrackingProjectile.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.TrackingProjectile();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 10:
                        message.handle = reader.uint32();
                        break;
                    case 1:
                        message.caster_handle = reader.uint32();
                        break;
                    case 9:
                        message.caster_unit_type = reader.int32();
                        break;
                    case 2:
                        message.caster_player_id = reader.int32();
                        break;
                    case 3:
                        message.ability_handle = reader.uint32();
                        break;
                    case 4:
                        message.ability_id = reader.uint32();
                        break;
                    case 5:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.velocity = reader.uint32();
                        break;
                    case 7:
                        message.is_dodgeable = reader.bool();
                        break;
                    case 8:
                        message.is_attack = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TrackingProjectile message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.TrackingProjectile} TrackingProjectile
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TrackingProjectile.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TrackingProjectile message.
             * @function verify
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TrackingProjectile.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.handle != null && message.hasOwnProperty("handle"))
                    if (!$util.isInteger(message.handle))
                        return "handle: integer expected";
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    if (!$util.isInteger(message.caster_handle))
                        return "caster_handle: integer expected";
                if (message.caster_unit_type != null && message.hasOwnProperty("caster_unit_type"))
                    switch (message.caster_unit_type) {
                    default:
                        return "caster_unit_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                        break;
                    }
                if (message.caster_player_id != null && message.hasOwnProperty("caster_player_id"))
                    if (!$util.isInteger(message.caster_player_id))
                        return "caster_player_id: integer expected";
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    if (!$util.isInteger(message.ability_handle))
                        return "ability_handle: integer expected";
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    if (!$util.isInteger(message.ability_id))
                        return "ability_id: integer expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.velocity != null && message.hasOwnProperty("velocity"))
                    if (!$util.isInteger(message.velocity))
                        return "velocity: integer expected";
                if (message.is_dodgeable != null && message.hasOwnProperty("is_dodgeable"))
                    if (typeof message.is_dodgeable !== "boolean")
                        return "is_dodgeable: boolean expected";
                if (message.is_attack != null && message.hasOwnProperty("is_attack"))
                    if (typeof message.is_attack !== "boolean")
                        return "is_attack: boolean expected";
                return null;
            };
    
            /**
             * Creates a TrackingProjectile message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.TrackingProjectile} TrackingProjectile
             */
            TrackingProjectile.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.TrackingProjectile)
                    return object;
                var message = new $root.CMsgBotWorldState.TrackingProjectile();
                if (object.handle != null)
                    message.handle = object.handle >>> 0;
                if (object.caster_handle != null)
                    message.caster_handle = object.caster_handle >>> 0;
                switch (object.caster_unit_type) {
                case "INVALID":
                case 0:
                    message.caster_unit_type = 0;
                    break;
                case "HERO":
                case 1:
                    message.caster_unit_type = 1;
                    break;
                case "CREEP_HERO":
                case 2:
                    message.caster_unit_type = 2;
                    break;
                case "LANE_CREEP":
                case 3:
                    message.caster_unit_type = 3;
                    break;
                case "JUNGLE_CREEP":
                case 4:
                    message.caster_unit_type = 4;
                    break;
                case "ROSHAN":
                case 5:
                    message.caster_unit_type = 5;
                    break;
                case "TOWER":
                case 6:
                    message.caster_unit_type = 6;
                    break;
                case "BARRACKS":
                case 7:
                    message.caster_unit_type = 7;
                    break;
                case "SHRINE":
                case 8:
                    message.caster_unit_type = 8;
                    break;
                case "FORT":
                case 9:
                    message.caster_unit_type = 9;
                    break;
                case "BUILDING":
                case 10:
                    message.caster_unit_type = 10;
                    break;
                case "COURIER":
                case 11:
                    message.caster_unit_type = 11;
                    break;
                case "WARD":
                case 12:
                    message.caster_unit_type = 12;
                    break;
                }
                if (object.caster_player_id != null)
                    message.caster_player_id = object.caster_player_id | 0;
                if (object.ability_handle != null)
                    message.ability_handle = object.ability_handle >>> 0;
                if (object.ability_id != null)
                    message.ability_id = object.ability_id >>> 0;
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.TrackingProjectile.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.velocity != null)
                    message.velocity = object.velocity >>> 0;
                if (object.is_dodgeable != null)
                    message.is_dodgeable = Boolean(object.is_dodgeable);
                if (object.is_attack != null)
                    message.is_attack = Boolean(object.is_attack);
                return message;
            };
    
            /**
             * Creates a plain object from a TrackingProjectile message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @static
             * @param {CMsgBotWorldState.TrackingProjectile} message TrackingProjectile
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TrackingProjectile.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.caster_handle = 0;
                    object.caster_player_id = 0;
                    object.ability_handle = 0;
                    object.ability_id = 0;
                    object.location = null;
                    object.velocity = 0;
                    object.is_dodgeable = false;
                    object.is_attack = false;
                    object.caster_unit_type = options.enums === String ? "INVALID" : 0;
                    object.handle = 0;
                }
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    object.caster_handle = message.caster_handle;
                if (message.caster_player_id != null && message.hasOwnProperty("caster_player_id"))
                    object.caster_player_id = message.caster_player_id;
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    object.ability_handle = message.ability_handle;
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    object.ability_id = message.ability_id;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.velocity != null && message.hasOwnProperty("velocity"))
                    object.velocity = message.velocity;
                if (message.is_dodgeable != null && message.hasOwnProperty("is_dodgeable"))
                    object.is_dodgeable = message.is_dodgeable;
                if (message.is_attack != null && message.hasOwnProperty("is_attack"))
                    object.is_attack = message.is_attack;
                if (message.caster_unit_type != null && message.hasOwnProperty("caster_unit_type"))
                    object.caster_unit_type = options.enums === String ? $root.CMsgBotWorldState.UnitType[message.caster_unit_type] : message.caster_unit_type;
                if (message.handle != null && message.hasOwnProperty("handle"))
                    object.handle = message.handle;
                return object;
            };
    
            /**
             * Converts this TrackingProjectile to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.TrackingProjectile
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TrackingProjectile.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TrackingProjectile;
        })();
    
        CMsgBotWorldState.AvoidanceZone = (function() {
    
            /**
             * Properties of an AvoidanceZone.
             * @memberof CMsgBotWorldState
             * @interface IAvoidanceZone
             * @property {CMsgBotWorldState.IVector|null} [location] AvoidanceZone location
             * @property {number|null} [caster_handle] AvoidanceZone caster_handle
             * @property {CMsgBotWorldState.UnitType|null} [caster_unit_type] AvoidanceZone caster_unit_type
             * @property {number|null} [caster_player_id] AvoidanceZone caster_player_id
             * @property {number|null} [ability_handle] AvoidanceZone ability_handle
             * @property {number|null} [ability_id] AvoidanceZone ability_id
             * @property {number|null} [radius] AvoidanceZone radius
             */
    
            /**
             * Constructs a new AvoidanceZone.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an AvoidanceZone.
             * @implements IAvoidanceZone
             * @constructor
             * @param {CMsgBotWorldState.IAvoidanceZone=} [properties] Properties to set
             */
            function AvoidanceZone(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AvoidanceZone location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             */
            AvoidanceZone.prototype.location = null;
    
            /**
             * AvoidanceZone caster_handle.
             * @member {number} caster_handle
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             */
            AvoidanceZone.prototype.caster_handle = 0;
    
            /**
             * AvoidanceZone caster_unit_type.
             * @member {CMsgBotWorldState.UnitType} caster_unit_type
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             */
            AvoidanceZone.prototype.caster_unit_type = 0;
    
            /**
             * AvoidanceZone caster_player_id.
             * @member {number} caster_player_id
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             */
            AvoidanceZone.prototype.caster_player_id = 0;
    
            /**
             * AvoidanceZone ability_handle.
             * @member {number} ability_handle
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             */
            AvoidanceZone.prototype.ability_handle = 0;
    
            /**
             * AvoidanceZone ability_id.
             * @member {number} ability_id
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             */
            AvoidanceZone.prototype.ability_id = 0;
    
            /**
             * AvoidanceZone radius.
             * @member {number} radius
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             */
            AvoidanceZone.prototype.radius = 0;
    
            /**
             * Creates a new AvoidanceZone instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {CMsgBotWorldState.IAvoidanceZone=} [properties] Properties to set
             * @returns {CMsgBotWorldState.AvoidanceZone} AvoidanceZone instance
             */
            AvoidanceZone.create = function create(properties) {
                return new AvoidanceZone(properties);
            };
    
            /**
             * Encodes the specified AvoidanceZone message. Does not implicitly {@link CMsgBotWorldState.AvoidanceZone.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {CMsgBotWorldState.IAvoidanceZone} message AvoidanceZone message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AvoidanceZone.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.caster_handle != null && Object.hasOwnProperty.call(message, "caster_handle"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.caster_handle);
                if (message.caster_player_id != null && Object.hasOwnProperty.call(message, "caster_player_id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.caster_player_id);
                if (message.ability_handle != null && Object.hasOwnProperty.call(message, "ability_handle"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ability_handle);
                if (message.ability_id != null && Object.hasOwnProperty.call(message, "ability_id"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ability_id);
                if (message.radius != null && Object.hasOwnProperty.call(message, "radius"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.radius);
                if (message.caster_unit_type != null && Object.hasOwnProperty.call(message, "caster_unit_type"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.caster_unit_type);
                return writer;
            };
    
            /**
             * Encodes the specified AvoidanceZone message, length delimited. Does not implicitly {@link CMsgBotWorldState.AvoidanceZone.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {CMsgBotWorldState.IAvoidanceZone} message AvoidanceZone message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AvoidanceZone.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AvoidanceZone message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.AvoidanceZone} AvoidanceZone
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AvoidanceZone.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.AvoidanceZone();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.caster_handle = reader.uint32();
                        break;
                    case 7:
                        message.caster_unit_type = reader.int32();
                        break;
                    case 3:
                        message.caster_player_id = reader.int32();
                        break;
                    case 4:
                        message.ability_handle = reader.uint32();
                        break;
                    case 5:
                        message.ability_id = reader.uint32();
                        break;
                    case 6:
                        message.radius = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AvoidanceZone message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.AvoidanceZone} AvoidanceZone
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AvoidanceZone.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AvoidanceZone message.
             * @function verify
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AvoidanceZone.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    if (!$util.isInteger(message.caster_handle))
                        return "caster_handle: integer expected";
                if (message.caster_unit_type != null && message.hasOwnProperty("caster_unit_type"))
                    switch (message.caster_unit_type) {
                    default:
                        return "caster_unit_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                        break;
                    }
                if (message.caster_player_id != null && message.hasOwnProperty("caster_player_id"))
                    if (!$util.isInteger(message.caster_player_id))
                        return "caster_player_id: integer expected";
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    if (!$util.isInteger(message.ability_handle))
                        return "ability_handle: integer expected";
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    if (!$util.isInteger(message.ability_id))
                        return "ability_id: integer expected";
                if (message.radius != null && message.hasOwnProperty("radius"))
                    if (!$util.isInteger(message.radius))
                        return "radius: integer expected";
                return null;
            };
    
            /**
             * Creates an AvoidanceZone message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.AvoidanceZone} AvoidanceZone
             */
            AvoidanceZone.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.AvoidanceZone)
                    return object;
                var message = new $root.CMsgBotWorldState.AvoidanceZone();
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.AvoidanceZone.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.caster_handle != null)
                    message.caster_handle = object.caster_handle >>> 0;
                switch (object.caster_unit_type) {
                case "INVALID":
                case 0:
                    message.caster_unit_type = 0;
                    break;
                case "HERO":
                case 1:
                    message.caster_unit_type = 1;
                    break;
                case "CREEP_HERO":
                case 2:
                    message.caster_unit_type = 2;
                    break;
                case "LANE_CREEP":
                case 3:
                    message.caster_unit_type = 3;
                    break;
                case "JUNGLE_CREEP":
                case 4:
                    message.caster_unit_type = 4;
                    break;
                case "ROSHAN":
                case 5:
                    message.caster_unit_type = 5;
                    break;
                case "TOWER":
                case 6:
                    message.caster_unit_type = 6;
                    break;
                case "BARRACKS":
                case 7:
                    message.caster_unit_type = 7;
                    break;
                case "SHRINE":
                case 8:
                    message.caster_unit_type = 8;
                    break;
                case "FORT":
                case 9:
                    message.caster_unit_type = 9;
                    break;
                case "BUILDING":
                case 10:
                    message.caster_unit_type = 10;
                    break;
                case "COURIER":
                case 11:
                    message.caster_unit_type = 11;
                    break;
                case "WARD":
                case 12:
                    message.caster_unit_type = 12;
                    break;
                }
                if (object.caster_player_id != null)
                    message.caster_player_id = object.caster_player_id | 0;
                if (object.ability_handle != null)
                    message.ability_handle = object.ability_handle >>> 0;
                if (object.ability_id != null)
                    message.ability_id = object.ability_id >>> 0;
                if (object.radius != null)
                    message.radius = object.radius >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an AvoidanceZone message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @static
             * @param {CMsgBotWorldState.AvoidanceZone} message AvoidanceZone
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AvoidanceZone.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.location = null;
                    object.caster_handle = 0;
                    object.caster_player_id = 0;
                    object.ability_handle = 0;
                    object.ability_id = 0;
                    object.radius = 0;
                    object.caster_unit_type = options.enums === String ? "INVALID" : 0;
                }
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.caster_handle != null && message.hasOwnProperty("caster_handle"))
                    object.caster_handle = message.caster_handle;
                if (message.caster_player_id != null && message.hasOwnProperty("caster_player_id"))
                    object.caster_player_id = message.caster_player_id;
                if (message.ability_handle != null && message.hasOwnProperty("ability_handle"))
                    object.ability_handle = message.ability_handle;
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    object.ability_id = message.ability_id;
                if (message.radius != null && message.hasOwnProperty("radius"))
                    object.radius = message.radius;
                if (message.caster_unit_type != null && message.hasOwnProperty("caster_unit_type"))
                    object.caster_unit_type = options.enums === String ? $root.CMsgBotWorldState.UnitType[message.caster_unit_type] : message.caster_unit_type;
                return object;
            };
    
            /**
             * Converts this AvoidanceZone to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.AvoidanceZone
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AvoidanceZone.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AvoidanceZone;
        })();
    
        CMsgBotWorldState.Courier = (function() {
    
            /**
             * Properties of a Courier.
             * @memberof CMsgBotWorldState
             * @interface ICourier
             * @property {number|null} [handle] Courier handle
             * @property {CMsgBotWorldState.CourierState|null} [state] Courier state
             * @property {number|null} [player_id] Courier player_id
             */
    
            /**
             * Constructs a new Courier.
             * @memberof CMsgBotWorldState
             * @classdesc Represents a Courier.
             * @implements ICourier
             * @constructor
             * @param {CMsgBotWorldState.ICourier=} [properties] Properties to set
             */
            function Courier(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Courier handle.
             * @member {number} handle
             * @memberof CMsgBotWorldState.Courier
             * @instance
             */
            Courier.prototype.handle = 0;
    
            /**
             * Courier state.
             * @member {CMsgBotWorldState.CourierState} state
             * @memberof CMsgBotWorldState.Courier
             * @instance
             */
            Courier.prototype.state = -1;
    
            /**
             * Courier player_id.
             * @member {number} player_id
             * @memberof CMsgBotWorldState.Courier
             * @instance
             */
            Courier.prototype.player_id = 0;
    
            /**
             * Creates a new Courier instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {CMsgBotWorldState.ICourier=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Courier} Courier instance
             */
            Courier.create = function create(properties) {
                return new Courier(properties);
            };
    
            /**
             * Encodes the specified Courier message. Does not implicitly {@link CMsgBotWorldState.Courier.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {CMsgBotWorldState.ICourier} message Courier message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Courier.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.handle);
                if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                if (message.player_id != null && Object.hasOwnProperty.call(message, "player_id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.player_id);
                return writer;
            };
    
            /**
             * Encodes the specified Courier message, length delimited. Does not implicitly {@link CMsgBotWorldState.Courier.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {CMsgBotWorldState.ICourier} message Courier message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Courier.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Courier message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Courier} Courier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Courier.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Courier();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.handle = reader.uint32();
                        break;
                    case 2:
                        message.state = reader.int32();
                        break;
                    case 3:
                        message.player_id = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Courier message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Courier} Courier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Courier.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Courier message.
             * @function verify
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Courier.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.handle != null && message.hasOwnProperty("handle"))
                    if (!$util.isInteger(message.handle))
                        return "handle: integer expected";
                if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                    default:
                        return "state: enum value expected";
                    case -1:
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    if (!$util.isInteger(message.player_id))
                        return "player_id: integer expected";
                return null;
            };
    
            /**
             * Creates a Courier message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Courier} Courier
             */
            Courier.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Courier)
                    return object;
                var message = new $root.CMsgBotWorldState.Courier();
                if (object.handle != null)
                    message.handle = object.handle >>> 0;
                switch (object.state) {
                case "COURIER_STATE_INIT":
                case -1:
                    message.state = -1;
                    break;
                case "COURIER_STATE_IDLE":
                case 0:
                    message.state = 0;
                    break;
                case "COURIER_STATE_AT_BASE":
                case 1:
                    message.state = 1;
                    break;
                case "COURIER_STATE_MOVING":
                case 2:
                    message.state = 2;
                    break;
                case "COURIER_STATE_DELIVERING_ITEMS":
                case 3:
                    message.state = 3;
                    break;
                case "COURIER_STATE_RETURNING_TO_BASE":
                case 4:
                    message.state = 4;
                    break;
                case "COURIER_STATE_DEAD":
                case 5:
                    message.state = 5;
                    break;
                }
                if (object.player_id != null)
                    message.player_id = object.player_id | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Courier message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Courier
             * @static
             * @param {CMsgBotWorldState.Courier} message Courier
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Courier.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.handle = 0;
                    object.state = options.enums === String ? "COURIER_STATE_INIT" : -1;
                    object.player_id = 0;
                }
                if (message.handle != null && message.hasOwnProperty("handle"))
                    object.handle = message.handle;
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.CMsgBotWorldState.CourierState[message.state] : message.state;
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    object.player_id = message.player_id;
                return object;
            };
    
            /**
             * Converts this Courier to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Courier
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Courier.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Courier;
        })();
    
        CMsgBotWorldState.EventAbility = (function() {
    
            /**
             * Properties of an EventAbility.
             * @memberof CMsgBotWorldState
             * @interface IEventAbility
             * @property {number|null} [ability_id] EventAbility ability_id
             * @property {number|null} [player_id] EventAbility player_id
             * @property {number|null} [unit_handle] EventAbility unit_handle
             * @property {CMsgBotWorldState.IVector|null} [location] EventAbility location
             * @property {boolean|null} [is_channel_start] EventAbility is_channel_start
             */
    
            /**
             * Constructs a new EventAbility.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an EventAbility.
             * @implements IEventAbility
             * @constructor
             * @param {CMsgBotWorldState.IEventAbility=} [properties] Properties to set
             */
            function EventAbility(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EventAbility ability_id.
             * @member {number} ability_id
             * @memberof CMsgBotWorldState.EventAbility
             * @instance
             */
            EventAbility.prototype.ability_id = 0;
    
            /**
             * EventAbility player_id.
             * @member {number} player_id
             * @memberof CMsgBotWorldState.EventAbility
             * @instance
             */
            EventAbility.prototype.player_id = 0;
    
            /**
             * EventAbility unit_handle.
             * @member {number} unit_handle
             * @memberof CMsgBotWorldState.EventAbility
             * @instance
             */
            EventAbility.prototype.unit_handle = 0;
    
            /**
             * EventAbility location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.EventAbility
             * @instance
             */
            EventAbility.prototype.location = null;
    
            /**
             * EventAbility is_channel_start.
             * @member {boolean} is_channel_start
             * @memberof CMsgBotWorldState.EventAbility
             * @instance
             */
            EventAbility.prototype.is_channel_start = false;
    
            /**
             * Creates a new EventAbility instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {CMsgBotWorldState.IEventAbility=} [properties] Properties to set
             * @returns {CMsgBotWorldState.EventAbility} EventAbility instance
             */
            EventAbility.create = function create(properties) {
                return new EventAbility(properties);
            };
    
            /**
             * Encodes the specified EventAbility message. Does not implicitly {@link CMsgBotWorldState.EventAbility.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {CMsgBotWorldState.IEventAbility} message EventAbility message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAbility.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ability_id != null && Object.hasOwnProperty.call(message, "ability_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ability_id);
                if (message.player_id != null && Object.hasOwnProperty.call(message, "player_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.player_id);
                if (message.unit_handle != null && Object.hasOwnProperty.call(message, "unit_handle"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.unit_handle);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.is_channel_start != null && Object.hasOwnProperty.call(message, "is_channel_start"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_channel_start);
                return writer;
            };
    
            /**
             * Encodes the specified EventAbility message, length delimited. Does not implicitly {@link CMsgBotWorldState.EventAbility.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {CMsgBotWorldState.IEventAbility} message EventAbility message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAbility.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EventAbility message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.EventAbility} EventAbility
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAbility.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.EventAbility();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ability_id = reader.uint32();
                        break;
                    case 2:
                        message.player_id = reader.int32();
                        break;
                    case 3:
                        message.unit_handle = reader.uint32();
                        break;
                    case 4:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.is_channel_start = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EventAbility message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.EventAbility} EventAbility
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAbility.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EventAbility message.
             * @function verify
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventAbility.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    if (!$util.isInteger(message.ability_id))
                        return "ability_id: integer expected";
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    if (!$util.isInteger(message.player_id))
                        return "player_id: integer expected";
                if (message.unit_handle != null && message.hasOwnProperty("unit_handle"))
                    if (!$util.isInteger(message.unit_handle))
                        return "unit_handle: integer expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.is_channel_start != null && message.hasOwnProperty("is_channel_start"))
                    if (typeof message.is_channel_start !== "boolean")
                        return "is_channel_start: boolean expected";
                return null;
            };
    
            /**
             * Creates an EventAbility message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.EventAbility} EventAbility
             */
            EventAbility.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.EventAbility)
                    return object;
                var message = new $root.CMsgBotWorldState.EventAbility();
                if (object.ability_id != null)
                    message.ability_id = object.ability_id >>> 0;
                if (object.player_id != null)
                    message.player_id = object.player_id | 0;
                if (object.unit_handle != null)
                    message.unit_handle = object.unit_handle >>> 0;
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.EventAbility.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.is_channel_start != null)
                    message.is_channel_start = Boolean(object.is_channel_start);
                return message;
            };
    
            /**
             * Creates a plain object from an EventAbility message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.EventAbility
             * @static
             * @param {CMsgBotWorldState.EventAbility} message EventAbility
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventAbility.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ability_id = 0;
                    object.player_id = 0;
                    object.unit_handle = 0;
                    object.location = null;
                    object.is_channel_start = false;
                }
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    object.ability_id = message.ability_id;
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    object.player_id = message.player_id;
                if (message.unit_handle != null && message.hasOwnProperty("unit_handle"))
                    object.unit_handle = message.unit_handle;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.is_channel_start != null && message.hasOwnProperty("is_channel_start"))
                    object.is_channel_start = message.is_channel_start;
                return object;
            };
    
            /**
             * Converts this EventAbility to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.EventAbility
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventAbility.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EventAbility;
        })();
    
        CMsgBotWorldState.EventDamage = (function() {
    
            /**
             * Properties of an EventDamage.
             * @memberof CMsgBotWorldState
             * @interface IEventDamage
             * @property {number|null} [damage] EventDamage damage
             * @property {number|null} [victim_player_id] EventDamage victim_player_id
             * @property {number|null} [victim_unit_handle] EventDamage victim_unit_handle
             * @property {number|null} [attacker_player_id] EventDamage attacker_player_id
             * @property {number|null} [attacker_unit_handle] EventDamage attacker_unit_handle
             * @property {number|null} [ability_id] EventDamage ability_id
             */
    
            /**
             * Constructs a new EventDamage.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an EventDamage.
             * @implements IEventDamage
             * @constructor
             * @param {CMsgBotWorldState.IEventDamage=} [properties] Properties to set
             */
            function EventDamage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EventDamage damage.
             * @member {number} damage
             * @memberof CMsgBotWorldState.EventDamage
             * @instance
             */
            EventDamage.prototype.damage = 0;
    
            /**
             * EventDamage victim_player_id.
             * @member {number} victim_player_id
             * @memberof CMsgBotWorldState.EventDamage
             * @instance
             */
            EventDamage.prototype.victim_player_id = 0;
    
            /**
             * EventDamage victim_unit_handle.
             * @member {number} victim_unit_handle
             * @memberof CMsgBotWorldState.EventDamage
             * @instance
             */
            EventDamage.prototype.victim_unit_handle = 0;
    
            /**
             * EventDamage attacker_player_id.
             * @member {number} attacker_player_id
             * @memberof CMsgBotWorldState.EventDamage
             * @instance
             */
            EventDamage.prototype.attacker_player_id = 0;
    
            /**
             * EventDamage attacker_unit_handle.
             * @member {number} attacker_unit_handle
             * @memberof CMsgBotWorldState.EventDamage
             * @instance
             */
            EventDamage.prototype.attacker_unit_handle = 0;
    
            /**
             * EventDamage ability_id.
             * @member {number} ability_id
             * @memberof CMsgBotWorldState.EventDamage
             * @instance
             */
            EventDamage.prototype.ability_id = 0;
    
            /**
             * Creates a new EventDamage instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {CMsgBotWorldState.IEventDamage=} [properties] Properties to set
             * @returns {CMsgBotWorldState.EventDamage} EventDamage instance
             */
            EventDamage.create = function create(properties) {
                return new EventDamage(properties);
            };
    
            /**
             * Encodes the specified EventDamage message. Does not implicitly {@link CMsgBotWorldState.EventDamage.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {CMsgBotWorldState.IEventDamage} message EventDamage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventDamage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.damage != null && Object.hasOwnProperty.call(message, "damage"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.damage);
                if (message.victim_player_id != null && Object.hasOwnProperty.call(message, "victim_player_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.victim_player_id);
                if (message.victim_unit_handle != null && Object.hasOwnProperty.call(message, "victim_unit_handle"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.victim_unit_handle);
                if (message.attacker_player_id != null && Object.hasOwnProperty.call(message, "attacker_player_id"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.attacker_player_id);
                if (message.attacker_unit_handle != null && Object.hasOwnProperty.call(message, "attacker_unit_handle"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.attacker_unit_handle);
                if (message.ability_id != null && Object.hasOwnProperty.call(message, "ability_id"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ability_id);
                return writer;
            };
    
            /**
             * Encodes the specified EventDamage message, length delimited. Does not implicitly {@link CMsgBotWorldState.EventDamage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {CMsgBotWorldState.IEventDamage} message EventDamage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventDamage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EventDamage message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.EventDamage} EventDamage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventDamage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.EventDamage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.damage = reader.uint32();
                        break;
                    case 2:
                        message.victim_player_id = reader.int32();
                        break;
                    case 3:
                        message.victim_unit_handle = reader.uint32();
                        break;
                    case 4:
                        message.attacker_player_id = reader.int32();
                        break;
                    case 5:
                        message.attacker_unit_handle = reader.uint32();
                        break;
                    case 6:
                        message.ability_id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EventDamage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.EventDamage} EventDamage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventDamage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EventDamage message.
             * @function verify
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventDamage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.damage != null && message.hasOwnProperty("damage"))
                    if (!$util.isInteger(message.damage))
                        return "damage: integer expected";
                if (message.victim_player_id != null && message.hasOwnProperty("victim_player_id"))
                    if (!$util.isInteger(message.victim_player_id))
                        return "victim_player_id: integer expected";
                if (message.victim_unit_handle != null && message.hasOwnProperty("victim_unit_handle"))
                    if (!$util.isInteger(message.victim_unit_handle))
                        return "victim_unit_handle: integer expected";
                if (message.attacker_player_id != null && message.hasOwnProperty("attacker_player_id"))
                    if (!$util.isInteger(message.attacker_player_id))
                        return "attacker_player_id: integer expected";
                if (message.attacker_unit_handle != null && message.hasOwnProperty("attacker_unit_handle"))
                    if (!$util.isInteger(message.attacker_unit_handle))
                        return "attacker_unit_handle: integer expected";
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    if (!$util.isInteger(message.ability_id))
                        return "ability_id: integer expected";
                return null;
            };
    
            /**
             * Creates an EventDamage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.EventDamage} EventDamage
             */
            EventDamage.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.EventDamage)
                    return object;
                var message = new $root.CMsgBotWorldState.EventDamage();
                if (object.damage != null)
                    message.damage = object.damage >>> 0;
                if (object.victim_player_id != null)
                    message.victim_player_id = object.victim_player_id | 0;
                if (object.victim_unit_handle != null)
                    message.victim_unit_handle = object.victim_unit_handle >>> 0;
                if (object.attacker_player_id != null)
                    message.attacker_player_id = object.attacker_player_id | 0;
                if (object.attacker_unit_handle != null)
                    message.attacker_unit_handle = object.attacker_unit_handle >>> 0;
                if (object.ability_id != null)
                    message.ability_id = object.ability_id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an EventDamage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.EventDamage
             * @static
             * @param {CMsgBotWorldState.EventDamage} message EventDamage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventDamage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.damage = 0;
                    object.victim_player_id = 0;
                    object.victim_unit_handle = 0;
                    object.attacker_player_id = 0;
                    object.attacker_unit_handle = 0;
                    object.ability_id = 0;
                }
                if (message.damage != null && message.hasOwnProperty("damage"))
                    object.damage = message.damage;
                if (message.victim_player_id != null && message.hasOwnProperty("victim_player_id"))
                    object.victim_player_id = message.victim_player_id;
                if (message.victim_unit_handle != null && message.hasOwnProperty("victim_unit_handle"))
                    object.victim_unit_handle = message.victim_unit_handle;
                if (message.attacker_player_id != null && message.hasOwnProperty("attacker_player_id"))
                    object.attacker_player_id = message.attacker_player_id;
                if (message.attacker_unit_handle != null && message.hasOwnProperty("attacker_unit_handle"))
                    object.attacker_unit_handle = message.attacker_unit_handle;
                if (message.ability_id != null && message.hasOwnProperty("ability_id"))
                    object.ability_id = message.ability_id;
                return object;
            };
    
            /**
             * Converts this EventDamage to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.EventDamage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventDamage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EventDamage;
        })();
    
        CMsgBotWorldState.EventCourierKilled = (function() {
    
            /**
             * Properties of an EventCourierKilled.
             * @memberof CMsgBotWorldState
             * @interface IEventCourierKilled
             * @property {number|null} [team_id] EventCourierKilled team_id
             * @property {number|null} [courier_unit_handle] EventCourierKilled courier_unit_handle
             * @property {number|null} [killer_player_id] EventCourierKilled killer_player_id
             * @property {number|null} [killer_unit_handle] EventCourierKilled killer_unit_handle
             */
    
            /**
             * Constructs a new EventCourierKilled.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an EventCourierKilled.
             * @implements IEventCourierKilled
             * @constructor
             * @param {CMsgBotWorldState.IEventCourierKilled=} [properties] Properties to set
             */
            function EventCourierKilled(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EventCourierKilled team_id.
             * @member {number} team_id
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @instance
             */
            EventCourierKilled.prototype.team_id = 0;
    
            /**
             * EventCourierKilled courier_unit_handle.
             * @member {number} courier_unit_handle
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @instance
             */
            EventCourierKilled.prototype.courier_unit_handle = 0;
    
            /**
             * EventCourierKilled killer_player_id.
             * @member {number} killer_player_id
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @instance
             */
            EventCourierKilled.prototype.killer_player_id = 0;
    
            /**
             * EventCourierKilled killer_unit_handle.
             * @member {number} killer_unit_handle
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @instance
             */
            EventCourierKilled.prototype.killer_unit_handle = 0;
    
            /**
             * Creates a new EventCourierKilled instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {CMsgBotWorldState.IEventCourierKilled=} [properties] Properties to set
             * @returns {CMsgBotWorldState.EventCourierKilled} EventCourierKilled instance
             */
            EventCourierKilled.create = function create(properties) {
                return new EventCourierKilled(properties);
            };
    
            /**
             * Encodes the specified EventCourierKilled message. Does not implicitly {@link CMsgBotWorldState.EventCourierKilled.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {CMsgBotWorldState.IEventCourierKilled} message EventCourierKilled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventCourierKilled.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.team_id != null && Object.hasOwnProperty.call(message, "team_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.team_id);
                if (message.courier_unit_handle != null && Object.hasOwnProperty.call(message, "courier_unit_handle"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.courier_unit_handle);
                if (message.killer_player_id != null && Object.hasOwnProperty.call(message, "killer_player_id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.killer_player_id);
                if (message.killer_unit_handle != null && Object.hasOwnProperty.call(message, "killer_unit_handle"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.killer_unit_handle);
                return writer;
            };
    
            /**
             * Encodes the specified EventCourierKilled message, length delimited. Does not implicitly {@link CMsgBotWorldState.EventCourierKilled.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {CMsgBotWorldState.IEventCourierKilled} message EventCourierKilled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventCourierKilled.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EventCourierKilled message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.EventCourierKilled} EventCourierKilled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventCourierKilled.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.EventCourierKilled();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.team_id = reader.uint32();
                        break;
                    case 2:
                        message.courier_unit_handle = reader.uint32();
                        break;
                    case 3:
                        message.killer_player_id = reader.int32();
                        break;
                    case 4:
                        message.killer_unit_handle = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EventCourierKilled message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.EventCourierKilled} EventCourierKilled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventCourierKilled.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EventCourierKilled message.
             * @function verify
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventCourierKilled.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.team_id != null && message.hasOwnProperty("team_id"))
                    if (!$util.isInteger(message.team_id))
                        return "team_id: integer expected";
                if (message.courier_unit_handle != null && message.hasOwnProperty("courier_unit_handle"))
                    if (!$util.isInteger(message.courier_unit_handle))
                        return "courier_unit_handle: integer expected";
                if (message.killer_player_id != null && message.hasOwnProperty("killer_player_id"))
                    if (!$util.isInteger(message.killer_player_id))
                        return "killer_player_id: integer expected";
                if (message.killer_unit_handle != null && message.hasOwnProperty("killer_unit_handle"))
                    if (!$util.isInteger(message.killer_unit_handle))
                        return "killer_unit_handle: integer expected";
                return null;
            };
    
            /**
             * Creates an EventCourierKilled message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.EventCourierKilled} EventCourierKilled
             */
            EventCourierKilled.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.EventCourierKilled)
                    return object;
                var message = new $root.CMsgBotWorldState.EventCourierKilled();
                if (object.team_id != null)
                    message.team_id = object.team_id >>> 0;
                if (object.courier_unit_handle != null)
                    message.courier_unit_handle = object.courier_unit_handle >>> 0;
                if (object.killer_player_id != null)
                    message.killer_player_id = object.killer_player_id | 0;
                if (object.killer_unit_handle != null)
                    message.killer_unit_handle = object.killer_unit_handle >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an EventCourierKilled message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @static
             * @param {CMsgBotWorldState.EventCourierKilled} message EventCourierKilled
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventCourierKilled.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.team_id = 0;
                    object.courier_unit_handle = 0;
                    object.killer_player_id = 0;
                    object.killer_unit_handle = 0;
                }
                if (message.team_id != null && message.hasOwnProperty("team_id"))
                    object.team_id = message.team_id;
                if (message.courier_unit_handle != null && message.hasOwnProperty("courier_unit_handle"))
                    object.courier_unit_handle = message.courier_unit_handle;
                if (message.killer_player_id != null && message.hasOwnProperty("killer_player_id"))
                    object.killer_player_id = message.killer_player_id;
                if (message.killer_unit_handle != null && message.hasOwnProperty("killer_unit_handle"))
                    object.killer_unit_handle = message.killer_unit_handle;
                return object;
            };
    
            /**
             * Converts this EventCourierKilled to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.EventCourierKilled
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventCourierKilled.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EventCourierKilled;
        })();
    
        CMsgBotWorldState.EventRoshanKilled = (function() {
    
            /**
             * Properties of an EventRoshanKilled.
             * @memberof CMsgBotWorldState
             * @interface IEventRoshanKilled
             * @property {number|null} [killer_player_id] EventRoshanKilled killer_player_id
             * @property {number|null} [killer_unit_handle] EventRoshanKilled killer_unit_handle
             */
    
            /**
             * Constructs a new EventRoshanKilled.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an EventRoshanKilled.
             * @implements IEventRoshanKilled
             * @constructor
             * @param {CMsgBotWorldState.IEventRoshanKilled=} [properties] Properties to set
             */
            function EventRoshanKilled(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EventRoshanKilled killer_player_id.
             * @member {number} killer_player_id
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @instance
             */
            EventRoshanKilled.prototype.killer_player_id = 0;
    
            /**
             * EventRoshanKilled killer_unit_handle.
             * @member {number} killer_unit_handle
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @instance
             */
            EventRoshanKilled.prototype.killer_unit_handle = 0;
    
            /**
             * Creates a new EventRoshanKilled instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {CMsgBotWorldState.IEventRoshanKilled=} [properties] Properties to set
             * @returns {CMsgBotWorldState.EventRoshanKilled} EventRoshanKilled instance
             */
            EventRoshanKilled.create = function create(properties) {
                return new EventRoshanKilled(properties);
            };
    
            /**
             * Encodes the specified EventRoshanKilled message. Does not implicitly {@link CMsgBotWorldState.EventRoshanKilled.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {CMsgBotWorldState.IEventRoshanKilled} message EventRoshanKilled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventRoshanKilled.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.killer_player_id != null && Object.hasOwnProperty.call(message, "killer_player_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.killer_player_id);
                if (message.killer_unit_handle != null && Object.hasOwnProperty.call(message, "killer_unit_handle"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.killer_unit_handle);
                return writer;
            };
    
            /**
             * Encodes the specified EventRoshanKilled message, length delimited. Does not implicitly {@link CMsgBotWorldState.EventRoshanKilled.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {CMsgBotWorldState.IEventRoshanKilled} message EventRoshanKilled message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventRoshanKilled.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EventRoshanKilled message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.EventRoshanKilled} EventRoshanKilled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventRoshanKilled.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.EventRoshanKilled();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.killer_player_id = reader.int32();
                        break;
                    case 2:
                        message.killer_unit_handle = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EventRoshanKilled message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.EventRoshanKilled} EventRoshanKilled
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventRoshanKilled.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EventRoshanKilled message.
             * @function verify
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventRoshanKilled.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.killer_player_id != null && message.hasOwnProperty("killer_player_id"))
                    if (!$util.isInteger(message.killer_player_id))
                        return "killer_player_id: integer expected";
                if (message.killer_unit_handle != null && message.hasOwnProperty("killer_unit_handle"))
                    if (!$util.isInteger(message.killer_unit_handle))
                        return "killer_unit_handle: integer expected";
                return null;
            };
    
            /**
             * Creates an EventRoshanKilled message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.EventRoshanKilled} EventRoshanKilled
             */
            EventRoshanKilled.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.EventRoshanKilled)
                    return object;
                var message = new $root.CMsgBotWorldState.EventRoshanKilled();
                if (object.killer_player_id != null)
                    message.killer_player_id = object.killer_player_id | 0;
                if (object.killer_unit_handle != null)
                    message.killer_unit_handle = object.killer_unit_handle >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an EventRoshanKilled message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @static
             * @param {CMsgBotWorldState.EventRoshanKilled} message EventRoshanKilled
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventRoshanKilled.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.killer_player_id = 0;
                    object.killer_unit_handle = 0;
                }
                if (message.killer_player_id != null && message.hasOwnProperty("killer_player_id"))
                    object.killer_player_id = message.killer_player_id;
                if (message.killer_unit_handle != null && message.hasOwnProperty("killer_unit_handle"))
                    object.killer_unit_handle = message.killer_unit_handle;
                return object;
            };
    
            /**
             * Converts this EventRoshanKilled to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.EventRoshanKilled
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventRoshanKilled.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EventRoshanKilled;
        })();
    
        CMsgBotWorldState.EventTree = (function() {
    
            /**
             * Properties of an EventTree.
             * @memberof CMsgBotWorldState
             * @interface IEventTree
             * @property {number|null} [tree_id] EventTree tree_id
             * @property {boolean|null} [destroyed] EventTree destroyed
             * @property {boolean|null} [respawned] EventTree respawned
             * @property {CMsgBotWorldState.IVector|null} [location] EventTree location
             * @property {boolean|null} [delayed] EventTree delayed
             */
    
            /**
             * Constructs a new EventTree.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an EventTree.
             * @implements IEventTree
             * @constructor
             * @param {CMsgBotWorldState.IEventTree=} [properties] Properties to set
             */
            function EventTree(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EventTree tree_id.
             * @member {number} tree_id
             * @memberof CMsgBotWorldState.EventTree
             * @instance
             */
            EventTree.prototype.tree_id = 0;
    
            /**
             * EventTree destroyed.
             * @member {boolean} destroyed
             * @memberof CMsgBotWorldState.EventTree
             * @instance
             */
            EventTree.prototype.destroyed = false;
    
            /**
             * EventTree respawned.
             * @member {boolean} respawned
             * @memberof CMsgBotWorldState.EventTree
             * @instance
             */
            EventTree.prototype.respawned = false;
    
            /**
             * EventTree location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.EventTree
             * @instance
             */
            EventTree.prototype.location = null;
    
            /**
             * EventTree delayed.
             * @member {boolean} delayed
             * @memberof CMsgBotWorldState.EventTree
             * @instance
             */
            EventTree.prototype.delayed = false;
    
            /**
             * Creates a new EventTree instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {CMsgBotWorldState.IEventTree=} [properties] Properties to set
             * @returns {CMsgBotWorldState.EventTree} EventTree instance
             */
            EventTree.create = function create(properties) {
                return new EventTree(properties);
            };
    
            /**
             * Encodes the specified EventTree message. Does not implicitly {@link CMsgBotWorldState.EventTree.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {CMsgBotWorldState.IEventTree} message EventTree message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventTree.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tree_id != null && Object.hasOwnProperty.call(message, "tree_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tree_id);
                if (message.destroyed != null && Object.hasOwnProperty.call(message, "destroyed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.destroyed);
                if (message.respawned != null && Object.hasOwnProperty.call(message, "respawned"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.respawned);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.delayed != null && Object.hasOwnProperty.call(message, "delayed"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.delayed);
                return writer;
            };
    
            /**
             * Encodes the specified EventTree message, length delimited. Does not implicitly {@link CMsgBotWorldState.EventTree.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {CMsgBotWorldState.IEventTree} message EventTree message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventTree.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EventTree message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.EventTree} EventTree
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventTree.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.EventTree();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tree_id = reader.uint32();
                        break;
                    case 2:
                        message.destroyed = reader.bool();
                        break;
                    case 3:
                        message.respawned = reader.bool();
                        break;
                    case 4:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.delayed = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EventTree message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.EventTree} EventTree
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventTree.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EventTree message.
             * @function verify
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventTree.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tree_id != null && message.hasOwnProperty("tree_id"))
                    if (!$util.isInteger(message.tree_id))
                        return "tree_id: integer expected";
                if (message.destroyed != null && message.hasOwnProperty("destroyed"))
                    if (typeof message.destroyed !== "boolean")
                        return "destroyed: boolean expected";
                if (message.respawned != null && message.hasOwnProperty("respawned"))
                    if (typeof message.respawned !== "boolean")
                        return "respawned: boolean expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.delayed != null && message.hasOwnProperty("delayed"))
                    if (typeof message.delayed !== "boolean")
                        return "delayed: boolean expected";
                return null;
            };
    
            /**
             * Creates an EventTree message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.EventTree} EventTree
             */
            EventTree.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.EventTree)
                    return object;
                var message = new $root.CMsgBotWorldState.EventTree();
                if (object.tree_id != null)
                    message.tree_id = object.tree_id >>> 0;
                if (object.destroyed != null)
                    message.destroyed = Boolean(object.destroyed);
                if (object.respawned != null)
                    message.respawned = Boolean(object.respawned);
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.EventTree.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.delayed != null)
                    message.delayed = Boolean(object.delayed);
                return message;
            };
    
            /**
             * Creates a plain object from an EventTree message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.EventTree
             * @static
             * @param {CMsgBotWorldState.EventTree} message EventTree
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventTree.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.tree_id = 0;
                    object.destroyed = false;
                    object.respawned = false;
                    object.location = null;
                    object.delayed = false;
                }
                if (message.tree_id != null && message.hasOwnProperty("tree_id"))
                    object.tree_id = message.tree_id;
                if (message.destroyed != null && message.hasOwnProperty("destroyed"))
                    object.destroyed = message.destroyed;
                if (message.respawned != null && message.hasOwnProperty("respawned"))
                    object.respawned = message.respawned;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.delayed != null && message.hasOwnProperty("delayed"))
                    object.delayed = message.delayed;
                return object;
            };
    
            /**
             * Converts this EventTree to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.EventTree
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventTree.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EventTree;
        })();
    
        CMsgBotWorldState.Unit = (function() {
    
            /**
             * Properties of an Unit.
             * @memberof CMsgBotWorldState
             * @interface IUnit
             * @property {number|null} [handle] Unit handle
             * @property {CMsgBotWorldState.UnitType|null} [unit_type] Unit unit_type
             * @property {string|null} [name] Unit name
             * @property {number|null} [team_id] Unit team_id
             * @property {number|null} [level] Unit level
             * @property {CMsgBotWorldState.IVector|null} [location] Unit location
             * @property {boolean|null} [is_alive] Unit is_alive
             * @property {number|null} [player_id] Unit player_id
             * @property {number|null} [bounding_radius] Unit bounding_radius
             * @property {number|null} [facing] Unit facing
             * @property {number|null} [ground_height] Unit ground_height
             * @property {number|null} [vision_range_daytime] Unit vision_range_daytime
             * @property {number|null} [vision_range_nighttime] Unit vision_range_nighttime
             * @property {number|null} [health] Unit health
             * @property {number|null} [health_max] Unit health_max
             * @property {number|null} [health_regen] Unit health_regen
             * @property {number|null} [mana] Unit mana
             * @property {number|null} [mana_max] Unit mana_max
             * @property {number|null} [mana_regen] Unit mana_regen
             * @property {number|null} [base_movement_speed] Unit base_movement_speed
             * @property {number|null} [current_movement_speed] Unit current_movement_speed
             * @property {number|null} [anim_activity] Unit anim_activity
             * @property {number|null} [anim_cycle] Unit anim_cycle
             * @property {number|null} [base_damage] Unit base_damage
             * @property {number|null} [base_damage_variance] Unit base_damage_variance
             * @property {number|null} [bonus_damage] Unit bonus_damage
             * @property {number|null} [attack_damage] Unit attack_damage
             * @property {number|null} [attack_range] Unit attack_range
             * @property {number|null} [attack_speed] Unit attack_speed
             * @property {number|null} [attack_anim_point] Unit attack_anim_point
             * @property {number|null} [attack_acquisition_range] Unit attack_acquisition_range
             * @property {number|null} [attack_projectile_speed] Unit attack_projectile_speed
             * @property {number|null} [attack_target_handle] Unit attack_target_handle
             * @property {string|null} [attack_target_name] Unit attack_target_name
             * @property {number|null} [attacks_per_second] Unit attacks_per_second
             * @property {number|null} [last_attack_time] Unit last_attack_time
             * @property {number|null} [bounty_xp] Unit bounty_xp
             * @property {number|null} [bounty_gold_min] Unit bounty_gold_min
             * @property {number|null} [bounty_gold_max] Unit bounty_gold_max
             * @property {boolean|null} [is_channeling] Unit is_channeling
             * @property {number|null} [active_ability_handle] Unit active_ability_handle
             * @property {boolean|null} [is_attack_immune] Unit is_attack_immune
             * @property {boolean|null} [is_blind] Unit is_blind
             * @property {boolean|null} [is_block_disabled] Unit is_block_disabled
             * @property {boolean|null} [is_disarmed] Unit is_disarmed
             * @property {boolean|null} [is_dominated] Unit is_dominated
             * @property {boolean|null} [is_evade_disabled] Unit is_evade_disabled
             * @property {boolean|null} [is_hexed] Unit is_hexed
             * @property {boolean|null} [is_invisible] Unit is_invisible
             * @property {boolean|null} [is_invulnerable] Unit is_invulnerable
             * @property {boolean|null} [is_magic_immune] Unit is_magic_immune
             * @property {boolean|null} [is_muted] Unit is_muted
             * @property {boolean|null} [is_nightmared] Unit is_nightmared
             * @property {boolean|null} [is_rooted] Unit is_rooted
             * @property {boolean|null} [is_silenced] Unit is_silenced
             * @property {boolean|null} [is_specially_deniable] Unit is_specially_deniable
             * @property {boolean|null} [is_stunned] Unit is_stunned
             * @property {boolean|null} [is_unable_to_miss] Unit is_unable_to_miss
             * @property {boolean|null} [has_scepter] Unit has_scepter
             * @property {Array.<CMsgBotWorldState.IAbility>|null} [abilities] Unit abilities
             * @property {Array.<CMsgBotWorldState.IAbility>|null} [items] Unit items
             * @property {Array.<CMsgBotWorldState.IModifier>|null} [modifiers] Unit modifiers
             * @property {Array.<CMsgBotWorldState.ITrackingProjectile>|null} [incoming_tracking_projectiles] Unit incoming_tracking_projectiles
             * @property {number|null} [action_type] Unit action_type
             * @property {number|null} [ability_target_handle] Unit ability_target_handle
             * @property {string|null} [ability_target_name] Unit ability_target_name
             * @property {boolean|null} [is_using_ability] Unit is_using_ability
             * @property {number|null} [primary_attribute] Unit primary_attribute
             * @property {boolean|null} [is_illusion] Unit is_illusion
             * @property {number|null} [respawn_time] Unit respawn_time
             * @property {number|null} [buyback_cost] Unit buyback_cost
             * @property {number|null} [buyback_cooldown] Unit buyback_cooldown
             * @property {number|null} [spell_amplification] Unit spell_amplification
             * @property {number|null} [armor] Unit armor
             * @property {number|null} [magic_resist] Unit magic_resist
             * @property {number|null} [evasion] Unit evasion
             * @property {number|null} [xp_needed_to_level] Unit xp_needed_to_level
             * @property {number|null} [ability_points] Unit ability_points
             * @property {number|null} [reliable_gold] Unit reliable_gold
             * @property {number|null} [unreliable_gold] Unit unreliable_gold
             * @property {number|null} [last_hits] Unit last_hits
             * @property {number|null} [denies] Unit denies
             * @property {number|null} [net_worth] Unit net_worth
             * @property {number|null} [strength] Unit strength
             * @property {number|null} [agility] Unit agility
             * @property {number|null} [intelligence] Unit intelligence
             * @property {number|null} [remaining_lifespan] Unit remaining_lifespan
             * @property {boolean|null} [flying_courier] Unit flying_courier
             * @property {number|null} [shrine_cooldown] Unit shrine_cooldown
             * @property {boolean|null} [is_shrine_healing] Unit is_shrine_healing
             */
    
            /**
             * Constructs a new Unit.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an Unit.
             * @implements IUnit
             * @constructor
             * @param {CMsgBotWorldState.IUnit=} [properties] Properties to set
             */
            function Unit(properties) {
                this.abilities = [];
                this.items = [];
                this.modifiers = [];
                this.incoming_tracking_projectiles = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Unit handle.
             * @member {number} handle
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.handle = 0;
    
            /**
             * Unit unit_type.
             * @member {CMsgBotWorldState.UnitType} unit_type
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.unit_type = 0;
    
            /**
             * Unit name.
             * @member {string} name
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.name = "";
    
            /**
             * Unit team_id.
             * @member {number} team_id
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.team_id = 0;
    
            /**
             * Unit level.
             * @member {number} level
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.level = 0;
    
            /**
             * Unit location.
             * @member {CMsgBotWorldState.IVector|null|undefined} location
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.location = null;
    
            /**
             * Unit is_alive.
             * @member {boolean} is_alive
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_alive = false;
    
            /**
             * Unit player_id.
             * @member {number} player_id
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.player_id = 0;
    
            /**
             * Unit bounding_radius.
             * @member {number} bounding_radius
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.bounding_radius = 0;
    
            /**
             * Unit facing.
             * @member {number} facing
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.facing = 0;
    
            /**
             * Unit ground_height.
             * @member {number} ground_height
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.ground_height = 0;
    
            /**
             * Unit vision_range_daytime.
             * @member {number} vision_range_daytime
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.vision_range_daytime = 0;
    
            /**
             * Unit vision_range_nighttime.
             * @member {number} vision_range_nighttime
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.vision_range_nighttime = 0;
    
            /**
             * Unit health.
             * @member {number} health
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.health = 0;
    
            /**
             * Unit health_max.
             * @member {number} health_max
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.health_max = 0;
    
            /**
             * Unit health_regen.
             * @member {number} health_regen
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.health_regen = 0;
    
            /**
             * Unit mana.
             * @member {number} mana
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.mana = 0;
    
            /**
             * Unit mana_max.
             * @member {number} mana_max
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.mana_max = 0;
    
            /**
             * Unit mana_regen.
             * @member {number} mana_regen
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.mana_regen = 0;
    
            /**
             * Unit base_movement_speed.
             * @member {number} base_movement_speed
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.base_movement_speed = 0;
    
            /**
             * Unit current_movement_speed.
             * @member {number} current_movement_speed
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.current_movement_speed = 0;
    
            /**
             * Unit anim_activity.
             * @member {number} anim_activity
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.anim_activity = 0;
    
            /**
             * Unit anim_cycle.
             * @member {number} anim_cycle
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.anim_cycle = 0;
    
            /**
             * Unit base_damage.
             * @member {number} base_damage
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.base_damage = 0;
    
            /**
             * Unit base_damage_variance.
             * @member {number} base_damage_variance
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.base_damage_variance = 0;
    
            /**
             * Unit bonus_damage.
             * @member {number} bonus_damage
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.bonus_damage = 0;
    
            /**
             * Unit attack_damage.
             * @member {number} attack_damage
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_damage = 0;
    
            /**
             * Unit attack_range.
             * @member {number} attack_range
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_range = 0;
    
            /**
             * Unit attack_speed.
             * @member {number} attack_speed
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_speed = 0;
    
            /**
             * Unit attack_anim_point.
             * @member {number} attack_anim_point
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_anim_point = 0;
    
            /**
             * Unit attack_acquisition_range.
             * @member {number} attack_acquisition_range
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_acquisition_range = 0;
    
            /**
             * Unit attack_projectile_speed.
             * @member {number} attack_projectile_speed
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_projectile_speed = 0;
    
            /**
             * Unit attack_target_handle.
             * @member {number} attack_target_handle
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_target_handle = 0;
    
            /**
             * Unit attack_target_name.
             * @member {string} attack_target_name
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attack_target_name = "";
    
            /**
             * Unit attacks_per_second.
             * @member {number} attacks_per_second
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.attacks_per_second = -1;
    
            /**
             * Unit last_attack_time.
             * @member {number} last_attack_time
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.last_attack_time = -1;
    
            /**
             * Unit bounty_xp.
             * @member {number} bounty_xp
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.bounty_xp = 0;
    
            /**
             * Unit bounty_gold_min.
             * @member {number} bounty_gold_min
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.bounty_gold_min = 0;
    
            /**
             * Unit bounty_gold_max.
             * @member {number} bounty_gold_max
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.bounty_gold_max = 0;
    
            /**
             * Unit is_channeling.
             * @member {boolean} is_channeling
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_channeling = false;
    
            /**
             * Unit active_ability_handle.
             * @member {number} active_ability_handle
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.active_ability_handle = 0;
    
            /**
             * Unit is_attack_immune.
             * @member {boolean} is_attack_immune
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_attack_immune = false;
    
            /**
             * Unit is_blind.
             * @member {boolean} is_blind
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_blind = false;
    
            /**
             * Unit is_block_disabled.
             * @member {boolean} is_block_disabled
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_block_disabled = false;
    
            /**
             * Unit is_disarmed.
             * @member {boolean} is_disarmed
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_disarmed = false;
    
            /**
             * Unit is_dominated.
             * @member {boolean} is_dominated
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_dominated = false;
    
            /**
             * Unit is_evade_disabled.
             * @member {boolean} is_evade_disabled
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_evade_disabled = false;
    
            /**
             * Unit is_hexed.
             * @member {boolean} is_hexed
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_hexed = false;
    
            /**
             * Unit is_invisible.
             * @member {boolean} is_invisible
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_invisible = false;
    
            /**
             * Unit is_invulnerable.
             * @member {boolean} is_invulnerable
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_invulnerable = false;
    
            /**
             * Unit is_magic_immune.
             * @member {boolean} is_magic_immune
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_magic_immune = false;
    
            /**
             * Unit is_muted.
             * @member {boolean} is_muted
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_muted = false;
    
            /**
             * Unit is_nightmared.
             * @member {boolean} is_nightmared
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_nightmared = false;
    
            /**
             * Unit is_rooted.
             * @member {boolean} is_rooted
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_rooted = false;
    
            /**
             * Unit is_silenced.
             * @member {boolean} is_silenced
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_silenced = false;
    
            /**
             * Unit is_specially_deniable.
             * @member {boolean} is_specially_deniable
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_specially_deniable = false;
    
            /**
             * Unit is_stunned.
             * @member {boolean} is_stunned
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_stunned = false;
    
            /**
             * Unit is_unable_to_miss.
             * @member {boolean} is_unable_to_miss
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_unable_to_miss = false;
    
            /**
             * Unit has_scepter.
             * @member {boolean} has_scepter
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.has_scepter = false;
    
            /**
             * Unit abilities.
             * @member {Array.<CMsgBotWorldState.IAbility>} abilities
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.abilities = $util.emptyArray;
    
            /**
             * Unit items.
             * @member {Array.<CMsgBotWorldState.IAbility>} items
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.items = $util.emptyArray;
    
            /**
             * Unit modifiers.
             * @member {Array.<CMsgBotWorldState.IModifier>} modifiers
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.modifiers = $util.emptyArray;
    
            /**
             * Unit incoming_tracking_projectiles.
             * @member {Array.<CMsgBotWorldState.ITrackingProjectile>} incoming_tracking_projectiles
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.incoming_tracking_projectiles = $util.emptyArray;
    
            /**
             * Unit action_type.
             * @member {number} action_type
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.action_type = 0;
    
            /**
             * Unit ability_target_handle.
             * @member {number} ability_target_handle
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.ability_target_handle = 0;
    
            /**
             * Unit ability_target_name.
             * @member {string} ability_target_name
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.ability_target_name = "";
    
            /**
             * Unit is_using_ability.
             * @member {boolean} is_using_ability
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_using_ability = false;
    
            /**
             * Unit primary_attribute.
             * @member {number} primary_attribute
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.primary_attribute = 0;
    
            /**
             * Unit is_illusion.
             * @member {boolean} is_illusion
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_illusion = false;
    
            /**
             * Unit respawn_time.
             * @member {number} respawn_time
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.respawn_time = 0;
    
            /**
             * Unit buyback_cost.
             * @member {number} buyback_cost
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.buyback_cost = 0;
    
            /**
             * Unit buyback_cooldown.
             * @member {number} buyback_cooldown
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.buyback_cooldown = 0;
    
            /**
             * Unit spell_amplification.
             * @member {number} spell_amplification
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.spell_amplification = 0;
    
            /**
             * Unit armor.
             * @member {number} armor
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.armor = 0;
    
            /**
             * Unit magic_resist.
             * @member {number} magic_resist
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.magic_resist = 0;
    
            /**
             * Unit evasion.
             * @member {number} evasion
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.evasion = 0;
    
            /**
             * Unit xp_needed_to_level.
             * @member {number} xp_needed_to_level
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.xp_needed_to_level = 0;
    
            /**
             * Unit ability_points.
             * @member {number} ability_points
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.ability_points = 0;
    
            /**
             * Unit reliable_gold.
             * @member {number} reliable_gold
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.reliable_gold = -1;
    
            /**
             * Unit unreliable_gold.
             * @member {number} unreliable_gold
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.unreliable_gold = -1;
    
            /**
             * Unit last_hits.
             * @member {number} last_hits
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.last_hits = 0;
    
            /**
             * Unit denies.
             * @member {number} denies
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.denies = 0;
    
            /**
             * Unit net_worth.
             * @member {number} net_worth
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.net_worth = 0;
    
            /**
             * Unit strength.
             * @member {number} strength
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.strength = 0;
    
            /**
             * Unit agility.
             * @member {number} agility
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.agility = 0;
    
            /**
             * Unit intelligence.
             * @member {number} intelligence
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.intelligence = 0;
    
            /**
             * Unit remaining_lifespan.
             * @member {number} remaining_lifespan
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.remaining_lifespan = 0;
    
            /**
             * Unit flying_courier.
             * @member {boolean} flying_courier
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.flying_courier = false;
    
            /**
             * Unit shrine_cooldown.
             * @member {number} shrine_cooldown
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.shrine_cooldown = 0;
    
            /**
             * Unit is_shrine_healing.
             * @member {boolean} is_shrine_healing
             * @memberof CMsgBotWorldState.Unit
             * @instance
             */
            Unit.prototype.is_shrine_healing = false;
    
            /**
             * Creates a new Unit instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {CMsgBotWorldState.IUnit=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Unit} Unit instance
             */
            Unit.create = function create(properties) {
                return new Unit(properties);
            };
    
            /**
             * Encodes the specified Unit message. Does not implicitly {@link CMsgBotWorldState.Unit.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {CMsgBotWorldState.IUnit} message Unit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Unit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.handle);
                if (message.unit_type != null && Object.hasOwnProperty.call(message, "unit_type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.unit_type);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                if (message.team_id != null && Object.hasOwnProperty.call(message, "team_id"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.team_id);
                if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.level);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.is_alive != null && Object.hasOwnProperty.call(message, "is_alive"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.is_alive);
                if (message.player_id != null && Object.hasOwnProperty.call(message, "player_id"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.player_id);
                if (message.bounding_radius != null && Object.hasOwnProperty.call(message, "bounding_radius"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.bounding_radius);
                if (message.facing != null && Object.hasOwnProperty.call(message, "facing"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.facing);
                if (message.ground_height != null && Object.hasOwnProperty.call(message, "ground_height"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.ground_height);
                if (message.vision_range_daytime != null && Object.hasOwnProperty.call(message, "vision_range_daytime"))
                    writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.vision_range_daytime);
                if (message.vision_range_nighttime != null && Object.hasOwnProperty.call(message, "vision_range_nighttime"))
                    writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.vision_range_nighttime);
                if (message.health != null && Object.hasOwnProperty.call(message, "health"))
                    writer.uint32(/* id 20, wireType 0 =*/160).int32(message.health);
                if (message.health_max != null && Object.hasOwnProperty.call(message, "health_max"))
                    writer.uint32(/* id 21, wireType 0 =*/168).int32(message.health_max);
                if (message.health_regen != null && Object.hasOwnProperty.call(message, "health_regen"))
                    writer.uint32(/* id 22, wireType 5 =*/181).float(message.health_regen);
                if (message.mana != null && Object.hasOwnProperty.call(message, "mana"))
                    writer.uint32(/* id 25, wireType 0 =*/200).int32(message.mana);
                if (message.mana_max != null && Object.hasOwnProperty.call(message, "mana_max"))
                    writer.uint32(/* id 26, wireType 0 =*/208).int32(message.mana_max);
                if (message.mana_regen != null && Object.hasOwnProperty.call(message, "mana_regen"))
                    writer.uint32(/* id 27, wireType 5 =*/221).float(message.mana_regen);
                if (message.base_movement_speed != null && Object.hasOwnProperty.call(message, "base_movement_speed"))
                    writer.uint32(/* id 30, wireType 0 =*/240).int32(message.base_movement_speed);
                if (message.current_movement_speed != null && Object.hasOwnProperty.call(message, "current_movement_speed"))
                    writer.uint32(/* id 31, wireType 0 =*/248).int32(message.current_movement_speed);
                if (message.anim_activity != null && Object.hasOwnProperty.call(message, "anim_activity"))
                    writer.uint32(/* id 35, wireType 0 =*/280).int32(message.anim_activity);
                if (message.anim_cycle != null && Object.hasOwnProperty.call(message, "anim_cycle"))
                    writer.uint32(/* id 36, wireType 5 =*/293).float(message.anim_cycle);
                if (message.base_damage != null && Object.hasOwnProperty.call(message, "base_damage"))
                    writer.uint32(/* id 40, wireType 0 =*/320).int32(message.base_damage);
                if (message.base_damage_variance != null && Object.hasOwnProperty.call(message, "base_damage_variance"))
                    writer.uint32(/* id 41, wireType 0 =*/328).int32(message.base_damage_variance);
                if (message.bonus_damage != null && Object.hasOwnProperty.call(message, "bonus_damage"))
                    writer.uint32(/* id 42, wireType 0 =*/336).int32(message.bonus_damage);
                if (message.attack_damage != null && Object.hasOwnProperty.call(message, "attack_damage"))
                    writer.uint32(/* id 43, wireType 0 =*/344).int32(message.attack_damage);
                if (message.attack_range != null && Object.hasOwnProperty.call(message, "attack_range"))
                    writer.uint32(/* id 44, wireType 0 =*/352).int32(message.attack_range);
                if (message.attack_speed != null && Object.hasOwnProperty.call(message, "attack_speed"))
                    writer.uint32(/* id 45, wireType 5 =*/365).float(message.attack_speed);
                if (message.attack_anim_point != null && Object.hasOwnProperty.call(message, "attack_anim_point"))
                    writer.uint32(/* id 46, wireType 5 =*/373).float(message.attack_anim_point);
                if (message.attack_acquisition_range != null && Object.hasOwnProperty.call(message, "attack_acquisition_range"))
                    writer.uint32(/* id 47, wireType 0 =*/376).int32(message.attack_acquisition_range);
                if (message.attack_projectile_speed != null && Object.hasOwnProperty.call(message, "attack_projectile_speed"))
                    writer.uint32(/* id 48, wireType 0 =*/384).int32(message.attack_projectile_speed);
                if (message.attack_target_handle != null && Object.hasOwnProperty.call(message, "attack_target_handle"))
                    writer.uint32(/* id 49, wireType 0 =*/392).uint32(message.attack_target_handle);
                if (message.attacks_per_second != null && Object.hasOwnProperty.call(message, "attacks_per_second"))
                    writer.uint32(/* id 50, wireType 0 =*/400).int32(message.attacks_per_second);
                if (message.last_attack_time != null && Object.hasOwnProperty.call(message, "last_attack_time"))
                    writer.uint32(/* id 51, wireType 5 =*/413).float(message.last_attack_time);
                if (message.attack_target_name != null && Object.hasOwnProperty.call(message, "attack_target_name"))
                    writer.uint32(/* id 52, wireType 2 =*/418).string(message.attack_target_name);
                if (message.bounty_xp != null && Object.hasOwnProperty.call(message, "bounty_xp"))
                    writer.uint32(/* id 60, wireType 0 =*/480).uint32(message.bounty_xp);
                if (message.bounty_gold_min != null && Object.hasOwnProperty.call(message, "bounty_gold_min"))
                    writer.uint32(/* id 61, wireType 0 =*/488).uint32(message.bounty_gold_min);
                if (message.bounty_gold_max != null && Object.hasOwnProperty.call(message, "bounty_gold_max"))
                    writer.uint32(/* id 62, wireType 0 =*/496).uint32(message.bounty_gold_max);
                if (message.is_channeling != null && Object.hasOwnProperty.call(message, "is_channeling"))
                    writer.uint32(/* id 65, wireType 0 =*/520).bool(message.is_channeling);
                if (message.active_ability_handle != null && Object.hasOwnProperty.call(message, "active_ability_handle"))
                    writer.uint32(/* id 66, wireType 0 =*/528).uint32(message.active_ability_handle);
                if (message.is_attack_immune != null && Object.hasOwnProperty.call(message, "is_attack_immune"))
                    writer.uint32(/* id 70, wireType 0 =*/560).bool(message.is_attack_immune);
                if (message.is_blind != null && Object.hasOwnProperty.call(message, "is_blind"))
                    writer.uint32(/* id 71, wireType 0 =*/568).bool(message.is_blind);
                if (message.is_block_disabled != null && Object.hasOwnProperty.call(message, "is_block_disabled"))
                    writer.uint32(/* id 72, wireType 0 =*/576).bool(message.is_block_disabled);
                if (message.is_disarmed != null && Object.hasOwnProperty.call(message, "is_disarmed"))
                    writer.uint32(/* id 73, wireType 0 =*/584).bool(message.is_disarmed);
                if (message.is_dominated != null && Object.hasOwnProperty.call(message, "is_dominated"))
                    writer.uint32(/* id 74, wireType 0 =*/592).bool(message.is_dominated);
                if (message.is_evade_disabled != null && Object.hasOwnProperty.call(message, "is_evade_disabled"))
                    writer.uint32(/* id 75, wireType 0 =*/600).bool(message.is_evade_disabled);
                if (message.is_hexed != null && Object.hasOwnProperty.call(message, "is_hexed"))
                    writer.uint32(/* id 76, wireType 0 =*/608).bool(message.is_hexed);
                if (message.is_invisible != null && Object.hasOwnProperty.call(message, "is_invisible"))
                    writer.uint32(/* id 77, wireType 0 =*/616).bool(message.is_invisible);
                if (message.is_invulnerable != null && Object.hasOwnProperty.call(message, "is_invulnerable"))
                    writer.uint32(/* id 78, wireType 0 =*/624).bool(message.is_invulnerable);
                if (message.is_magic_immune != null && Object.hasOwnProperty.call(message, "is_magic_immune"))
                    writer.uint32(/* id 79, wireType 0 =*/632).bool(message.is_magic_immune);
                if (message.is_muted != null && Object.hasOwnProperty.call(message, "is_muted"))
                    writer.uint32(/* id 80, wireType 0 =*/640).bool(message.is_muted);
                if (message.is_nightmared != null && Object.hasOwnProperty.call(message, "is_nightmared"))
                    writer.uint32(/* id 82, wireType 0 =*/656).bool(message.is_nightmared);
                if (message.is_rooted != null && Object.hasOwnProperty.call(message, "is_rooted"))
                    writer.uint32(/* id 83, wireType 0 =*/664).bool(message.is_rooted);
                if (message.is_silenced != null && Object.hasOwnProperty.call(message, "is_silenced"))
                    writer.uint32(/* id 84, wireType 0 =*/672).bool(message.is_silenced);
                if (message.is_specially_deniable != null && Object.hasOwnProperty.call(message, "is_specially_deniable"))
                    writer.uint32(/* id 85, wireType 0 =*/680).bool(message.is_specially_deniable);
                if (message.is_stunned != null && Object.hasOwnProperty.call(message, "is_stunned"))
                    writer.uint32(/* id 86, wireType 0 =*/688).bool(message.is_stunned);
                if (message.is_unable_to_miss != null && Object.hasOwnProperty.call(message, "is_unable_to_miss"))
                    writer.uint32(/* id 87, wireType 0 =*/696).bool(message.is_unable_to_miss);
                if (message.has_scepter != null && Object.hasOwnProperty.call(message, "has_scepter"))
                    writer.uint32(/* id 88, wireType 0 =*/704).bool(message.has_scepter);
                if (message.abilities != null && message.abilities.length)
                    for (var i = 0; i < message.abilities.length; ++i)
                        $root.CMsgBotWorldState.Ability.encode(message.abilities[i], writer.uint32(/* id 90, wireType 2 =*/722).fork()).ldelim();
                if (message.items != null && message.items.length)
                    for (var i = 0; i < message.items.length; ++i)
                        $root.CMsgBotWorldState.Ability.encode(message.items[i], writer.uint32(/* id 91, wireType 2 =*/730).fork()).ldelim();
                if (message.modifiers != null && message.modifiers.length)
                    for (var i = 0; i < message.modifiers.length; ++i)
                        $root.CMsgBotWorldState.Modifier.encode(message.modifiers[i], writer.uint32(/* id 92, wireType 2 =*/738).fork()).ldelim();
                if (message.incoming_tracking_projectiles != null && message.incoming_tracking_projectiles.length)
                    for (var i = 0; i < message.incoming_tracking_projectiles.length; ++i)
                        $root.CMsgBotWorldState.TrackingProjectile.encode(message.incoming_tracking_projectiles[i], writer.uint32(/* id 93, wireType 2 =*/746).fork()).ldelim();
                if (message.action_type != null && Object.hasOwnProperty.call(message, "action_type"))
                    writer.uint32(/* id 100, wireType 0 =*/800).uint32(message.action_type);
                if (message.ability_target_handle != null && Object.hasOwnProperty.call(message, "ability_target_handle"))
                    writer.uint32(/* id 101, wireType 0 =*/808).uint32(message.ability_target_handle);
                if (message.is_using_ability != null && Object.hasOwnProperty.call(message, "is_using_ability"))
                    writer.uint32(/* id 102, wireType 0 =*/816).bool(message.is_using_ability);
                if (message.ability_target_name != null && Object.hasOwnProperty.call(message, "ability_target_name"))
                    writer.uint32(/* id 103, wireType 2 =*/826).string(message.ability_target_name);
                if (message.primary_attribute != null && Object.hasOwnProperty.call(message, "primary_attribute"))
                    writer.uint32(/* id 110, wireType 0 =*/880).uint32(message.primary_attribute);
                if (message.is_illusion != null && Object.hasOwnProperty.call(message, "is_illusion"))
                    writer.uint32(/* id 111, wireType 0 =*/888).bool(message.is_illusion);
                if (message.respawn_time != null && Object.hasOwnProperty.call(message, "respawn_time"))
                    writer.uint32(/* id 112, wireType 5 =*/901).float(message.respawn_time);
                if (message.buyback_cost != null && Object.hasOwnProperty.call(message, "buyback_cost"))
                    writer.uint32(/* id 113, wireType 0 =*/904).uint32(message.buyback_cost);
                if (message.buyback_cooldown != null && Object.hasOwnProperty.call(message, "buyback_cooldown"))
                    writer.uint32(/* id 114, wireType 5 =*/917).float(message.buyback_cooldown);
                if (message.spell_amplification != null && Object.hasOwnProperty.call(message, "spell_amplification"))
                    writer.uint32(/* id 115, wireType 5 =*/925).float(message.spell_amplification);
                if (message.armor != null && Object.hasOwnProperty.call(message, "armor"))
                    writer.uint32(/* id 116, wireType 5 =*/933).float(message.armor);
                if (message.magic_resist != null && Object.hasOwnProperty.call(message, "magic_resist"))
                    writer.uint32(/* id 117, wireType 5 =*/941).float(message.magic_resist);
                if (message.evasion != null && Object.hasOwnProperty.call(message, "evasion"))
                    writer.uint32(/* id 118, wireType 5 =*/949).float(message.evasion);
                if (message.xp_needed_to_level != null && Object.hasOwnProperty.call(message, "xp_needed_to_level"))
                    writer.uint32(/* id 120, wireType 0 =*/960).uint32(message.xp_needed_to_level);
                if (message.ability_points != null && Object.hasOwnProperty.call(message, "ability_points"))
                    writer.uint32(/* id 121, wireType 0 =*/968).uint32(message.ability_points);
                if (message.reliable_gold != null && Object.hasOwnProperty.call(message, "reliable_gold"))
                    writer.uint32(/* id 122, wireType 0 =*/976).int32(message.reliable_gold);
                if (message.unreliable_gold != null && Object.hasOwnProperty.call(message, "unreliable_gold"))
                    writer.uint32(/* id 123, wireType 0 =*/984).int32(message.unreliable_gold);
                if (message.last_hits != null && Object.hasOwnProperty.call(message, "last_hits"))
                    writer.uint32(/* id 124, wireType 0 =*/992).uint32(message.last_hits);
                if (message.denies != null && Object.hasOwnProperty.call(message, "denies"))
                    writer.uint32(/* id 125, wireType 0 =*/1000).uint32(message.denies);
                if (message.net_worth != null && Object.hasOwnProperty.call(message, "net_worth"))
                    writer.uint32(/* id 126, wireType 0 =*/1008).uint32(message.net_worth);
                if (message.strength != null && Object.hasOwnProperty.call(message, "strength"))
                    writer.uint32(/* id 127, wireType 0 =*/1016).uint32(message.strength);
                if (message.agility != null && Object.hasOwnProperty.call(message, "agility"))
                    writer.uint32(/* id 128, wireType 0 =*/1024).uint32(message.agility);
                if (message.intelligence != null && Object.hasOwnProperty.call(message, "intelligence"))
                    writer.uint32(/* id 129, wireType 0 =*/1032).uint32(message.intelligence);
                if (message.remaining_lifespan != null && Object.hasOwnProperty.call(message, "remaining_lifespan"))
                    writer.uint32(/* id 130, wireType 5 =*/1045).float(message.remaining_lifespan);
                if (message.flying_courier != null && Object.hasOwnProperty.call(message, "flying_courier"))
                    writer.uint32(/* id 140, wireType 0 =*/1120).bool(message.flying_courier);
                if (message.shrine_cooldown != null && Object.hasOwnProperty.call(message, "shrine_cooldown"))
                    writer.uint32(/* id 150, wireType 5 =*/1205).float(message.shrine_cooldown);
                if (message.is_shrine_healing != null && Object.hasOwnProperty.call(message, "is_shrine_healing"))
                    writer.uint32(/* id 151, wireType 0 =*/1208).bool(message.is_shrine_healing);
                return writer;
            };
    
            /**
             * Encodes the specified Unit message, length delimited. Does not implicitly {@link CMsgBotWorldState.Unit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {CMsgBotWorldState.IUnit} message Unit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Unit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Unit message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Unit} Unit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Unit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Unit();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.handle = reader.uint32();
                        break;
                    case 2:
                        message.unit_type = reader.int32();
                        break;
                    case 3:
                        message.name = reader.string();
                        break;
                    case 4:
                        message.team_id = reader.uint32();
                        break;
                    case 5:
                        message.level = reader.uint32();
                        break;
                    case 6:
                        message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.is_alive = reader.bool();
                        break;
                    case 8:
                        message.player_id = reader.int32();
                        break;
                    case 10:
                        message.bounding_radius = reader.int32();
                        break;
                    case 11:
                        message.facing = reader.int32();
                        break;
                    case 12:
                        message.ground_height = reader.uint32();
                        break;
                    case 15:
                        message.vision_range_daytime = reader.uint32();
                        break;
                    case 16:
                        message.vision_range_nighttime = reader.uint32();
                        break;
                    case 20:
                        message.health = reader.int32();
                        break;
                    case 21:
                        message.health_max = reader.int32();
                        break;
                    case 22:
                        message.health_regen = reader.float();
                        break;
                    case 25:
                        message.mana = reader.int32();
                        break;
                    case 26:
                        message.mana_max = reader.int32();
                        break;
                    case 27:
                        message.mana_regen = reader.float();
                        break;
                    case 30:
                        message.base_movement_speed = reader.int32();
                        break;
                    case 31:
                        message.current_movement_speed = reader.int32();
                        break;
                    case 35:
                        message.anim_activity = reader.int32();
                        break;
                    case 36:
                        message.anim_cycle = reader.float();
                        break;
                    case 40:
                        message.base_damage = reader.int32();
                        break;
                    case 41:
                        message.base_damage_variance = reader.int32();
                        break;
                    case 42:
                        message.bonus_damage = reader.int32();
                        break;
                    case 43:
                        message.attack_damage = reader.int32();
                        break;
                    case 44:
                        message.attack_range = reader.int32();
                        break;
                    case 45:
                        message.attack_speed = reader.float();
                        break;
                    case 46:
                        message.attack_anim_point = reader.float();
                        break;
                    case 47:
                        message.attack_acquisition_range = reader.int32();
                        break;
                    case 48:
                        message.attack_projectile_speed = reader.int32();
                        break;
                    case 49:
                        message.attack_target_handle = reader.uint32();
                        break;
                    case 52:
                        message.attack_target_name = reader.string();
                        break;
                    case 50:
                        message.attacks_per_second = reader.int32();
                        break;
                    case 51:
                        message.last_attack_time = reader.float();
                        break;
                    case 60:
                        message.bounty_xp = reader.uint32();
                        break;
                    case 61:
                        message.bounty_gold_min = reader.uint32();
                        break;
                    case 62:
                        message.bounty_gold_max = reader.uint32();
                        break;
                    case 65:
                        message.is_channeling = reader.bool();
                        break;
                    case 66:
                        message.active_ability_handle = reader.uint32();
                        break;
                    case 70:
                        message.is_attack_immune = reader.bool();
                        break;
                    case 71:
                        message.is_blind = reader.bool();
                        break;
                    case 72:
                        message.is_block_disabled = reader.bool();
                        break;
                    case 73:
                        message.is_disarmed = reader.bool();
                        break;
                    case 74:
                        message.is_dominated = reader.bool();
                        break;
                    case 75:
                        message.is_evade_disabled = reader.bool();
                        break;
                    case 76:
                        message.is_hexed = reader.bool();
                        break;
                    case 77:
                        message.is_invisible = reader.bool();
                        break;
                    case 78:
                        message.is_invulnerable = reader.bool();
                        break;
                    case 79:
                        message.is_magic_immune = reader.bool();
                        break;
                    case 80:
                        message.is_muted = reader.bool();
                        break;
                    case 82:
                        message.is_nightmared = reader.bool();
                        break;
                    case 83:
                        message.is_rooted = reader.bool();
                        break;
                    case 84:
                        message.is_silenced = reader.bool();
                        break;
                    case 85:
                        message.is_specially_deniable = reader.bool();
                        break;
                    case 86:
                        message.is_stunned = reader.bool();
                        break;
                    case 87:
                        message.is_unable_to_miss = reader.bool();
                        break;
                    case 88:
                        message.has_scepter = reader.bool();
                        break;
                    case 90:
                        if (!(message.abilities && message.abilities.length))
                            message.abilities = [];
                        message.abilities.push($root.CMsgBotWorldState.Ability.decode(reader, reader.uint32()));
                        break;
                    case 91:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.CMsgBotWorldState.Ability.decode(reader, reader.uint32()));
                        break;
                    case 92:
                        if (!(message.modifiers && message.modifiers.length))
                            message.modifiers = [];
                        message.modifiers.push($root.CMsgBotWorldState.Modifier.decode(reader, reader.uint32()));
                        break;
                    case 93:
                        if (!(message.incoming_tracking_projectiles && message.incoming_tracking_projectiles.length))
                            message.incoming_tracking_projectiles = [];
                        message.incoming_tracking_projectiles.push($root.CMsgBotWorldState.TrackingProjectile.decode(reader, reader.uint32()));
                        break;
                    case 100:
                        message.action_type = reader.uint32();
                        break;
                    case 101:
                        message.ability_target_handle = reader.uint32();
                        break;
                    case 103:
                        message.ability_target_name = reader.string();
                        break;
                    case 102:
                        message.is_using_ability = reader.bool();
                        break;
                    case 110:
                        message.primary_attribute = reader.uint32();
                        break;
                    case 111:
                        message.is_illusion = reader.bool();
                        break;
                    case 112:
                        message.respawn_time = reader.float();
                        break;
                    case 113:
                        message.buyback_cost = reader.uint32();
                        break;
                    case 114:
                        message.buyback_cooldown = reader.float();
                        break;
                    case 115:
                        message.spell_amplification = reader.float();
                        break;
                    case 116:
                        message.armor = reader.float();
                        break;
                    case 117:
                        message.magic_resist = reader.float();
                        break;
                    case 118:
                        message.evasion = reader.float();
                        break;
                    case 120:
                        message.xp_needed_to_level = reader.uint32();
                        break;
                    case 121:
                        message.ability_points = reader.uint32();
                        break;
                    case 122:
                        message.reliable_gold = reader.int32();
                        break;
                    case 123:
                        message.unreliable_gold = reader.int32();
                        break;
                    case 124:
                        message.last_hits = reader.uint32();
                        break;
                    case 125:
                        message.denies = reader.uint32();
                        break;
                    case 126:
                        message.net_worth = reader.uint32();
                        break;
                    case 127:
                        message.strength = reader.uint32();
                        break;
                    case 128:
                        message.agility = reader.uint32();
                        break;
                    case 129:
                        message.intelligence = reader.uint32();
                        break;
                    case 130:
                        message.remaining_lifespan = reader.float();
                        break;
                    case 140:
                        message.flying_courier = reader.bool();
                        break;
                    case 150:
                        message.shrine_cooldown = reader.float();
                        break;
                    case 151:
                        message.is_shrine_healing = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Unit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Unit} Unit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Unit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Unit message.
             * @function verify
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Unit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.handle != null && message.hasOwnProperty("handle"))
                    if (!$util.isInteger(message.handle))
                        return "handle: integer expected";
                if (message.unit_type != null && message.hasOwnProperty("unit_type"))
                    switch (message.unit_type) {
                    default:
                        return "unit_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                        break;
                    }
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.team_id != null && message.hasOwnProperty("team_id"))
                    if (!$util.isInteger(message.team_id))
                        return "team_id: integer expected";
                if (message.level != null && message.hasOwnProperty("level"))
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.is_alive != null && message.hasOwnProperty("is_alive"))
                    if (typeof message.is_alive !== "boolean")
                        return "is_alive: boolean expected";
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    if (!$util.isInteger(message.player_id))
                        return "player_id: integer expected";
                if (message.bounding_radius != null && message.hasOwnProperty("bounding_radius"))
                    if (!$util.isInteger(message.bounding_radius))
                        return "bounding_radius: integer expected";
                if (message.facing != null && message.hasOwnProperty("facing"))
                    if (!$util.isInteger(message.facing))
                        return "facing: integer expected";
                if (message.ground_height != null && message.hasOwnProperty("ground_height"))
                    if (!$util.isInteger(message.ground_height))
                        return "ground_height: integer expected";
                if (message.vision_range_daytime != null && message.hasOwnProperty("vision_range_daytime"))
                    if (!$util.isInteger(message.vision_range_daytime))
                        return "vision_range_daytime: integer expected";
                if (message.vision_range_nighttime != null && message.hasOwnProperty("vision_range_nighttime"))
                    if (!$util.isInteger(message.vision_range_nighttime))
                        return "vision_range_nighttime: integer expected";
                if (message.health != null && message.hasOwnProperty("health"))
                    if (!$util.isInteger(message.health))
                        return "health: integer expected";
                if (message.health_max != null && message.hasOwnProperty("health_max"))
                    if (!$util.isInteger(message.health_max))
                        return "health_max: integer expected";
                if (message.health_regen != null && message.hasOwnProperty("health_regen"))
                    if (typeof message.health_regen !== "number")
                        return "health_regen: number expected";
                if (message.mana != null && message.hasOwnProperty("mana"))
                    if (!$util.isInteger(message.mana))
                        return "mana: integer expected";
                if (message.mana_max != null && message.hasOwnProperty("mana_max"))
                    if (!$util.isInteger(message.mana_max))
                        return "mana_max: integer expected";
                if (message.mana_regen != null && message.hasOwnProperty("mana_regen"))
                    if (typeof message.mana_regen !== "number")
                        return "mana_regen: number expected";
                if (message.base_movement_speed != null && message.hasOwnProperty("base_movement_speed"))
                    if (!$util.isInteger(message.base_movement_speed))
                        return "base_movement_speed: integer expected";
                if (message.current_movement_speed != null && message.hasOwnProperty("current_movement_speed"))
                    if (!$util.isInteger(message.current_movement_speed))
                        return "current_movement_speed: integer expected";
                if (message.anim_activity != null && message.hasOwnProperty("anim_activity"))
                    if (!$util.isInteger(message.anim_activity))
                        return "anim_activity: integer expected";
                if (message.anim_cycle != null && message.hasOwnProperty("anim_cycle"))
                    if (typeof message.anim_cycle !== "number")
                        return "anim_cycle: number expected";
                if (message.base_damage != null && message.hasOwnProperty("base_damage"))
                    if (!$util.isInteger(message.base_damage))
                        return "base_damage: integer expected";
                if (message.base_damage_variance != null && message.hasOwnProperty("base_damage_variance"))
                    if (!$util.isInteger(message.base_damage_variance))
                        return "base_damage_variance: integer expected";
                if (message.bonus_damage != null && message.hasOwnProperty("bonus_damage"))
                    if (!$util.isInteger(message.bonus_damage))
                        return "bonus_damage: integer expected";
                if (message.attack_damage != null && message.hasOwnProperty("attack_damage"))
                    if (!$util.isInteger(message.attack_damage))
                        return "attack_damage: integer expected";
                if (message.attack_range != null && message.hasOwnProperty("attack_range"))
                    if (!$util.isInteger(message.attack_range))
                        return "attack_range: integer expected";
                if (message.attack_speed != null && message.hasOwnProperty("attack_speed"))
                    if (typeof message.attack_speed !== "number")
                        return "attack_speed: number expected";
                if (message.attack_anim_point != null && message.hasOwnProperty("attack_anim_point"))
                    if (typeof message.attack_anim_point !== "number")
                        return "attack_anim_point: number expected";
                if (message.attack_acquisition_range != null && message.hasOwnProperty("attack_acquisition_range"))
                    if (!$util.isInteger(message.attack_acquisition_range))
                        return "attack_acquisition_range: integer expected";
                if (message.attack_projectile_speed != null && message.hasOwnProperty("attack_projectile_speed"))
                    if (!$util.isInteger(message.attack_projectile_speed))
                        return "attack_projectile_speed: integer expected";
                if (message.attack_target_handle != null && message.hasOwnProperty("attack_target_handle"))
                    if (!$util.isInteger(message.attack_target_handle))
                        return "attack_target_handle: integer expected";
                if (message.attack_target_name != null && message.hasOwnProperty("attack_target_name"))
                    if (!$util.isString(message.attack_target_name))
                        return "attack_target_name: string expected";
                if (message.attacks_per_second != null && message.hasOwnProperty("attacks_per_second"))
                    if (!$util.isInteger(message.attacks_per_second))
                        return "attacks_per_second: integer expected";
                if (message.last_attack_time != null && message.hasOwnProperty("last_attack_time"))
                    if (typeof message.last_attack_time !== "number")
                        return "last_attack_time: number expected";
                if (message.bounty_xp != null && message.hasOwnProperty("bounty_xp"))
                    if (!$util.isInteger(message.bounty_xp))
                        return "bounty_xp: integer expected";
                if (message.bounty_gold_min != null && message.hasOwnProperty("bounty_gold_min"))
                    if (!$util.isInteger(message.bounty_gold_min))
                        return "bounty_gold_min: integer expected";
                if (message.bounty_gold_max != null && message.hasOwnProperty("bounty_gold_max"))
                    if (!$util.isInteger(message.bounty_gold_max))
                        return "bounty_gold_max: integer expected";
                if (message.is_channeling != null && message.hasOwnProperty("is_channeling"))
                    if (typeof message.is_channeling !== "boolean")
                        return "is_channeling: boolean expected";
                if (message.active_ability_handle != null && message.hasOwnProperty("active_ability_handle"))
                    if (!$util.isInteger(message.active_ability_handle))
                        return "active_ability_handle: integer expected";
                if (message.is_attack_immune != null && message.hasOwnProperty("is_attack_immune"))
                    if (typeof message.is_attack_immune !== "boolean")
                        return "is_attack_immune: boolean expected";
                if (message.is_blind != null && message.hasOwnProperty("is_blind"))
                    if (typeof message.is_blind !== "boolean")
                        return "is_blind: boolean expected";
                if (message.is_block_disabled != null && message.hasOwnProperty("is_block_disabled"))
                    if (typeof message.is_block_disabled !== "boolean")
                        return "is_block_disabled: boolean expected";
                if (message.is_disarmed != null && message.hasOwnProperty("is_disarmed"))
                    if (typeof message.is_disarmed !== "boolean")
                        return "is_disarmed: boolean expected";
                if (message.is_dominated != null && message.hasOwnProperty("is_dominated"))
                    if (typeof message.is_dominated !== "boolean")
                        return "is_dominated: boolean expected";
                if (message.is_evade_disabled != null && message.hasOwnProperty("is_evade_disabled"))
                    if (typeof message.is_evade_disabled !== "boolean")
                        return "is_evade_disabled: boolean expected";
                if (message.is_hexed != null && message.hasOwnProperty("is_hexed"))
                    if (typeof message.is_hexed !== "boolean")
                        return "is_hexed: boolean expected";
                if (message.is_invisible != null && message.hasOwnProperty("is_invisible"))
                    if (typeof message.is_invisible !== "boolean")
                        return "is_invisible: boolean expected";
                if (message.is_invulnerable != null && message.hasOwnProperty("is_invulnerable"))
                    if (typeof message.is_invulnerable !== "boolean")
                        return "is_invulnerable: boolean expected";
                if (message.is_magic_immune != null && message.hasOwnProperty("is_magic_immune"))
                    if (typeof message.is_magic_immune !== "boolean")
                        return "is_magic_immune: boolean expected";
                if (message.is_muted != null && message.hasOwnProperty("is_muted"))
                    if (typeof message.is_muted !== "boolean")
                        return "is_muted: boolean expected";
                if (message.is_nightmared != null && message.hasOwnProperty("is_nightmared"))
                    if (typeof message.is_nightmared !== "boolean")
                        return "is_nightmared: boolean expected";
                if (message.is_rooted != null && message.hasOwnProperty("is_rooted"))
                    if (typeof message.is_rooted !== "boolean")
                        return "is_rooted: boolean expected";
                if (message.is_silenced != null && message.hasOwnProperty("is_silenced"))
                    if (typeof message.is_silenced !== "boolean")
                        return "is_silenced: boolean expected";
                if (message.is_specially_deniable != null && message.hasOwnProperty("is_specially_deniable"))
                    if (typeof message.is_specially_deniable !== "boolean")
                        return "is_specially_deniable: boolean expected";
                if (message.is_stunned != null && message.hasOwnProperty("is_stunned"))
                    if (typeof message.is_stunned !== "boolean")
                        return "is_stunned: boolean expected";
                if (message.is_unable_to_miss != null && message.hasOwnProperty("is_unable_to_miss"))
                    if (typeof message.is_unable_to_miss !== "boolean")
                        return "is_unable_to_miss: boolean expected";
                if (message.has_scepter != null && message.hasOwnProperty("has_scepter"))
                    if (typeof message.has_scepter !== "boolean")
                        return "has_scepter: boolean expected";
                if (message.abilities != null && message.hasOwnProperty("abilities")) {
                    if (!Array.isArray(message.abilities))
                        return "abilities: array expected";
                    for (var i = 0; i < message.abilities.length; ++i) {
                        var error = $root.CMsgBotWorldState.Ability.verify(message.abilities[i]);
                        if (error)
                            return "abilities." + error;
                    }
                }
                if (message.items != null && message.hasOwnProperty("items")) {
                    if (!Array.isArray(message.items))
                        return "items: array expected";
                    for (var i = 0; i < message.items.length; ++i) {
                        var error = $root.CMsgBotWorldState.Ability.verify(message.items[i]);
                        if (error)
                            return "items." + error;
                    }
                }
                if (message.modifiers != null && message.hasOwnProperty("modifiers")) {
                    if (!Array.isArray(message.modifiers))
                        return "modifiers: array expected";
                    for (var i = 0; i < message.modifiers.length; ++i) {
                        var error = $root.CMsgBotWorldState.Modifier.verify(message.modifiers[i]);
                        if (error)
                            return "modifiers." + error;
                    }
                }
                if (message.incoming_tracking_projectiles != null && message.hasOwnProperty("incoming_tracking_projectiles")) {
                    if (!Array.isArray(message.incoming_tracking_projectiles))
                        return "incoming_tracking_projectiles: array expected";
                    for (var i = 0; i < message.incoming_tracking_projectiles.length; ++i) {
                        var error = $root.CMsgBotWorldState.TrackingProjectile.verify(message.incoming_tracking_projectiles[i]);
                        if (error)
                            return "incoming_tracking_projectiles." + error;
                    }
                }
                if (message.action_type != null && message.hasOwnProperty("action_type"))
                    if (!$util.isInteger(message.action_type))
                        return "action_type: integer expected";
                if (message.ability_target_handle != null && message.hasOwnProperty("ability_target_handle"))
                    if (!$util.isInteger(message.ability_target_handle))
                        return "ability_target_handle: integer expected";
                if (message.ability_target_name != null && message.hasOwnProperty("ability_target_name"))
                    if (!$util.isString(message.ability_target_name))
                        return "ability_target_name: string expected";
                if (message.is_using_ability != null && message.hasOwnProperty("is_using_ability"))
                    if (typeof message.is_using_ability !== "boolean")
                        return "is_using_ability: boolean expected";
                if (message.primary_attribute != null && message.hasOwnProperty("primary_attribute"))
                    if (!$util.isInteger(message.primary_attribute))
                        return "primary_attribute: integer expected";
                if (message.is_illusion != null && message.hasOwnProperty("is_illusion"))
                    if (typeof message.is_illusion !== "boolean")
                        return "is_illusion: boolean expected";
                if (message.respawn_time != null && message.hasOwnProperty("respawn_time"))
                    if (typeof message.respawn_time !== "number")
                        return "respawn_time: number expected";
                if (message.buyback_cost != null && message.hasOwnProperty("buyback_cost"))
                    if (!$util.isInteger(message.buyback_cost))
                        return "buyback_cost: integer expected";
                if (message.buyback_cooldown != null && message.hasOwnProperty("buyback_cooldown"))
                    if (typeof message.buyback_cooldown !== "number")
                        return "buyback_cooldown: number expected";
                if (message.spell_amplification != null && message.hasOwnProperty("spell_amplification"))
                    if (typeof message.spell_amplification !== "number")
                        return "spell_amplification: number expected";
                if (message.armor != null && message.hasOwnProperty("armor"))
                    if (typeof message.armor !== "number")
                        return "armor: number expected";
                if (message.magic_resist != null && message.hasOwnProperty("magic_resist"))
                    if (typeof message.magic_resist !== "number")
                        return "magic_resist: number expected";
                if (message.evasion != null && message.hasOwnProperty("evasion"))
                    if (typeof message.evasion !== "number")
                        return "evasion: number expected";
                if (message.xp_needed_to_level != null && message.hasOwnProperty("xp_needed_to_level"))
                    if (!$util.isInteger(message.xp_needed_to_level))
                        return "xp_needed_to_level: integer expected";
                if (message.ability_points != null && message.hasOwnProperty("ability_points"))
                    if (!$util.isInteger(message.ability_points))
                        return "ability_points: integer expected";
                if (message.reliable_gold != null && message.hasOwnProperty("reliable_gold"))
                    if (!$util.isInteger(message.reliable_gold))
                        return "reliable_gold: integer expected";
                if (message.unreliable_gold != null && message.hasOwnProperty("unreliable_gold"))
                    if (!$util.isInteger(message.unreliable_gold))
                        return "unreliable_gold: integer expected";
                if (message.last_hits != null && message.hasOwnProperty("last_hits"))
                    if (!$util.isInteger(message.last_hits))
                        return "last_hits: integer expected";
                if (message.denies != null && message.hasOwnProperty("denies"))
                    if (!$util.isInteger(message.denies))
                        return "denies: integer expected";
                if (message.net_worth != null && message.hasOwnProperty("net_worth"))
                    if (!$util.isInteger(message.net_worth))
                        return "net_worth: integer expected";
                if (message.strength != null && message.hasOwnProperty("strength"))
                    if (!$util.isInteger(message.strength))
                        return "strength: integer expected";
                if (message.agility != null && message.hasOwnProperty("agility"))
                    if (!$util.isInteger(message.agility))
                        return "agility: integer expected";
                if (message.intelligence != null && message.hasOwnProperty("intelligence"))
                    if (!$util.isInteger(message.intelligence))
                        return "intelligence: integer expected";
                if (message.remaining_lifespan != null && message.hasOwnProperty("remaining_lifespan"))
                    if (typeof message.remaining_lifespan !== "number")
                        return "remaining_lifespan: number expected";
                if (message.flying_courier != null && message.hasOwnProperty("flying_courier"))
                    if (typeof message.flying_courier !== "boolean")
                        return "flying_courier: boolean expected";
                if (message.shrine_cooldown != null && message.hasOwnProperty("shrine_cooldown"))
                    if (typeof message.shrine_cooldown !== "number")
                        return "shrine_cooldown: number expected";
                if (message.is_shrine_healing != null && message.hasOwnProperty("is_shrine_healing"))
                    if (typeof message.is_shrine_healing !== "boolean")
                        return "is_shrine_healing: boolean expected";
                return null;
            };
    
            /**
             * Creates an Unit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Unit} Unit
             */
            Unit.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Unit)
                    return object;
                var message = new $root.CMsgBotWorldState.Unit();
                if (object.handle != null)
                    message.handle = object.handle >>> 0;
                switch (object.unit_type) {
                case "INVALID":
                case 0:
                    message.unit_type = 0;
                    break;
                case "HERO":
                case 1:
                    message.unit_type = 1;
                    break;
                case "CREEP_HERO":
                case 2:
                    message.unit_type = 2;
                    break;
                case "LANE_CREEP":
                case 3:
                    message.unit_type = 3;
                    break;
                case "JUNGLE_CREEP":
                case 4:
                    message.unit_type = 4;
                    break;
                case "ROSHAN":
                case 5:
                    message.unit_type = 5;
                    break;
                case "TOWER":
                case 6:
                    message.unit_type = 6;
                    break;
                case "BARRACKS":
                case 7:
                    message.unit_type = 7;
                    break;
                case "SHRINE":
                case 8:
                    message.unit_type = 8;
                    break;
                case "FORT":
                case 9:
                    message.unit_type = 9;
                    break;
                case "BUILDING":
                case 10:
                    message.unit_type = 10;
                    break;
                case "COURIER":
                case 11:
                    message.unit_type = 11;
                    break;
                case "WARD":
                case 12:
                    message.unit_type = 12;
                    break;
                }
                if (object.name != null)
                    message.name = String(object.name);
                if (object.team_id != null)
                    message.team_id = object.team_id >>> 0;
                if (object.level != null)
                    message.level = object.level >>> 0;
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".CMsgBotWorldState.Unit.location: object expected");
                    message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                }
                if (object.is_alive != null)
                    message.is_alive = Boolean(object.is_alive);
                if (object.player_id != null)
                    message.player_id = object.player_id | 0;
                if (object.bounding_radius != null)
                    message.bounding_radius = object.bounding_radius | 0;
                if (object.facing != null)
                    message.facing = object.facing | 0;
                if (object.ground_height != null)
                    message.ground_height = object.ground_height >>> 0;
                if (object.vision_range_daytime != null)
                    message.vision_range_daytime = object.vision_range_daytime >>> 0;
                if (object.vision_range_nighttime != null)
                    message.vision_range_nighttime = object.vision_range_nighttime >>> 0;
                if (object.health != null)
                    message.health = object.health | 0;
                if (object.health_max != null)
                    message.health_max = object.health_max | 0;
                if (object.health_regen != null)
                    message.health_regen = Number(object.health_regen);
                if (object.mana != null)
                    message.mana = object.mana | 0;
                if (object.mana_max != null)
                    message.mana_max = object.mana_max | 0;
                if (object.mana_regen != null)
                    message.mana_regen = Number(object.mana_regen);
                if (object.base_movement_speed != null)
                    message.base_movement_speed = object.base_movement_speed | 0;
                if (object.current_movement_speed != null)
                    message.current_movement_speed = object.current_movement_speed | 0;
                if (object.anim_activity != null)
                    message.anim_activity = object.anim_activity | 0;
                if (object.anim_cycle != null)
                    message.anim_cycle = Number(object.anim_cycle);
                if (object.base_damage != null)
                    message.base_damage = object.base_damage | 0;
                if (object.base_damage_variance != null)
                    message.base_damage_variance = object.base_damage_variance | 0;
                if (object.bonus_damage != null)
                    message.bonus_damage = object.bonus_damage | 0;
                if (object.attack_damage != null)
                    message.attack_damage = object.attack_damage | 0;
                if (object.attack_range != null)
                    message.attack_range = object.attack_range | 0;
                if (object.attack_speed != null)
                    message.attack_speed = Number(object.attack_speed);
                if (object.attack_anim_point != null)
                    message.attack_anim_point = Number(object.attack_anim_point);
                if (object.attack_acquisition_range != null)
                    message.attack_acquisition_range = object.attack_acquisition_range | 0;
                if (object.attack_projectile_speed != null)
                    message.attack_projectile_speed = object.attack_projectile_speed | 0;
                if (object.attack_target_handle != null)
                    message.attack_target_handle = object.attack_target_handle >>> 0;
                if (object.attack_target_name != null)
                    message.attack_target_name = String(object.attack_target_name);
                if (object.attacks_per_second != null)
                    message.attacks_per_second = object.attacks_per_second | 0;
                if (object.last_attack_time != null)
                    message.last_attack_time = Number(object.last_attack_time);
                if (object.bounty_xp != null)
                    message.bounty_xp = object.bounty_xp >>> 0;
                if (object.bounty_gold_min != null)
                    message.bounty_gold_min = object.bounty_gold_min >>> 0;
                if (object.bounty_gold_max != null)
                    message.bounty_gold_max = object.bounty_gold_max >>> 0;
                if (object.is_channeling != null)
                    message.is_channeling = Boolean(object.is_channeling);
                if (object.active_ability_handle != null)
                    message.active_ability_handle = object.active_ability_handle >>> 0;
                if (object.is_attack_immune != null)
                    message.is_attack_immune = Boolean(object.is_attack_immune);
                if (object.is_blind != null)
                    message.is_blind = Boolean(object.is_blind);
                if (object.is_block_disabled != null)
                    message.is_block_disabled = Boolean(object.is_block_disabled);
                if (object.is_disarmed != null)
                    message.is_disarmed = Boolean(object.is_disarmed);
                if (object.is_dominated != null)
                    message.is_dominated = Boolean(object.is_dominated);
                if (object.is_evade_disabled != null)
                    message.is_evade_disabled = Boolean(object.is_evade_disabled);
                if (object.is_hexed != null)
                    message.is_hexed = Boolean(object.is_hexed);
                if (object.is_invisible != null)
                    message.is_invisible = Boolean(object.is_invisible);
                if (object.is_invulnerable != null)
                    message.is_invulnerable = Boolean(object.is_invulnerable);
                if (object.is_magic_immune != null)
                    message.is_magic_immune = Boolean(object.is_magic_immune);
                if (object.is_muted != null)
                    message.is_muted = Boolean(object.is_muted);
                if (object.is_nightmared != null)
                    message.is_nightmared = Boolean(object.is_nightmared);
                if (object.is_rooted != null)
                    message.is_rooted = Boolean(object.is_rooted);
                if (object.is_silenced != null)
                    message.is_silenced = Boolean(object.is_silenced);
                if (object.is_specially_deniable != null)
                    message.is_specially_deniable = Boolean(object.is_specially_deniable);
                if (object.is_stunned != null)
                    message.is_stunned = Boolean(object.is_stunned);
                if (object.is_unable_to_miss != null)
                    message.is_unable_to_miss = Boolean(object.is_unable_to_miss);
                if (object.has_scepter != null)
                    message.has_scepter = Boolean(object.has_scepter);
                if (object.abilities) {
                    if (!Array.isArray(object.abilities))
                        throw TypeError(".CMsgBotWorldState.Unit.abilities: array expected");
                    message.abilities = [];
                    for (var i = 0; i < object.abilities.length; ++i) {
                        if (typeof object.abilities[i] !== "object")
                            throw TypeError(".CMsgBotWorldState.Unit.abilities: object expected");
                        message.abilities[i] = $root.CMsgBotWorldState.Ability.fromObject(object.abilities[i]);
                    }
                }
                if (object.items) {
                    if (!Array.isArray(object.items))
                        throw TypeError(".CMsgBotWorldState.Unit.items: array expected");
                    message.items = [];
                    for (var i = 0; i < object.items.length; ++i) {
                        if (typeof object.items[i] !== "object")
                            throw TypeError(".CMsgBotWorldState.Unit.items: object expected");
                        message.items[i] = $root.CMsgBotWorldState.Ability.fromObject(object.items[i]);
                    }
                }
                if (object.modifiers) {
                    if (!Array.isArray(object.modifiers))
                        throw TypeError(".CMsgBotWorldState.Unit.modifiers: array expected");
                    message.modifiers = [];
                    for (var i = 0; i < object.modifiers.length; ++i) {
                        if (typeof object.modifiers[i] !== "object")
                            throw TypeError(".CMsgBotWorldState.Unit.modifiers: object expected");
                        message.modifiers[i] = $root.CMsgBotWorldState.Modifier.fromObject(object.modifiers[i]);
                    }
                }
                if (object.incoming_tracking_projectiles) {
                    if (!Array.isArray(object.incoming_tracking_projectiles))
                        throw TypeError(".CMsgBotWorldState.Unit.incoming_tracking_projectiles: array expected");
                    message.incoming_tracking_projectiles = [];
                    for (var i = 0; i < object.incoming_tracking_projectiles.length; ++i) {
                        if (typeof object.incoming_tracking_projectiles[i] !== "object")
                            throw TypeError(".CMsgBotWorldState.Unit.incoming_tracking_projectiles: object expected");
                        message.incoming_tracking_projectiles[i] = $root.CMsgBotWorldState.TrackingProjectile.fromObject(object.incoming_tracking_projectiles[i]);
                    }
                }
                if (object.action_type != null)
                    message.action_type = object.action_type >>> 0;
                if (object.ability_target_handle != null)
                    message.ability_target_handle = object.ability_target_handle >>> 0;
                if (object.ability_target_name != null)
                    message.ability_target_name = String(object.ability_target_name);
                if (object.is_using_ability != null)
                    message.is_using_ability = Boolean(object.is_using_ability);
                if (object.primary_attribute != null)
                    message.primary_attribute = object.primary_attribute >>> 0;
                if (object.is_illusion != null)
                    message.is_illusion = Boolean(object.is_illusion);
                if (object.respawn_time != null)
                    message.respawn_time = Number(object.respawn_time);
                if (object.buyback_cost != null)
                    message.buyback_cost = object.buyback_cost >>> 0;
                if (object.buyback_cooldown != null)
                    message.buyback_cooldown = Number(object.buyback_cooldown);
                if (object.spell_amplification != null)
                    message.spell_amplification = Number(object.spell_amplification);
                if (object.armor != null)
                    message.armor = Number(object.armor);
                if (object.magic_resist != null)
                    message.magic_resist = Number(object.magic_resist);
                if (object.evasion != null)
                    message.evasion = Number(object.evasion);
                if (object.xp_needed_to_level != null)
                    message.xp_needed_to_level = object.xp_needed_to_level >>> 0;
                if (object.ability_points != null)
                    message.ability_points = object.ability_points >>> 0;
                if (object.reliable_gold != null)
                    message.reliable_gold = object.reliable_gold | 0;
                if (object.unreliable_gold != null)
                    message.unreliable_gold = object.unreliable_gold | 0;
                if (object.last_hits != null)
                    message.last_hits = object.last_hits >>> 0;
                if (object.denies != null)
                    message.denies = object.denies >>> 0;
                if (object.net_worth != null)
                    message.net_worth = object.net_worth >>> 0;
                if (object.strength != null)
                    message.strength = object.strength >>> 0;
                if (object.agility != null)
                    message.agility = object.agility >>> 0;
                if (object.intelligence != null)
                    message.intelligence = object.intelligence >>> 0;
                if (object.remaining_lifespan != null)
                    message.remaining_lifespan = Number(object.remaining_lifespan);
                if (object.flying_courier != null)
                    message.flying_courier = Boolean(object.flying_courier);
                if (object.shrine_cooldown != null)
                    message.shrine_cooldown = Number(object.shrine_cooldown);
                if (object.is_shrine_healing != null)
                    message.is_shrine_healing = Boolean(object.is_shrine_healing);
                return message;
            };
    
            /**
             * Creates a plain object from an Unit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Unit
             * @static
             * @param {CMsgBotWorldState.Unit} message Unit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Unit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.abilities = [];
                    object.items = [];
                    object.modifiers = [];
                    object.incoming_tracking_projectiles = [];
                }
                if (options.defaults) {
                    object.handle = 0;
                    object.unit_type = options.enums === String ? "INVALID" : 0;
                    object.name = "";
                    object.team_id = 0;
                    object.level = 0;
                    object.location = null;
                    object.is_alive = false;
                    object.player_id = 0;
                    object.bounding_radius = 0;
                    object.facing = 0;
                    object.ground_height = 0;
                    object.vision_range_daytime = 0;
                    object.vision_range_nighttime = 0;
                    object.health = 0;
                    object.health_max = 0;
                    object.health_regen = 0;
                    object.mana = 0;
                    object.mana_max = 0;
                    object.mana_regen = 0;
                    object.base_movement_speed = 0;
                    object.current_movement_speed = 0;
                    object.anim_activity = 0;
                    object.anim_cycle = 0;
                    object.base_damage = 0;
                    object.base_damage_variance = 0;
                    object.bonus_damage = 0;
                    object.attack_damage = 0;
                    object.attack_range = 0;
                    object.attack_speed = 0;
                    object.attack_anim_point = 0;
                    object.attack_acquisition_range = 0;
                    object.attack_projectile_speed = 0;
                    object.attack_target_handle = 0;
                    object.attacks_per_second = -1;
                    object.last_attack_time = -1;
                    object.attack_target_name = "";
                    object.bounty_xp = 0;
                    object.bounty_gold_min = 0;
                    object.bounty_gold_max = 0;
                    object.is_channeling = false;
                    object.active_ability_handle = 0;
                    object.is_attack_immune = false;
                    object.is_blind = false;
                    object.is_block_disabled = false;
                    object.is_disarmed = false;
                    object.is_dominated = false;
                    object.is_evade_disabled = false;
                    object.is_hexed = false;
                    object.is_invisible = false;
                    object.is_invulnerable = false;
                    object.is_magic_immune = false;
                    object.is_muted = false;
                    object.is_nightmared = false;
                    object.is_rooted = false;
                    object.is_silenced = false;
                    object.is_specially_deniable = false;
                    object.is_stunned = false;
                    object.is_unable_to_miss = false;
                    object.has_scepter = false;
                    object.action_type = 0;
                    object.ability_target_handle = 0;
                    object.is_using_ability = false;
                    object.ability_target_name = "";
                    object.primary_attribute = 0;
                    object.is_illusion = false;
                    object.respawn_time = 0;
                    object.buyback_cost = 0;
                    object.buyback_cooldown = 0;
                    object.spell_amplification = 0;
                    object.armor = 0;
                    object.magic_resist = 0;
                    object.evasion = 0;
                    object.xp_needed_to_level = 0;
                    object.ability_points = 0;
                    object.reliable_gold = -1;
                    object.unreliable_gold = -1;
                    object.last_hits = 0;
                    object.denies = 0;
                    object.net_worth = 0;
                    object.strength = 0;
                    object.agility = 0;
                    object.intelligence = 0;
                    object.remaining_lifespan = 0;
                    object.flying_courier = false;
                    object.shrine_cooldown = 0;
                    object.is_shrine_healing = false;
                }
                if (message.handle != null && message.hasOwnProperty("handle"))
                    object.handle = message.handle;
                if (message.unit_type != null && message.hasOwnProperty("unit_type"))
                    object.unit_type = options.enums === String ? $root.CMsgBotWorldState.UnitType[message.unit_type] : message.unit_type;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.team_id != null && message.hasOwnProperty("team_id"))
                    object.team_id = message.team_id;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                if (message.is_alive != null && message.hasOwnProperty("is_alive"))
                    object.is_alive = message.is_alive;
                if (message.player_id != null && message.hasOwnProperty("player_id"))
                    object.player_id = message.player_id;
                if (message.bounding_radius != null && message.hasOwnProperty("bounding_radius"))
                    object.bounding_radius = message.bounding_radius;
                if (message.facing != null && message.hasOwnProperty("facing"))
                    object.facing = message.facing;
                if (message.ground_height != null && message.hasOwnProperty("ground_height"))
                    object.ground_height = message.ground_height;
                if (message.vision_range_daytime != null && message.hasOwnProperty("vision_range_daytime"))
                    object.vision_range_daytime = message.vision_range_daytime;
                if (message.vision_range_nighttime != null && message.hasOwnProperty("vision_range_nighttime"))
                    object.vision_range_nighttime = message.vision_range_nighttime;
                if (message.health != null && message.hasOwnProperty("health"))
                    object.health = message.health;
                if (message.health_max != null && message.hasOwnProperty("health_max"))
                    object.health_max = message.health_max;
                if (message.health_regen != null && message.hasOwnProperty("health_regen"))
                    object.health_regen = options.json && !isFinite(message.health_regen) ? String(message.health_regen) : message.health_regen;
                if (message.mana != null && message.hasOwnProperty("mana"))
                    object.mana = message.mana;
                if (message.mana_max != null && message.hasOwnProperty("mana_max"))
                    object.mana_max = message.mana_max;
                if (message.mana_regen != null && message.hasOwnProperty("mana_regen"))
                    object.mana_regen = options.json && !isFinite(message.mana_regen) ? String(message.mana_regen) : message.mana_regen;
                if (message.base_movement_speed != null && message.hasOwnProperty("base_movement_speed"))
                    object.base_movement_speed = message.base_movement_speed;
                if (message.current_movement_speed != null && message.hasOwnProperty("current_movement_speed"))
                    object.current_movement_speed = message.current_movement_speed;
                if (message.anim_activity != null && message.hasOwnProperty("anim_activity"))
                    object.anim_activity = message.anim_activity;
                if (message.anim_cycle != null && message.hasOwnProperty("anim_cycle"))
                    object.anim_cycle = options.json && !isFinite(message.anim_cycle) ? String(message.anim_cycle) : message.anim_cycle;
                if (message.base_damage != null && message.hasOwnProperty("base_damage"))
                    object.base_damage = message.base_damage;
                if (message.base_damage_variance != null && message.hasOwnProperty("base_damage_variance"))
                    object.base_damage_variance = message.base_damage_variance;
                if (message.bonus_damage != null && message.hasOwnProperty("bonus_damage"))
                    object.bonus_damage = message.bonus_damage;
                if (message.attack_damage != null && message.hasOwnProperty("attack_damage"))
                    object.attack_damage = message.attack_damage;
                if (message.attack_range != null && message.hasOwnProperty("attack_range"))
                    object.attack_range = message.attack_range;
                if (message.attack_speed != null && message.hasOwnProperty("attack_speed"))
                    object.attack_speed = options.json && !isFinite(message.attack_speed) ? String(message.attack_speed) : message.attack_speed;
                if (message.attack_anim_point != null && message.hasOwnProperty("attack_anim_point"))
                    object.attack_anim_point = options.json && !isFinite(message.attack_anim_point) ? String(message.attack_anim_point) : message.attack_anim_point;
                if (message.attack_acquisition_range != null && message.hasOwnProperty("attack_acquisition_range"))
                    object.attack_acquisition_range = message.attack_acquisition_range;
                if (message.attack_projectile_speed != null && message.hasOwnProperty("attack_projectile_speed"))
                    object.attack_projectile_speed = message.attack_projectile_speed;
                if (message.attack_target_handle != null && message.hasOwnProperty("attack_target_handle"))
                    object.attack_target_handle = message.attack_target_handle;
                if (message.attacks_per_second != null && message.hasOwnProperty("attacks_per_second"))
                    object.attacks_per_second = message.attacks_per_second;
                if (message.last_attack_time != null && message.hasOwnProperty("last_attack_time"))
                    object.last_attack_time = options.json && !isFinite(message.last_attack_time) ? String(message.last_attack_time) : message.last_attack_time;
                if (message.attack_target_name != null && message.hasOwnProperty("attack_target_name"))
                    object.attack_target_name = message.attack_target_name;
                if (message.bounty_xp != null && message.hasOwnProperty("bounty_xp"))
                    object.bounty_xp = message.bounty_xp;
                if (message.bounty_gold_min != null && message.hasOwnProperty("bounty_gold_min"))
                    object.bounty_gold_min = message.bounty_gold_min;
                if (message.bounty_gold_max != null && message.hasOwnProperty("bounty_gold_max"))
                    object.bounty_gold_max = message.bounty_gold_max;
                if (message.is_channeling != null && message.hasOwnProperty("is_channeling"))
                    object.is_channeling = message.is_channeling;
                if (message.active_ability_handle != null && message.hasOwnProperty("active_ability_handle"))
                    object.active_ability_handle = message.active_ability_handle;
                if (message.is_attack_immune != null && message.hasOwnProperty("is_attack_immune"))
                    object.is_attack_immune = message.is_attack_immune;
                if (message.is_blind != null && message.hasOwnProperty("is_blind"))
                    object.is_blind = message.is_blind;
                if (message.is_block_disabled != null && message.hasOwnProperty("is_block_disabled"))
                    object.is_block_disabled = message.is_block_disabled;
                if (message.is_disarmed != null && message.hasOwnProperty("is_disarmed"))
                    object.is_disarmed = message.is_disarmed;
                if (message.is_dominated != null && message.hasOwnProperty("is_dominated"))
                    object.is_dominated = message.is_dominated;
                if (message.is_evade_disabled != null && message.hasOwnProperty("is_evade_disabled"))
                    object.is_evade_disabled = message.is_evade_disabled;
                if (message.is_hexed != null && message.hasOwnProperty("is_hexed"))
                    object.is_hexed = message.is_hexed;
                if (message.is_invisible != null && message.hasOwnProperty("is_invisible"))
                    object.is_invisible = message.is_invisible;
                if (message.is_invulnerable != null && message.hasOwnProperty("is_invulnerable"))
                    object.is_invulnerable = message.is_invulnerable;
                if (message.is_magic_immune != null && message.hasOwnProperty("is_magic_immune"))
                    object.is_magic_immune = message.is_magic_immune;
                if (message.is_muted != null && message.hasOwnProperty("is_muted"))
                    object.is_muted = message.is_muted;
                if (message.is_nightmared != null && message.hasOwnProperty("is_nightmared"))
                    object.is_nightmared = message.is_nightmared;
                if (message.is_rooted != null && message.hasOwnProperty("is_rooted"))
                    object.is_rooted = message.is_rooted;
                if (message.is_silenced != null && message.hasOwnProperty("is_silenced"))
                    object.is_silenced = message.is_silenced;
                if (message.is_specially_deniable != null && message.hasOwnProperty("is_specially_deniable"))
                    object.is_specially_deniable = message.is_specially_deniable;
                if (message.is_stunned != null && message.hasOwnProperty("is_stunned"))
                    object.is_stunned = message.is_stunned;
                if (message.is_unable_to_miss != null && message.hasOwnProperty("is_unable_to_miss"))
                    object.is_unable_to_miss = message.is_unable_to_miss;
                if (message.has_scepter != null && message.hasOwnProperty("has_scepter"))
                    object.has_scepter = message.has_scepter;
                if (message.abilities && message.abilities.length) {
                    object.abilities = [];
                    for (var j = 0; j < message.abilities.length; ++j)
                        object.abilities[j] = $root.CMsgBotWorldState.Ability.toObject(message.abilities[j], options);
                }
                if (message.items && message.items.length) {
                    object.items = [];
                    for (var j = 0; j < message.items.length; ++j)
                        object.items[j] = $root.CMsgBotWorldState.Ability.toObject(message.items[j], options);
                }
                if (message.modifiers && message.modifiers.length) {
                    object.modifiers = [];
                    for (var j = 0; j < message.modifiers.length; ++j)
                        object.modifiers[j] = $root.CMsgBotWorldState.Modifier.toObject(message.modifiers[j], options);
                }
                if (message.incoming_tracking_projectiles && message.incoming_tracking_projectiles.length) {
                    object.incoming_tracking_projectiles = [];
                    for (var j = 0; j < message.incoming_tracking_projectiles.length; ++j)
                        object.incoming_tracking_projectiles[j] = $root.CMsgBotWorldState.TrackingProjectile.toObject(message.incoming_tracking_projectiles[j], options);
                }
                if (message.action_type != null && message.hasOwnProperty("action_type"))
                    object.action_type = message.action_type;
                if (message.ability_target_handle != null && message.hasOwnProperty("ability_target_handle"))
                    object.ability_target_handle = message.ability_target_handle;
                if (message.is_using_ability != null && message.hasOwnProperty("is_using_ability"))
                    object.is_using_ability = message.is_using_ability;
                if (message.ability_target_name != null && message.hasOwnProperty("ability_target_name"))
                    object.ability_target_name = message.ability_target_name;
                if (message.primary_attribute != null && message.hasOwnProperty("primary_attribute"))
                    object.primary_attribute = message.primary_attribute;
                if (message.is_illusion != null && message.hasOwnProperty("is_illusion"))
                    object.is_illusion = message.is_illusion;
                if (message.respawn_time != null && message.hasOwnProperty("respawn_time"))
                    object.respawn_time = options.json && !isFinite(message.respawn_time) ? String(message.respawn_time) : message.respawn_time;
                if (message.buyback_cost != null && message.hasOwnProperty("buyback_cost"))
                    object.buyback_cost = message.buyback_cost;
                if (message.buyback_cooldown != null && message.hasOwnProperty("buyback_cooldown"))
                    object.buyback_cooldown = options.json && !isFinite(message.buyback_cooldown) ? String(message.buyback_cooldown) : message.buyback_cooldown;
                if (message.spell_amplification != null && message.hasOwnProperty("spell_amplification"))
                    object.spell_amplification = options.json && !isFinite(message.spell_amplification) ? String(message.spell_amplification) : message.spell_amplification;
                if (message.armor != null && message.hasOwnProperty("armor"))
                    object.armor = options.json && !isFinite(message.armor) ? String(message.armor) : message.armor;
                if (message.magic_resist != null && message.hasOwnProperty("magic_resist"))
                    object.magic_resist = options.json && !isFinite(message.magic_resist) ? String(message.magic_resist) : message.magic_resist;
                if (message.evasion != null && message.hasOwnProperty("evasion"))
                    object.evasion = options.json && !isFinite(message.evasion) ? String(message.evasion) : message.evasion;
                if (message.xp_needed_to_level != null && message.hasOwnProperty("xp_needed_to_level"))
                    object.xp_needed_to_level = message.xp_needed_to_level;
                if (message.ability_points != null && message.hasOwnProperty("ability_points"))
                    object.ability_points = message.ability_points;
                if (message.reliable_gold != null && message.hasOwnProperty("reliable_gold"))
                    object.reliable_gold = message.reliable_gold;
                if (message.unreliable_gold != null && message.hasOwnProperty("unreliable_gold"))
                    object.unreliable_gold = message.unreliable_gold;
                if (message.last_hits != null && message.hasOwnProperty("last_hits"))
                    object.last_hits = message.last_hits;
                if (message.denies != null && message.hasOwnProperty("denies"))
                    object.denies = message.denies;
                if (message.net_worth != null && message.hasOwnProperty("net_worth"))
                    object.net_worth = message.net_worth;
                if (message.strength != null && message.hasOwnProperty("strength"))
                    object.strength = message.strength;
                if (message.agility != null && message.hasOwnProperty("agility"))
                    object.agility = message.agility;
                if (message.intelligence != null && message.hasOwnProperty("intelligence"))
                    object.intelligence = message.intelligence;
                if (message.remaining_lifespan != null && message.hasOwnProperty("remaining_lifespan"))
                    object.remaining_lifespan = options.json && !isFinite(message.remaining_lifespan) ? String(message.remaining_lifespan) : message.remaining_lifespan;
                if (message.flying_courier != null && message.hasOwnProperty("flying_courier"))
                    object.flying_courier = message.flying_courier;
                if (message.shrine_cooldown != null && message.hasOwnProperty("shrine_cooldown"))
                    object.shrine_cooldown = options.json && !isFinite(message.shrine_cooldown) ? String(message.shrine_cooldown) : message.shrine_cooldown;
                if (message.is_shrine_healing != null && message.hasOwnProperty("is_shrine_healing"))
                    object.is_shrine_healing = message.is_shrine_healing;
                return object;
            };
    
            /**
             * Converts this Unit to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Unit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Unit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Unit;
        })();
    
        CMsgBotWorldState.Actions = (function() {
    
            /**
             * Properties of an Actions.
             * @memberof CMsgBotWorldState
             * @interface IActions
             * @property {number|null} [dota_time] Actions dota_time
             * @property {Array.<CMsgBotWorldState.IAction>|null} [actions] Actions actions
             * @property {string|null} [extraData] Actions extraData
             * @property {CMsgBotWorldState.Actions.IOceanAnnotation|null} [oceanAnnotation] Actions oceanAnnotation
             * @property {CMsgBotWorldState.Actions.IHeader|null} [header] Actions header
             */
    
            /**
             * Constructs a new Actions.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an Actions.
             * @implements IActions
             * @constructor
             * @param {CMsgBotWorldState.IActions=} [properties] Properties to set
             */
            function Actions(properties) {
                this.actions = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Actions dota_time.
             * @member {number} dota_time
             * @memberof CMsgBotWorldState.Actions
             * @instance
             */
            Actions.prototype.dota_time = -100;
    
            /**
             * Actions actions.
             * @member {Array.<CMsgBotWorldState.IAction>} actions
             * @memberof CMsgBotWorldState.Actions
             * @instance
             */
            Actions.prototype.actions = $util.emptyArray;
    
            /**
             * Actions extraData.
             * @member {string} extraData
             * @memberof CMsgBotWorldState.Actions
             * @instance
             */
            Actions.prototype.extraData = "";
    
            /**
             * Actions oceanAnnotation.
             * @member {CMsgBotWorldState.Actions.IOceanAnnotation|null|undefined} oceanAnnotation
             * @memberof CMsgBotWorldState.Actions
             * @instance
             */
            Actions.prototype.oceanAnnotation = null;
    
            /**
             * Actions header.
             * @member {CMsgBotWorldState.Actions.IHeader|null|undefined} header
             * @memberof CMsgBotWorldState.Actions
             * @instance
             */
            Actions.prototype.header = null;
    
            /**
             * Creates a new Actions instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {CMsgBotWorldState.IActions=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Actions} Actions instance
             */
            Actions.create = function create(properties) {
                return new Actions(properties);
            };
    
            /**
             * Encodes the specified Actions message. Does not implicitly {@link CMsgBotWorldState.Actions.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {CMsgBotWorldState.IActions} message Actions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Actions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.dota_time != null && Object.hasOwnProperty.call(message, "dota_time"))
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.dota_time);
                if (message.actions != null && message.actions.length)
                    for (var i = 0; i < message.actions.length; ++i)
                        $root.CMsgBotWorldState.Action.encode(message.actions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.extraData != null && Object.hasOwnProperty.call(message, "extraData"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.extraData);
                if (message.oceanAnnotation != null && Object.hasOwnProperty.call(message, "oceanAnnotation"))
                    $root.CMsgBotWorldState.Actions.OceanAnnotation.encode(message.oceanAnnotation, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.CMsgBotWorldState.Actions.Header.encode(message.header, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified Actions message, length delimited. Does not implicitly {@link CMsgBotWorldState.Actions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {CMsgBotWorldState.IActions} message Actions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Actions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Actions message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Actions} Actions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Actions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Actions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.dota_time = reader.float();
                        break;
                    case 2:
                        if (!(message.actions && message.actions.length))
                            message.actions = [];
                        message.actions.push($root.CMsgBotWorldState.Action.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.extraData = reader.string();
                        break;
                    case 4:
                        message.oceanAnnotation = $root.CMsgBotWorldState.Actions.OceanAnnotation.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.header = $root.CMsgBotWorldState.Actions.Header.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Actions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Actions} Actions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Actions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Actions message.
             * @function verify
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Actions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.dota_time != null && message.hasOwnProperty("dota_time"))
                    if (typeof message.dota_time !== "number")
                        return "dota_time: number expected";
                if (message.actions != null && message.hasOwnProperty("actions")) {
                    if (!Array.isArray(message.actions))
                        return "actions: array expected";
                    for (var i = 0; i < message.actions.length; ++i) {
                        var error = $root.CMsgBotWorldState.Action.verify(message.actions[i]);
                        if (error)
                            return "actions." + error;
                    }
                }
                if (message.extraData != null && message.hasOwnProperty("extraData"))
                    if (!$util.isString(message.extraData))
                        return "extraData: string expected";
                if (message.oceanAnnotation != null && message.hasOwnProperty("oceanAnnotation")) {
                    var error = $root.CMsgBotWorldState.Actions.OceanAnnotation.verify(message.oceanAnnotation);
                    if (error)
                        return "oceanAnnotation." + error;
                }
                if (message.header != null && message.hasOwnProperty("header")) {
                    var error = $root.CMsgBotWorldState.Actions.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                return null;
            };
    
            /**
             * Creates an Actions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Actions} Actions
             */
            Actions.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Actions)
                    return object;
                var message = new $root.CMsgBotWorldState.Actions();
                if (object.dota_time != null)
                    message.dota_time = Number(object.dota_time);
                if (object.actions) {
                    if (!Array.isArray(object.actions))
                        throw TypeError(".CMsgBotWorldState.Actions.actions: array expected");
                    message.actions = [];
                    for (var i = 0; i < object.actions.length; ++i) {
                        if (typeof object.actions[i] !== "object")
                            throw TypeError(".CMsgBotWorldState.Actions.actions: object expected");
                        message.actions[i] = $root.CMsgBotWorldState.Action.fromObject(object.actions[i]);
                    }
                }
                if (object.extraData != null)
                    message.extraData = String(object.extraData);
                if (object.oceanAnnotation != null) {
                    if (typeof object.oceanAnnotation !== "object")
                        throw TypeError(".CMsgBotWorldState.Actions.oceanAnnotation: object expected");
                    message.oceanAnnotation = $root.CMsgBotWorldState.Actions.OceanAnnotation.fromObject(object.oceanAnnotation);
                }
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".CMsgBotWorldState.Actions.header: object expected");
                    message.header = $root.CMsgBotWorldState.Actions.Header.fromObject(object.header);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an Actions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Actions
             * @static
             * @param {CMsgBotWorldState.Actions} message Actions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Actions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.actions = [];
                if (options.defaults) {
                    object.dota_time = -100;
                    object.extraData = "";
                    object.oceanAnnotation = null;
                    object.header = null;
                }
                if (message.dota_time != null && message.hasOwnProperty("dota_time"))
                    object.dota_time = options.json && !isFinite(message.dota_time) ? String(message.dota_time) : message.dota_time;
                if (message.actions && message.actions.length) {
                    object.actions = [];
                    for (var j = 0; j < message.actions.length; ++j)
                        object.actions[j] = $root.CMsgBotWorldState.Action.toObject(message.actions[j], options);
                }
                if (message.extraData != null && message.hasOwnProperty("extraData"))
                    object.extraData = message.extraData;
                if (message.oceanAnnotation != null && message.hasOwnProperty("oceanAnnotation"))
                    object.oceanAnnotation = $root.CMsgBotWorldState.Actions.OceanAnnotation.toObject(message.oceanAnnotation, options);
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.CMsgBotWorldState.Actions.Header.toObject(message.header, options);
                return object;
            };
    
            /**
             * Converts this Actions to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Actions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Actions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            Actions.OceanAnnotation = (function() {
    
                /**
                 * Properties of an OceanAnnotation.
                 * @memberof CMsgBotWorldState.Actions
                 * @interface IOceanAnnotation
                 * @property {Array.<CMsgBotWorldState.Actions.OceanAnnotation.IHero>|null} [heroes] OceanAnnotation heroes
                 * @property {string|null} [agentID] OceanAnnotation agentID
                 * @property {Array.<number>|null} [rewards] OceanAnnotation rewards
                 * @property {Array.<string>|null} [reward_names] OceanAnnotation reward_names
                 */
    
                /**
                 * Constructs a new OceanAnnotation.
                 * @memberof CMsgBotWorldState.Actions
                 * @classdesc Represents an OceanAnnotation.
                 * @implements IOceanAnnotation
                 * @constructor
                 * @param {CMsgBotWorldState.Actions.IOceanAnnotation=} [properties] Properties to set
                 */
                function OceanAnnotation(properties) {
                    this.heroes = [];
                    this.rewards = [];
                    this.reward_names = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OceanAnnotation heroes.
                 * @member {Array.<CMsgBotWorldState.Actions.OceanAnnotation.IHero>} heroes
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @instance
                 */
                OceanAnnotation.prototype.heroes = $util.emptyArray;
    
                /**
                 * OceanAnnotation agentID.
                 * @member {string} agentID
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @instance
                 */
                OceanAnnotation.prototype.agentID = "";
    
                /**
                 * OceanAnnotation rewards.
                 * @member {Array.<number>} rewards
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @instance
                 */
                OceanAnnotation.prototype.rewards = $util.emptyArray;
    
                /**
                 * OceanAnnotation reward_names.
                 * @member {Array.<string>} reward_names
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @instance
                 */
                OceanAnnotation.prototype.reward_names = $util.emptyArray;
    
                /**
                 * Creates a new OceanAnnotation instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {CMsgBotWorldState.Actions.IOceanAnnotation=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Actions.OceanAnnotation} OceanAnnotation instance
                 */
                OceanAnnotation.create = function create(properties) {
                    return new OceanAnnotation(properties);
                };
    
                /**
                 * Encodes the specified OceanAnnotation message. Does not implicitly {@link CMsgBotWorldState.Actions.OceanAnnotation.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {CMsgBotWorldState.Actions.IOceanAnnotation} message OceanAnnotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OceanAnnotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.heroes != null && message.heroes.length)
                        for (var i = 0; i < message.heroes.length; ++i)
                            $root.CMsgBotWorldState.Actions.OceanAnnotation.Hero.encode(message.heroes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.agentID != null && Object.hasOwnProperty.call(message, "agentID"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.agentID);
                    if (message.rewards != null && message.rewards.length)
                        for (var i = 0; i < message.rewards.length; ++i)
                            writer.uint32(/* id 6, wireType 5 =*/53).float(message.rewards[i]);
                    if (message.reward_names != null && message.reward_names.length)
                        for (var i = 0; i < message.reward_names.length; ++i)
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.reward_names[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified OceanAnnotation message, length delimited. Does not implicitly {@link CMsgBotWorldState.Actions.OceanAnnotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {CMsgBotWorldState.Actions.IOceanAnnotation} message OceanAnnotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OceanAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OceanAnnotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Actions.OceanAnnotation} OceanAnnotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OceanAnnotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Actions.OceanAnnotation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.heroes && message.heroes.length))
                                message.heroes = [];
                            message.heroes.push($root.CMsgBotWorldState.Actions.OceanAnnotation.Hero.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.agentID = reader.string();
                            break;
                        case 6:
                            if (!(message.rewards && message.rewards.length))
                                message.rewards = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.rewards.push(reader.float());
                            } else
                                message.rewards.push(reader.float());
                            break;
                        case 7:
                            if (!(message.reward_names && message.reward_names.length))
                                message.reward_names = [];
                            message.reward_names.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OceanAnnotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Actions.OceanAnnotation} OceanAnnotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OceanAnnotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OceanAnnotation message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OceanAnnotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.heroes != null && message.hasOwnProperty("heroes")) {
                        if (!Array.isArray(message.heroes))
                            return "heroes: array expected";
                        for (var i = 0; i < message.heroes.length; ++i) {
                            var error = $root.CMsgBotWorldState.Actions.OceanAnnotation.Hero.verify(message.heroes[i]);
                            if (error)
                                return "heroes." + error;
                        }
                    }
                    if (message.agentID != null && message.hasOwnProperty("agentID"))
                        if (!$util.isString(message.agentID))
                            return "agentID: string expected";
                    if (message.rewards != null && message.hasOwnProperty("rewards")) {
                        if (!Array.isArray(message.rewards))
                            return "rewards: array expected";
                        for (var i = 0; i < message.rewards.length; ++i)
                            if (typeof message.rewards[i] !== "number")
                                return "rewards: number[] expected";
                    }
                    if (message.reward_names != null && message.hasOwnProperty("reward_names")) {
                        if (!Array.isArray(message.reward_names))
                            return "reward_names: array expected";
                        for (var i = 0; i < message.reward_names.length; ++i)
                            if (!$util.isString(message.reward_names[i]))
                                return "reward_names: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an OceanAnnotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Actions.OceanAnnotation} OceanAnnotation
                 */
                OceanAnnotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Actions.OceanAnnotation)
                        return object;
                    var message = new $root.CMsgBotWorldState.Actions.OceanAnnotation();
                    if (object.heroes) {
                        if (!Array.isArray(object.heroes))
                            throw TypeError(".CMsgBotWorldState.Actions.OceanAnnotation.heroes: array expected");
                        message.heroes = [];
                        for (var i = 0; i < object.heroes.length; ++i) {
                            if (typeof object.heroes[i] !== "object")
                                throw TypeError(".CMsgBotWorldState.Actions.OceanAnnotation.heroes: object expected");
                            message.heroes[i] = $root.CMsgBotWorldState.Actions.OceanAnnotation.Hero.fromObject(object.heroes[i]);
                        }
                    }
                    if (object.agentID != null)
                        message.agentID = String(object.agentID);
                    if (object.rewards) {
                        if (!Array.isArray(object.rewards))
                            throw TypeError(".CMsgBotWorldState.Actions.OceanAnnotation.rewards: array expected");
                        message.rewards = [];
                        for (var i = 0; i < object.rewards.length; ++i)
                            message.rewards[i] = Number(object.rewards[i]);
                    }
                    if (object.reward_names) {
                        if (!Array.isArray(object.reward_names))
                            throw TypeError(".CMsgBotWorldState.Actions.OceanAnnotation.reward_names: array expected");
                        message.reward_names = [];
                        for (var i = 0; i < object.reward_names.length; ++i)
                            message.reward_names[i] = String(object.reward_names[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OceanAnnotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @static
                 * @param {CMsgBotWorldState.Actions.OceanAnnotation} message OceanAnnotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OceanAnnotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.heroes = [];
                        object.rewards = [];
                        object.reward_names = [];
                    }
                    if (options.defaults)
                        object.agentID = "";
                    if (message.heroes && message.heroes.length) {
                        object.heroes = [];
                        for (var j = 0; j < message.heroes.length; ++j)
                            object.heroes[j] = $root.CMsgBotWorldState.Actions.OceanAnnotation.Hero.toObject(message.heroes[j], options);
                    }
                    if (message.agentID != null && message.hasOwnProperty("agentID"))
                        object.agentID = message.agentID;
                    if (message.rewards && message.rewards.length) {
                        object.rewards = [];
                        for (var j = 0; j < message.rewards.length; ++j)
                            object.rewards[j] = options.json && !isFinite(message.rewards[j]) ? String(message.rewards[j]) : message.rewards[j];
                    }
                    if (message.reward_names && message.reward_names.length) {
                        object.reward_names = [];
                        for (var j = 0; j < message.reward_names.length; ++j)
                            object.reward_names[j] = message.reward_names[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this OceanAnnotation to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OceanAnnotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                OceanAnnotation.Hero = (function() {
    
                    /**
                     * Properties of a Hero.
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                     * @interface IHero
                     * @property {number} playerID Hero playerID
                     * @property {number|null} [valueFunction] Hero valueFunction
                     * @property {number|null} [actionLogp] Hero actionLogp
                     * @property {number|null} [reward] Hero reward
                     * @property {Array.<number>|null} [internalAction] Hero internalAction
                     * @property {string|null} [actionName] Hero actionName
                     * @property {Uint8Array|null} [detailedStats] Hero detailedStats
                     */
    
                    /**
                     * Constructs a new Hero.
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation
                     * @classdesc Represents a Hero.
                     * @implements IHero
                     * @constructor
                     * @param {CMsgBotWorldState.Actions.OceanAnnotation.IHero=} [properties] Properties to set
                     */
                    function Hero(properties) {
                        this.internalAction = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Hero playerID.
                     * @member {number} playerID
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     */
                    Hero.prototype.playerID = 0;
    
                    /**
                     * Hero valueFunction.
                     * @member {number} valueFunction
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     */
                    Hero.prototype.valueFunction = 0;
    
                    /**
                     * Hero actionLogp.
                     * @member {number} actionLogp
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     */
                    Hero.prototype.actionLogp = 0;
    
                    /**
                     * Hero reward.
                     * @member {number} reward
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     */
                    Hero.prototype.reward = 0;
    
                    /**
                     * Hero internalAction.
                     * @member {Array.<number>} internalAction
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     */
                    Hero.prototype.internalAction = $util.emptyArray;
    
                    /**
                     * Hero actionName.
                     * @member {string} actionName
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     */
                    Hero.prototype.actionName = "";
    
                    /**
                     * Hero detailedStats.
                     * @member {Uint8Array} detailedStats
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     */
                    Hero.prototype.detailedStats = $util.newBuffer([]);
    
                    /**
                     * Creates a new Hero instance using the specified properties.
                     * @function create
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {CMsgBotWorldState.Actions.OceanAnnotation.IHero=} [properties] Properties to set
                     * @returns {CMsgBotWorldState.Actions.OceanAnnotation.Hero} Hero instance
                     */
                    Hero.create = function create(properties) {
                        return new Hero(properties);
                    };
    
                    /**
                     * Encodes the specified Hero message. Does not implicitly {@link CMsgBotWorldState.Actions.OceanAnnotation.Hero.verify|verify} messages.
                     * @function encode
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {CMsgBotWorldState.Actions.OceanAnnotation.IHero} message Hero message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hero.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerID);
                        if (message.valueFunction != null && Object.hasOwnProperty.call(message, "valueFunction"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.valueFunction);
                        if (message.actionLogp != null && Object.hasOwnProperty.call(message, "actionLogp"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.actionLogp);
                        if (message.reward != null && Object.hasOwnProperty.call(message, "reward"))
                            writer.uint32(/* id 4, wireType 5 =*/37).float(message.reward);
                        if (message.internalAction != null && message.internalAction.length)
                            for (var i = 0; i < message.internalAction.length; ++i)
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.internalAction[i]);
                        if (message.actionName != null && Object.hasOwnProperty.call(message, "actionName"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.actionName);
                        if (message.detailedStats != null && Object.hasOwnProperty.call(message, "detailedStats"))
                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.detailedStats);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Hero message, length delimited. Does not implicitly {@link CMsgBotWorldState.Actions.OceanAnnotation.Hero.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {CMsgBotWorldState.Actions.OceanAnnotation.IHero} message Hero message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hero.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Hero message from the specified reader or buffer.
                     * @function decode
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {CMsgBotWorldState.Actions.OceanAnnotation.Hero} Hero
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hero.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Actions.OceanAnnotation.Hero();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.playerID = reader.int32();
                                break;
                            case 2:
                                message.valueFunction = reader.float();
                                break;
                            case 3:
                                message.actionLogp = reader.float();
                                break;
                            case 4:
                                message.reward = reader.float();
                                break;
                            case 5:
                                if (!(message.internalAction && message.internalAction.length))
                                    message.internalAction = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.internalAction.push(reader.int32());
                                } else
                                    message.internalAction.push(reader.int32());
                                break;
                            case 6:
                                message.actionName = reader.string();
                                break;
                            case 7:
                                message.detailedStats = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("playerID"))
                            throw $util.ProtocolError("missing required 'playerID'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a Hero message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {CMsgBotWorldState.Actions.OceanAnnotation.Hero} Hero
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hero.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Hero message.
                     * @function verify
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Hero.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isInteger(message.playerID))
                            return "playerID: integer expected";
                        if (message.valueFunction != null && message.hasOwnProperty("valueFunction"))
                            if (typeof message.valueFunction !== "number")
                                return "valueFunction: number expected";
                        if (message.actionLogp != null && message.hasOwnProperty("actionLogp"))
                            if (typeof message.actionLogp !== "number")
                                return "actionLogp: number expected";
                        if (message.reward != null && message.hasOwnProperty("reward"))
                            if (typeof message.reward !== "number")
                                return "reward: number expected";
                        if (message.internalAction != null && message.hasOwnProperty("internalAction")) {
                            if (!Array.isArray(message.internalAction))
                                return "internalAction: array expected";
                            for (var i = 0; i < message.internalAction.length; ++i)
                                if (!$util.isInteger(message.internalAction[i]))
                                    return "internalAction: integer[] expected";
                        }
                        if (message.actionName != null && message.hasOwnProperty("actionName"))
                            if (!$util.isString(message.actionName))
                                return "actionName: string expected";
                        if (message.detailedStats != null && message.hasOwnProperty("detailedStats"))
                            if (!(message.detailedStats && typeof message.detailedStats.length === "number" || $util.isString(message.detailedStats)))
                                return "detailedStats: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Hero message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {CMsgBotWorldState.Actions.OceanAnnotation.Hero} Hero
                     */
                    Hero.fromObject = function fromObject(object) {
                        if (object instanceof $root.CMsgBotWorldState.Actions.OceanAnnotation.Hero)
                            return object;
                        var message = new $root.CMsgBotWorldState.Actions.OceanAnnotation.Hero();
                        if (object.playerID != null)
                            message.playerID = object.playerID | 0;
                        if (object.valueFunction != null)
                            message.valueFunction = Number(object.valueFunction);
                        if (object.actionLogp != null)
                            message.actionLogp = Number(object.actionLogp);
                        if (object.reward != null)
                            message.reward = Number(object.reward);
                        if (object.internalAction) {
                            if (!Array.isArray(object.internalAction))
                                throw TypeError(".CMsgBotWorldState.Actions.OceanAnnotation.Hero.internalAction: array expected");
                            message.internalAction = [];
                            for (var i = 0; i < object.internalAction.length; ++i)
                                message.internalAction[i] = object.internalAction[i] | 0;
                        }
                        if (object.actionName != null)
                            message.actionName = String(object.actionName);
                        if (object.detailedStats != null)
                            if (typeof object.detailedStats === "string")
                                $util.base64.decode(object.detailedStats, message.detailedStats = $util.newBuffer($util.base64.length(object.detailedStats)), 0);
                            else if (object.detailedStats.length)
                                message.detailedStats = object.detailedStats;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Hero message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @static
                     * @param {CMsgBotWorldState.Actions.OceanAnnotation.Hero} message Hero
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Hero.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.internalAction = [];
                        if (options.defaults) {
                            object.playerID = 0;
                            object.valueFunction = 0;
                            object.actionLogp = 0;
                            object.reward = 0;
                            object.actionName = "";
                            if (options.bytes === String)
                                object.detailedStats = "";
                            else {
                                object.detailedStats = [];
                                if (options.bytes !== Array)
                                    object.detailedStats = $util.newBuffer(object.detailedStats);
                            }
                        }
                        if (message.playerID != null && message.hasOwnProperty("playerID"))
                            object.playerID = message.playerID;
                        if (message.valueFunction != null && message.hasOwnProperty("valueFunction"))
                            object.valueFunction = options.json && !isFinite(message.valueFunction) ? String(message.valueFunction) : message.valueFunction;
                        if (message.actionLogp != null && message.hasOwnProperty("actionLogp"))
                            object.actionLogp = options.json && !isFinite(message.actionLogp) ? String(message.actionLogp) : message.actionLogp;
                        if (message.reward != null && message.hasOwnProperty("reward"))
                            object.reward = options.json && !isFinite(message.reward) ? String(message.reward) : message.reward;
                        if (message.internalAction && message.internalAction.length) {
                            object.internalAction = [];
                            for (var j = 0; j < message.internalAction.length; ++j)
                                object.internalAction[j] = message.internalAction[j];
                        }
                        if (message.actionName != null && message.hasOwnProperty("actionName"))
                            object.actionName = message.actionName;
                        if (message.detailedStats != null && message.hasOwnProperty("detailedStats"))
                            object.detailedStats = options.bytes === String ? $util.base64.encode(message.detailedStats, 0, message.detailedStats.length) : options.bytes === Array ? Array.prototype.slice.call(message.detailedStats) : message.detailedStats;
                        return object;
                    };
    
                    /**
                     * Converts this Hero to JSON.
                     * @function toJSON
                     * @memberof CMsgBotWorldState.Actions.OceanAnnotation.Hero
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Hero.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Hero;
                })();
    
                return OceanAnnotation;
            })();
    
            Actions.Header = (function() {
    
                /**
                 * Properties of a Header.
                 * @memberof CMsgBotWorldState.Actions
                 * @interface IHeader
                 * @property {number|null} [startTime] Header startTime
                 * @property {string|null} [name] Header name
                 */
    
                /**
                 * Constructs a new Header.
                 * @memberof CMsgBotWorldState.Actions
                 * @classdesc Represents a Header.
                 * @implements IHeader
                 * @constructor
                 * @param {CMsgBotWorldState.Actions.IHeader=} [properties] Properties to set
                 */
                function Header(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Header startTime.
                 * @member {number} startTime
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @instance
                 */
                Header.prototype.startTime = 0;
    
                /**
                 * Header name.
                 * @member {string} name
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @instance
                 */
                Header.prototype.name = "";
    
                /**
                 * Creates a new Header instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {CMsgBotWorldState.Actions.IHeader=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Actions.Header} Header instance
                 */
                Header.create = function create(properties) {
                    return new Header(properties);
                };
    
                /**
                 * Encodes the specified Header message. Does not implicitly {@link CMsgBotWorldState.Actions.Header.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {CMsgBotWorldState.Actions.IHeader} message Header message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Header.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.startTime);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified Header message, length delimited. Does not implicitly {@link CMsgBotWorldState.Actions.Header.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {CMsgBotWorldState.Actions.IHeader} message Header message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Header.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Header message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Actions.Header} Header
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Header.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Actions.Header();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.startTime = reader.float();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Header message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Actions.Header} Header
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Header.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Header message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Header.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.startTime != null && message.hasOwnProperty("startTime"))
                        if (typeof message.startTime !== "number")
                            return "startTime: number expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a Header message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Actions.Header} Header
                 */
                Header.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Actions.Header)
                        return object;
                    var message = new $root.CMsgBotWorldState.Actions.Header();
                    if (object.startTime != null)
                        message.startTime = Number(object.startTime);
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Header message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @static
                 * @param {CMsgBotWorldState.Actions.Header} message Header
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Header.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.startTime = 0;
                        object.name = "";
                    }
                    if (message.startTime != null && message.hasOwnProperty("startTime"))
                        object.startTime = options.json && !isFinite(message.startTime) ? String(message.startTime) : message.startTime;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this Header to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Actions.Header
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Header.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Header;
            })();
    
            return Actions;
        })();
    
        CMsgBotWorldState.Action = (function() {
    
            /**
             * Properties of an Action.
             * @memberof CMsgBotWorldState
             * @interface IAction
             * @property {CMsgBotWorldState.Action.Type} actionType Action actionType
             * @property {number|null} [player] Action player
             * @property {number|null} [actionID] Action actionID
             * @property {number|null} [actionDelay] Action actionDelay
             * @property {CMsgBotWorldState.Action.IMoveToLocation|null} [moveToLocation] Action moveToLocation
             * @property {CMsgBotWorldState.Action.IMoveToTarget|null} [moveToTarget] Action moveToTarget
             * @property {CMsgBotWorldState.Action.IAttackMove|null} [attackMove] Action attackMove
             * @property {CMsgBotWorldState.Action.IAttackTarget|null} [attackTarget] Action attackTarget
             * @property {CMsgBotWorldState.Action.ICastLocation|null} [castLocation] Action castLocation
             * @property {CMsgBotWorldState.Action.ICastTarget|null} [castTarget] Action castTarget
             * @property {CMsgBotWorldState.Action.ICastTree|null} [castTree] Action castTree
             * @property {CMsgBotWorldState.Action.ICast|null} [cast] Action cast
             * @property {CMsgBotWorldState.Action.ICastToggle|null} [castToggle] Action castToggle
             * @property {CMsgBotWorldState.Action.IHoldLocation|null} [holdLocation] Action holdLocation
             * @property {CMsgBotWorldState.Action.ITrainAbility|null} [trainAbility] Action trainAbility
             * @property {CMsgBotWorldState.Action.IDropItem|null} [dropItem] Action dropItem
             * @property {CMsgBotWorldState.Action.IPickUpItem|null} [pickUpItem] Action pickUpItem
             * @property {CMsgBotWorldState.Action.IPickupRune|null} [pickupRune] Action pickupRune
             * @property {CMsgBotWorldState.Action.IPurchaseItem|null} [purchaseItem] Action purchaseItem
             * @property {CMsgBotWorldState.Action.ISellItem|null} [sellItem] Action sellItem
             * @property {CMsgBotWorldState.Action.IDisassembleItem|null} [disassembleItem] Action disassembleItem
             * @property {CMsgBotWorldState.Action.ISetCombineLockItem|null} [setCombineLockItem] Action setCombineLockItem
             * @property {CMsgBotWorldState.Action.IStop|null} [stop] Action stop
             * @property {CMsgBotWorldState.Action.IChat|null} [chat] Action chat
             * @property {CMsgBotWorldState.Action.ISwapItems|null} [swapItems] Action swapItems
             * @property {CMsgBotWorldState.Action.IUseShrine|null} [useShrine] Action useShrine
             * @property {CMsgBotWorldState.Action.ICourier|null} [courier] Action courier
             * @property {CMsgBotWorldState.Action.IGetActualIncomingDamage|null} [getActualIncomingDamage] Action getActualIncomingDamage
             * @property {CMsgBotWorldState.Action.IGetEstimatedDamageToTarget|null} [getEstimatedDamageToTarget] Action getEstimatedDamageToTarget
             * @property {CMsgBotWorldState.Action.IGlyph|null} [glyph] Action glyph
             * @property {CMsgBotWorldState.Action.ISoftReset|null} [softReset] Action softReset
             * @property {CMsgBotWorldState.Action.IBuyback|null} [buyback] Action buyback
             * @property {CMsgBotWorldState.Action.IScriptingDebugDrawText|null} [scriptingDebugDrawText] Action scriptingDebugDrawText
             * @property {CMsgBotWorldState.Action.IScriptingDebugDrawLine|null} [scriptingDebugDrawLine] Action scriptingDebugDrawLine
             * @property {CMsgBotWorldState.Action.IScriptingDebugDrawScreenText|null} [scriptingDebugDrawScreenText] Action scriptingDebugDrawScreenText
             * @property {CMsgBotWorldState.Action.IScriptingDebugDrawBox|null} [scriptingDebugDrawBox] Action scriptingDebugDrawBox
             * @property {CMsgBotWorldState.Action.IScriptingDebugDrawCircle|null} [scriptingDebugDrawCircle] Action scriptingDebugDrawCircle
             * @property {CMsgBotWorldState.Action.IScriptingDebugDrawClear|null} [scriptingDebugDrawClear] Action scriptingDebugDrawClear
             * @property {CMsgBotWorldState.Action.IScriptingDebugScreenTextPretty|null} [scriptingDebugScreenTextPretty] Action scriptingDebugScreenTextPretty
             * @property {CMsgBotWorldState.Action.IMoveToLocation|null} [moveDirectly] Action moveDirectly
             * @property {CMsgBotWorldState.Action.IOceanWinGame|null} [oceanWinGame] Action oceanWinGame
             * @property {CMsgBotWorldState.Action.IOceanReplayCorrectTime|null} [oceanReplayCorrectTime] Action oceanReplayCorrectTime
             */
    
            /**
             * Constructs a new Action.
             * @memberof CMsgBotWorldState
             * @classdesc Represents an Action.
             * @implements IAction
             * @constructor
             * @param {CMsgBotWorldState.IAction=} [properties] Properties to set
             */
            function Action(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Action actionType.
             * @member {CMsgBotWorldState.Action.Type} actionType
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.actionType = 0;
    
            /**
             * Action player.
             * @member {number} player
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.player = -1;
    
            /**
             * Action actionID.
             * @member {number} actionID
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.actionID = -1;
    
            /**
             * Action actionDelay.
             * @member {number} actionDelay
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.actionDelay = 0;
    
            /**
             * Action moveToLocation.
             * @member {CMsgBotWorldState.Action.IMoveToLocation|null|undefined} moveToLocation
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.moveToLocation = null;
    
            /**
             * Action moveToTarget.
             * @member {CMsgBotWorldState.Action.IMoveToTarget|null|undefined} moveToTarget
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.moveToTarget = null;
    
            /**
             * Action attackMove.
             * @member {CMsgBotWorldState.Action.IAttackMove|null|undefined} attackMove
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.attackMove = null;
    
            /**
             * Action attackTarget.
             * @member {CMsgBotWorldState.Action.IAttackTarget|null|undefined} attackTarget
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.attackTarget = null;
    
            /**
             * Action castLocation.
             * @member {CMsgBotWorldState.Action.ICastLocation|null|undefined} castLocation
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.castLocation = null;
    
            /**
             * Action castTarget.
             * @member {CMsgBotWorldState.Action.ICastTarget|null|undefined} castTarget
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.castTarget = null;
    
            /**
             * Action castTree.
             * @member {CMsgBotWorldState.Action.ICastTree|null|undefined} castTree
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.castTree = null;
    
            /**
             * Action cast.
             * @member {CMsgBotWorldState.Action.ICast|null|undefined} cast
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.cast = null;
    
            /**
             * Action castToggle.
             * @member {CMsgBotWorldState.Action.ICastToggle|null|undefined} castToggle
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.castToggle = null;
    
            /**
             * Action holdLocation.
             * @member {CMsgBotWorldState.Action.IHoldLocation|null|undefined} holdLocation
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.holdLocation = null;
    
            /**
             * Action trainAbility.
             * @member {CMsgBotWorldState.Action.ITrainAbility|null|undefined} trainAbility
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.trainAbility = null;
    
            /**
             * Action dropItem.
             * @member {CMsgBotWorldState.Action.IDropItem|null|undefined} dropItem
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.dropItem = null;
    
            /**
             * Action pickUpItem.
             * @member {CMsgBotWorldState.Action.IPickUpItem|null|undefined} pickUpItem
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.pickUpItem = null;
    
            /**
             * Action pickupRune.
             * @member {CMsgBotWorldState.Action.IPickupRune|null|undefined} pickupRune
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.pickupRune = null;
    
            /**
             * Action purchaseItem.
             * @member {CMsgBotWorldState.Action.IPurchaseItem|null|undefined} purchaseItem
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.purchaseItem = null;
    
            /**
             * Action sellItem.
             * @member {CMsgBotWorldState.Action.ISellItem|null|undefined} sellItem
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.sellItem = null;
    
            /**
             * Action disassembleItem.
             * @member {CMsgBotWorldState.Action.IDisassembleItem|null|undefined} disassembleItem
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.disassembleItem = null;
    
            /**
             * Action setCombineLockItem.
             * @member {CMsgBotWorldState.Action.ISetCombineLockItem|null|undefined} setCombineLockItem
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.setCombineLockItem = null;
    
            /**
             * Action stop.
             * @member {CMsgBotWorldState.Action.IStop|null|undefined} stop
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.stop = null;
    
            /**
             * Action chat.
             * @member {CMsgBotWorldState.Action.IChat|null|undefined} chat
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.chat = null;
    
            /**
             * Action swapItems.
             * @member {CMsgBotWorldState.Action.ISwapItems|null|undefined} swapItems
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.swapItems = null;
    
            /**
             * Action useShrine.
             * @member {CMsgBotWorldState.Action.IUseShrine|null|undefined} useShrine
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.useShrine = null;
    
            /**
             * Action courier.
             * @member {CMsgBotWorldState.Action.ICourier|null|undefined} courier
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.courier = null;
    
            /**
             * Action getActualIncomingDamage.
             * @member {CMsgBotWorldState.Action.IGetActualIncomingDamage|null|undefined} getActualIncomingDamage
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.getActualIncomingDamage = null;
    
            /**
             * Action getEstimatedDamageToTarget.
             * @member {CMsgBotWorldState.Action.IGetEstimatedDamageToTarget|null|undefined} getEstimatedDamageToTarget
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.getEstimatedDamageToTarget = null;
    
            /**
             * Action glyph.
             * @member {CMsgBotWorldState.Action.IGlyph|null|undefined} glyph
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.glyph = null;
    
            /**
             * Action softReset.
             * @member {CMsgBotWorldState.Action.ISoftReset|null|undefined} softReset
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.softReset = null;
    
            /**
             * Action buyback.
             * @member {CMsgBotWorldState.Action.IBuyback|null|undefined} buyback
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.buyback = null;
    
            /**
             * Action scriptingDebugDrawText.
             * @member {CMsgBotWorldState.Action.IScriptingDebugDrawText|null|undefined} scriptingDebugDrawText
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.scriptingDebugDrawText = null;
    
            /**
             * Action scriptingDebugDrawLine.
             * @member {CMsgBotWorldState.Action.IScriptingDebugDrawLine|null|undefined} scriptingDebugDrawLine
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.scriptingDebugDrawLine = null;
    
            /**
             * Action scriptingDebugDrawScreenText.
             * @member {CMsgBotWorldState.Action.IScriptingDebugDrawScreenText|null|undefined} scriptingDebugDrawScreenText
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.scriptingDebugDrawScreenText = null;
    
            /**
             * Action scriptingDebugDrawBox.
             * @member {CMsgBotWorldState.Action.IScriptingDebugDrawBox|null|undefined} scriptingDebugDrawBox
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.scriptingDebugDrawBox = null;
    
            /**
             * Action scriptingDebugDrawCircle.
             * @member {CMsgBotWorldState.Action.IScriptingDebugDrawCircle|null|undefined} scriptingDebugDrawCircle
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.scriptingDebugDrawCircle = null;
    
            /**
             * Action scriptingDebugDrawClear.
             * @member {CMsgBotWorldState.Action.IScriptingDebugDrawClear|null|undefined} scriptingDebugDrawClear
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.scriptingDebugDrawClear = null;
    
            /**
             * Action scriptingDebugScreenTextPretty.
             * @member {CMsgBotWorldState.Action.IScriptingDebugScreenTextPretty|null|undefined} scriptingDebugScreenTextPretty
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.scriptingDebugScreenTextPretty = null;
    
            /**
             * Action moveDirectly.
             * @member {CMsgBotWorldState.Action.IMoveToLocation|null|undefined} moveDirectly
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.moveDirectly = null;
    
            /**
             * Action oceanWinGame.
             * @member {CMsgBotWorldState.Action.IOceanWinGame|null|undefined} oceanWinGame
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.oceanWinGame = null;
    
            /**
             * Action oceanReplayCorrectTime.
             * @member {CMsgBotWorldState.Action.IOceanReplayCorrectTime|null|undefined} oceanReplayCorrectTime
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Action.prototype.oceanReplayCorrectTime = null;
    
            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;
    
            /**
             * Action ActionData.
             * @member {"moveToLocation"|"moveToTarget"|"attackMove"|"attackTarget"|"castLocation"|"castTarget"|"castTree"|"cast"|"castToggle"|"holdLocation"|"trainAbility"|"dropItem"|"pickUpItem"|"pickupRune"|"purchaseItem"|"sellItem"|"disassembleItem"|"setCombineLockItem"|"stop"|"chat"|"swapItems"|"useShrine"|"courier"|"getActualIncomingDamage"|"getEstimatedDamageToTarget"|"glyph"|"softReset"|"buyback"|"scriptingDebugDrawText"|"scriptingDebugDrawLine"|"scriptingDebugDrawScreenText"|"scriptingDebugDrawBox"|"scriptingDebugDrawCircle"|"scriptingDebugDrawClear"|"scriptingDebugScreenTextPretty"|"moveDirectly"|"oceanWinGame"|"oceanReplayCorrectTime"|undefined} ActionData
             * @memberof CMsgBotWorldState.Action
             * @instance
             */
            Object.defineProperty(Action.prototype, "ActionData", {
                get: $util.oneOfGetter($oneOfFields = ["moveToLocation", "moveToTarget", "attackMove", "attackTarget", "castLocation", "castTarget", "castTree", "cast", "castToggle", "holdLocation", "trainAbility", "dropItem", "pickUpItem", "pickupRune", "purchaseItem", "sellItem", "disassembleItem", "setCombineLockItem", "stop", "chat", "swapItems", "useShrine", "courier", "getActualIncomingDamage", "getEstimatedDamageToTarget", "glyph", "softReset", "buyback", "scriptingDebugDrawText", "scriptingDebugDrawLine", "scriptingDebugDrawScreenText", "scriptingDebugDrawBox", "scriptingDebugDrawCircle", "scriptingDebugDrawClear", "scriptingDebugScreenTextPretty", "moveDirectly", "oceanWinGame", "oceanReplayCorrectTime"]),
                set: $util.oneOfSetter($oneOfFields)
            });
    
            /**
             * Creates a new Action instance using the specified properties.
             * @function create
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {CMsgBotWorldState.IAction=} [properties] Properties to set
             * @returns {CMsgBotWorldState.Action} Action instance
             */
            Action.create = function create(properties) {
                return new Action(properties);
            };
    
            /**
             * Encodes the specified Action message. Does not implicitly {@link CMsgBotWorldState.Action.verify|verify} messages.
             * @function encode
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {CMsgBotWorldState.IAction} message Action message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Action.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.actionType);
                if (message.player != null && Object.hasOwnProperty.call(message, "player"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.player);
                if (message.actionID != null && Object.hasOwnProperty.call(message, "actionID"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.actionID);
                if (message.actionDelay != null && Object.hasOwnProperty.call(message, "actionDelay"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.actionDelay);
                if (message.moveToLocation != null && Object.hasOwnProperty.call(message, "moveToLocation"))
                    $root.CMsgBotWorldState.Action.MoveToLocation.encode(message.moveToLocation, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
                if (message.moveToTarget != null && Object.hasOwnProperty.call(message, "moveToTarget"))
                    $root.CMsgBotWorldState.Action.MoveToTarget.encode(message.moveToTarget, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
                if (message.attackMove != null && Object.hasOwnProperty.call(message, "attackMove"))
                    $root.CMsgBotWorldState.Action.AttackMove.encode(message.attackMove, writer.uint32(/* id 103, wireType 2 =*/826).fork()).ldelim();
                if (message.attackTarget != null && Object.hasOwnProperty.call(message, "attackTarget"))
                    $root.CMsgBotWorldState.Action.AttackTarget.encode(message.attackTarget, writer.uint32(/* id 104, wireType 2 =*/834).fork()).ldelim();
                if (message.castLocation != null && Object.hasOwnProperty.call(message, "castLocation"))
                    $root.CMsgBotWorldState.Action.CastLocation.encode(message.castLocation, writer.uint32(/* id 105, wireType 2 =*/842).fork()).ldelim();
                if (message.castTarget != null && Object.hasOwnProperty.call(message, "castTarget"))
                    $root.CMsgBotWorldState.Action.CastTarget.encode(message.castTarget, writer.uint32(/* id 106, wireType 2 =*/850).fork()).ldelim();
                if (message.castTree != null && Object.hasOwnProperty.call(message, "castTree"))
                    $root.CMsgBotWorldState.Action.CastTree.encode(message.castTree, writer.uint32(/* id 107, wireType 2 =*/858).fork()).ldelim();
                if (message.cast != null && Object.hasOwnProperty.call(message, "cast"))
                    $root.CMsgBotWorldState.Action.Cast.encode(message.cast, writer.uint32(/* id 108, wireType 2 =*/866).fork()).ldelim();
                if (message.castToggle != null && Object.hasOwnProperty.call(message, "castToggle"))
                    $root.CMsgBotWorldState.Action.CastToggle.encode(message.castToggle, writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
                if (message.holdLocation != null && Object.hasOwnProperty.call(message, "holdLocation"))
                    $root.CMsgBotWorldState.Action.HoldLocation.encode(message.holdLocation, writer.uint32(/* id 110, wireType 2 =*/882).fork()).ldelim();
                if (message.trainAbility != null && Object.hasOwnProperty.call(message, "trainAbility"))
                    $root.CMsgBotWorldState.Action.TrainAbility.encode(message.trainAbility, writer.uint32(/* id 111, wireType 2 =*/890).fork()).ldelim();
                if (message.dropItem != null && Object.hasOwnProperty.call(message, "dropItem"))
                    $root.CMsgBotWorldState.Action.DropItem.encode(message.dropItem, writer.uint32(/* id 112, wireType 2 =*/898).fork()).ldelim();
                if (message.pickUpItem != null && Object.hasOwnProperty.call(message, "pickUpItem"))
                    $root.CMsgBotWorldState.Action.PickUpItem.encode(message.pickUpItem, writer.uint32(/* id 114, wireType 2 =*/914).fork()).ldelim();
                if (message.pickupRune != null && Object.hasOwnProperty.call(message, "pickupRune"))
                    $root.CMsgBotWorldState.Action.PickupRune.encode(message.pickupRune, writer.uint32(/* id 115, wireType 2 =*/922).fork()).ldelim();
                if (message.purchaseItem != null && Object.hasOwnProperty.call(message, "purchaseItem"))
                    $root.CMsgBotWorldState.Action.PurchaseItem.encode(message.purchaseItem, writer.uint32(/* id 116, wireType 2 =*/930).fork()).ldelim();
                if (message.sellItem != null && Object.hasOwnProperty.call(message, "sellItem"))
                    $root.CMsgBotWorldState.Action.SellItem.encode(message.sellItem, writer.uint32(/* id 117, wireType 2 =*/938).fork()).ldelim();
                if (message.disassembleItem != null && Object.hasOwnProperty.call(message, "disassembleItem"))
                    $root.CMsgBotWorldState.Action.DisassembleItem.encode(message.disassembleItem, writer.uint32(/* id 118, wireType 2 =*/946).fork()).ldelim();
                if (message.stop != null && Object.hasOwnProperty.call(message, "stop"))
                    $root.CMsgBotWorldState.Action.Stop.encode(message.stop, writer.uint32(/* id 121, wireType 2 =*/970).fork()).ldelim();
                if (message.setCombineLockItem != null && Object.hasOwnProperty.call(message, "setCombineLockItem"))
                    $root.CMsgBotWorldState.Action.SetCombineLockItem.encode(message.setCombineLockItem, writer.uint32(/* id 132, wireType 2 =*/1058).fork()).ldelim();
                if (message.chat != null && Object.hasOwnProperty.call(message, "chat"))
                    $root.CMsgBotWorldState.Action.Chat.encode(message.chat, writer.uint32(/* id 140, wireType 2 =*/1122).fork()).ldelim();
                if (message.swapItems != null && Object.hasOwnProperty.call(message, "swapItems"))
                    $root.CMsgBotWorldState.Action.SwapItems.encode(message.swapItems, writer.uint32(/* id 141, wireType 2 =*/1130).fork()).ldelim();
                if (message.useShrine != null && Object.hasOwnProperty.call(message, "useShrine"))
                    $root.CMsgBotWorldState.Action.UseShrine.encode(message.useShrine, writer.uint32(/* id 142, wireType 2 =*/1138).fork()).ldelim();
                if (message.courier != null && Object.hasOwnProperty.call(message, "courier"))
                    $root.CMsgBotWorldState.Action.Courier.encode(message.courier, writer.uint32(/* id 143, wireType 2 =*/1146).fork()).ldelim();
                if (message.getActualIncomingDamage != null && Object.hasOwnProperty.call(message, "getActualIncomingDamage"))
                    $root.CMsgBotWorldState.Action.GetActualIncomingDamage.encode(message.getActualIncomingDamage, writer.uint32(/* id 144, wireType 2 =*/1154).fork()).ldelim();
                if (message.getEstimatedDamageToTarget != null && Object.hasOwnProperty.call(message, "getEstimatedDamageToTarget"))
                    $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget.encode(message.getEstimatedDamageToTarget, writer.uint32(/* id 145, wireType 2 =*/1162).fork()).ldelim();
                if (message.glyph != null && Object.hasOwnProperty.call(message, "glyph"))
                    $root.CMsgBotWorldState.Action.Glyph.encode(message.glyph, writer.uint32(/* id 146, wireType 2 =*/1170).fork()).ldelim();
                if (message.softReset != null && Object.hasOwnProperty.call(message, "softReset"))
                    $root.CMsgBotWorldState.Action.SoftReset.encode(message.softReset, writer.uint32(/* id 148, wireType 2 =*/1186).fork()).ldelim();
                if (message.buyback != null && Object.hasOwnProperty.call(message, "buyback"))
                    $root.CMsgBotWorldState.Action.Buyback.encode(message.buyback, writer.uint32(/* id 149, wireType 2 =*/1194).fork()).ldelim();
                if (message.scriptingDebugDrawText != null && Object.hasOwnProperty.call(message, "scriptingDebugDrawText"))
                    $root.CMsgBotWorldState.Action.ScriptingDebugDrawText.encode(message.scriptingDebugDrawText, writer.uint32(/* id 150, wireType 2 =*/1202).fork()).ldelim();
                if (message.scriptingDebugDrawLine != null && Object.hasOwnProperty.call(message, "scriptingDebugDrawLine"))
                    $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine.encode(message.scriptingDebugDrawLine, writer.uint32(/* id 151, wireType 2 =*/1210).fork()).ldelim();
                if (message.scriptingDebugDrawScreenText != null && Object.hasOwnProperty.call(message, "scriptingDebugDrawScreenText"))
                    $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.encode(message.scriptingDebugDrawScreenText, writer.uint32(/* id 152, wireType 2 =*/1218).fork()).ldelim();
                if (message.scriptingDebugDrawBox != null && Object.hasOwnProperty.call(message, "scriptingDebugDrawBox"))
                    $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox.encode(message.scriptingDebugDrawBox, writer.uint32(/* id 153, wireType 2 =*/1226).fork()).ldelim();
                if (message.scriptingDebugDrawCircle != null && Object.hasOwnProperty.call(message, "scriptingDebugDrawCircle"))
                    $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle.encode(message.scriptingDebugDrawCircle, writer.uint32(/* id 154, wireType 2 =*/1234).fork()).ldelim();
                if (message.scriptingDebugDrawClear != null && Object.hasOwnProperty.call(message, "scriptingDebugDrawClear"))
                    $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear.encode(message.scriptingDebugDrawClear, writer.uint32(/* id 155, wireType 2 =*/1242).fork()).ldelim();
                if (message.moveDirectly != null && Object.hasOwnProperty.call(message, "moveDirectly"))
                    $root.CMsgBotWorldState.Action.MoveToLocation.encode(message.moveDirectly, writer.uint32(/* id 156, wireType 2 =*/1250).fork()).ldelim();
                if (message.oceanWinGame != null && Object.hasOwnProperty.call(message, "oceanWinGame"))
                    $root.CMsgBotWorldState.Action.OceanWinGame.encode(message.oceanWinGame, writer.uint32(/* id 157, wireType 2 =*/1258).fork()).ldelim();
                if (message.oceanReplayCorrectTime != null && Object.hasOwnProperty.call(message, "oceanReplayCorrectTime"))
                    $root.CMsgBotWorldState.Action.OceanReplayCorrectTime.encode(message.oceanReplayCorrectTime, writer.uint32(/* id 158, wireType 2 =*/1266).fork()).ldelim();
                if (message.scriptingDebugScreenTextPretty != null && Object.hasOwnProperty.call(message, "scriptingDebugScreenTextPretty"))
                    $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.encode(message.scriptingDebugScreenTextPretty, writer.uint32(/* id 159, wireType 2 =*/1274).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified Action message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {CMsgBotWorldState.IAction} message Action message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Action.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Action message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgBotWorldState.Action} Action
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Action.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.actionType = reader.int32();
                        break;
                    case 2:
                        message.player = reader.int32();
                        break;
                    case 4:
                        message.actionID = reader.int32();
                        break;
                    case 10:
                        message.actionDelay = reader.int32();
                        break;
                    case 101:
                        message.moveToLocation = $root.CMsgBotWorldState.Action.MoveToLocation.decode(reader, reader.uint32());
                        break;
                    case 102:
                        message.moveToTarget = $root.CMsgBotWorldState.Action.MoveToTarget.decode(reader, reader.uint32());
                        break;
                    case 103:
                        message.attackMove = $root.CMsgBotWorldState.Action.AttackMove.decode(reader, reader.uint32());
                        break;
                    case 104:
                        message.attackTarget = $root.CMsgBotWorldState.Action.AttackTarget.decode(reader, reader.uint32());
                        break;
                    case 105:
                        message.castLocation = $root.CMsgBotWorldState.Action.CastLocation.decode(reader, reader.uint32());
                        break;
                    case 106:
                        message.castTarget = $root.CMsgBotWorldState.Action.CastTarget.decode(reader, reader.uint32());
                        break;
                    case 107:
                        message.castTree = $root.CMsgBotWorldState.Action.CastTree.decode(reader, reader.uint32());
                        break;
                    case 108:
                        message.cast = $root.CMsgBotWorldState.Action.Cast.decode(reader, reader.uint32());
                        break;
                    case 109:
                        message.castToggle = $root.CMsgBotWorldState.Action.CastToggle.decode(reader, reader.uint32());
                        break;
                    case 110:
                        message.holdLocation = $root.CMsgBotWorldState.Action.HoldLocation.decode(reader, reader.uint32());
                        break;
                    case 111:
                        message.trainAbility = $root.CMsgBotWorldState.Action.TrainAbility.decode(reader, reader.uint32());
                        break;
                    case 112:
                        message.dropItem = $root.CMsgBotWorldState.Action.DropItem.decode(reader, reader.uint32());
                        break;
                    case 114:
                        message.pickUpItem = $root.CMsgBotWorldState.Action.PickUpItem.decode(reader, reader.uint32());
                        break;
                    case 115:
                        message.pickupRune = $root.CMsgBotWorldState.Action.PickupRune.decode(reader, reader.uint32());
                        break;
                    case 116:
                        message.purchaseItem = $root.CMsgBotWorldState.Action.PurchaseItem.decode(reader, reader.uint32());
                        break;
                    case 117:
                        message.sellItem = $root.CMsgBotWorldState.Action.SellItem.decode(reader, reader.uint32());
                        break;
                    case 118:
                        message.disassembleItem = $root.CMsgBotWorldState.Action.DisassembleItem.decode(reader, reader.uint32());
                        break;
                    case 132:
                        message.setCombineLockItem = $root.CMsgBotWorldState.Action.SetCombineLockItem.decode(reader, reader.uint32());
                        break;
                    case 121:
                        message.stop = $root.CMsgBotWorldState.Action.Stop.decode(reader, reader.uint32());
                        break;
                    case 140:
                        message.chat = $root.CMsgBotWorldState.Action.Chat.decode(reader, reader.uint32());
                        break;
                    case 141:
                        message.swapItems = $root.CMsgBotWorldState.Action.SwapItems.decode(reader, reader.uint32());
                        break;
                    case 142:
                        message.useShrine = $root.CMsgBotWorldState.Action.UseShrine.decode(reader, reader.uint32());
                        break;
                    case 143:
                        message.courier = $root.CMsgBotWorldState.Action.Courier.decode(reader, reader.uint32());
                        break;
                    case 144:
                        message.getActualIncomingDamage = $root.CMsgBotWorldState.Action.GetActualIncomingDamage.decode(reader, reader.uint32());
                        break;
                    case 145:
                        message.getEstimatedDamageToTarget = $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget.decode(reader, reader.uint32());
                        break;
                    case 146:
                        message.glyph = $root.CMsgBotWorldState.Action.Glyph.decode(reader, reader.uint32());
                        break;
                    case 148:
                        message.softReset = $root.CMsgBotWorldState.Action.SoftReset.decode(reader, reader.uint32());
                        break;
                    case 149:
                        message.buyback = $root.CMsgBotWorldState.Action.Buyback.decode(reader, reader.uint32());
                        break;
                    case 150:
                        message.scriptingDebugDrawText = $root.CMsgBotWorldState.Action.ScriptingDebugDrawText.decode(reader, reader.uint32());
                        break;
                    case 151:
                        message.scriptingDebugDrawLine = $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine.decode(reader, reader.uint32());
                        break;
                    case 152:
                        message.scriptingDebugDrawScreenText = $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.decode(reader, reader.uint32());
                        break;
                    case 153:
                        message.scriptingDebugDrawBox = $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox.decode(reader, reader.uint32());
                        break;
                    case 154:
                        message.scriptingDebugDrawCircle = $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle.decode(reader, reader.uint32());
                        break;
                    case 155:
                        message.scriptingDebugDrawClear = $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear.decode(reader, reader.uint32());
                        break;
                    case 159:
                        message.scriptingDebugScreenTextPretty = $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.decode(reader, reader.uint32());
                        break;
                    case 156:
                        message.moveDirectly = $root.CMsgBotWorldState.Action.MoveToLocation.decode(reader, reader.uint32());
                        break;
                    case 157:
                        message.oceanWinGame = $root.CMsgBotWorldState.Action.OceanWinGame.decode(reader, reader.uint32());
                        break;
                    case 158:
                        message.oceanReplayCorrectTime = $root.CMsgBotWorldState.Action.OceanReplayCorrectTime.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("actionType"))
                    throw $util.ProtocolError("missing required 'actionType'", { instance: message });
                return message;
            };
    
            /**
             * Decodes an Action message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgBotWorldState.Action} Action
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Action.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Action message.
             * @function verify
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Action.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                switch (message.actionType) {
                default:
                    return "actionType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 50:
                case 51:
                case 52:
                case 54:
                case 63:
                case 64:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 65:
                case 62:
                    break;
                }
                if (message.player != null && message.hasOwnProperty("player"))
                    if (!$util.isInteger(message.player))
                        return "player: integer expected";
                if (message.actionID != null && message.hasOwnProperty("actionID"))
                    if (!$util.isInteger(message.actionID))
                        return "actionID: integer expected";
                if (message.actionDelay != null && message.hasOwnProperty("actionDelay"))
                    if (!$util.isInteger(message.actionDelay))
                        return "actionDelay: integer expected";
                if (message.moveToLocation != null && message.hasOwnProperty("moveToLocation")) {
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.MoveToLocation.verify(message.moveToLocation);
                        if (error)
                            return "moveToLocation." + error;
                    }
                }
                if (message.moveToTarget != null && message.hasOwnProperty("moveToTarget")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.MoveToTarget.verify(message.moveToTarget);
                        if (error)
                            return "moveToTarget." + error;
                    }
                }
                if (message.attackMove != null && message.hasOwnProperty("attackMove")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.AttackMove.verify(message.attackMove);
                        if (error)
                            return "attackMove." + error;
                    }
                }
                if (message.attackTarget != null && message.hasOwnProperty("attackTarget")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.AttackTarget.verify(message.attackTarget);
                        if (error)
                            return "attackTarget." + error;
                    }
                }
                if (message.castLocation != null && message.hasOwnProperty("castLocation")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.CastLocation.verify(message.castLocation);
                        if (error)
                            return "castLocation." + error;
                    }
                }
                if (message.castTarget != null && message.hasOwnProperty("castTarget")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.CastTarget.verify(message.castTarget);
                        if (error)
                            return "castTarget." + error;
                    }
                }
                if (message.castTree != null && message.hasOwnProperty("castTree")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.CastTree.verify(message.castTree);
                        if (error)
                            return "castTree." + error;
                    }
                }
                if (message.cast != null && message.hasOwnProperty("cast")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.Cast.verify(message.cast);
                        if (error)
                            return "cast." + error;
                    }
                }
                if (message.castToggle != null && message.hasOwnProperty("castToggle")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.CastToggle.verify(message.castToggle);
                        if (error)
                            return "castToggle." + error;
                    }
                }
                if (message.holdLocation != null && message.hasOwnProperty("holdLocation")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.HoldLocation.verify(message.holdLocation);
                        if (error)
                            return "holdLocation." + error;
                    }
                }
                if (message.trainAbility != null && message.hasOwnProperty("trainAbility")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.TrainAbility.verify(message.trainAbility);
                        if (error)
                            return "trainAbility." + error;
                    }
                }
                if (message.dropItem != null && message.hasOwnProperty("dropItem")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.DropItem.verify(message.dropItem);
                        if (error)
                            return "dropItem." + error;
                    }
                }
                if (message.pickUpItem != null && message.hasOwnProperty("pickUpItem")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.PickUpItem.verify(message.pickUpItem);
                        if (error)
                            return "pickUpItem." + error;
                    }
                }
                if (message.pickupRune != null && message.hasOwnProperty("pickupRune")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.PickupRune.verify(message.pickupRune);
                        if (error)
                            return "pickupRune." + error;
                    }
                }
                if (message.purchaseItem != null && message.hasOwnProperty("purchaseItem")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.PurchaseItem.verify(message.purchaseItem);
                        if (error)
                            return "purchaseItem." + error;
                    }
                }
                if (message.sellItem != null && message.hasOwnProperty("sellItem")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.SellItem.verify(message.sellItem);
                        if (error)
                            return "sellItem." + error;
                    }
                }
                if (message.disassembleItem != null && message.hasOwnProperty("disassembleItem")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.DisassembleItem.verify(message.disassembleItem);
                        if (error)
                            return "disassembleItem." + error;
                    }
                }
                if (message.setCombineLockItem != null && message.hasOwnProperty("setCombineLockItem")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.SetCombineLockItem.verify(message.setCombineLockItem);
                        if (error)
                            return "setCombineLockItem." + error;
                    }
                }
                if (message.stop != null && message.hasOwnProperty("stop")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.Stop.verify(message.stop);
                        if (error)
                            return "stop." + error;
                    }
                }
                if (message.chat != null && message.hasOwnProperty("chat")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.Chat.verify(message.chat);
                        if (error)
                            return "chat." + error;
                    }
                }
                if (message.swapItems != null && message.hasOwnProperty("swapItems")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.SwapItems.verify(message.swapItems);
                        if (error)
                            return "swapItems." + error;
                    }
                }
                if (message.useShrine != null && message.hasOwnProperty("useShrine")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.UseShrine.verify(message.useShrine);
                        if (error)
                            return "useShrine." + error;
                    }
                }
                if (message.courier != null && message.hasOwnProperty("courier")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.Courier.verify(message.courier);
                        if (error)
                            return "courier." + error;
                    }
                }
                if (message.getActualIncomingDamage != null && message.hasOwnProperty("getActualIncomingDamage")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.GetActualIncomingDamage.verify(message.getActualIncomingDamage);
                        if (error)
                            return "getActualIncomingDamage." + error;
                    }
                }
                if (message.getEstimatedDamageToTarget != null && message.hasOwnProperty("getEstimatedDamageToTarget")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget.verify(message.getEstimatedDamageToTarget);
                        if (error)
                            return "getEstimatedDamageToTarget." + error;
                    }
                }
                if (message.glyph != null && message.hasOwnProperty("glyph")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.Glyph.verify(message.glyph);
                        if (error)
                            return "glyph." + error;
                    }
                }
                if (message.softReset != null && message.hasOwnProperty("softReset")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.SoftReset.verify(message.softReset);
                        if (error)
                            return "softReset." + error;
                    }
                }
                if (message.buyback != null && message.hasOwnProperty("buyback")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.Buyback.verify(message.buyback);
                        if (error)
                            return "buyback." + error;
                    }
                }
                if (message.scriptingDebugDrawText != null && message.hasOwnProperty("scriptingDebugDrawText")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.ScriptingDebugDrawText.verify(message.scriptingDebugDrawText);
                        if (error)
                            return "scriptingDebugDrawText." + error;
                    }
                }
                if (message.scriptingDebugDrawLine != null && message.hasOwnProperty("scriptingDebugDrawLine")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine.verify(message.scriptingDebugDrawLine);
                        if (error)
                            return "scriptingDebugDrawLine." + error;
                    }
                }
                if (message.scriptingDebugDrawScreenText != null && message.hasOwnProperty("scriptingDebugDrawScreenText")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.verify(message.scriptingDebugDrawScreenText);
                        if (error)
                            return "scriptingDebugDrawScreenText." + error;
                    }
                }
                if (message.scriptingDebugDrawBox != null && message.hasOwnProperty("scriptingDebugDrawBox")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox.verify(message.scriptingDebugDrawBox);
                        if (error)
                            return "scriptingDebugDrawBox." + error;
                    }
                }
                if (message.scriptingDebugDrawCircle != null && message.hasOwnProperty("scriptingDebugDrawCircle")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle.verify(message.scriptingDebugDrawCircle);
                        if (error)
                            return "scriptingDebugDrawCircle." + error;
                    }
                }
                if (message.scriptingDebugDrawClear != null && message.hasOwnProperty("scriptingDebugDrawClear")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear.verify(message.scriptingDebugDrawClear);
                        if (error)
                            return "scriptingDebugDrawClear." + error;
                    }
                }
                if (message.scriptingDebugScreenTextPretty != null && message.hasOwnProperty("scriptingDebugScreenTextPretty")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.verify(message.scriptingDebugScreenTextPretty);
                        if (error)
                            return "scriptingDebugScreenTextPretty." + error;
                    }
                }
                if (message.moveDirectly != null && message.hasOwnProperty("moveDirectly")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.MoveToLocation.verify(message.moveDirectly);
                        if (error)
                            return "moveDirectly." + error;
                    }
                }
                if (message.oceanWinGame != null && message.hasOwnProperty("oceanWinGame")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.OceanWinGame.verify(message.oceanWinGame);
                        if (error)
                            return "oceanWinGame." + error;
                    }
                }
                if (message.oceanReplayCorrectTime != null && message.hasOwnProperty("oceanReplayCorrectTime")) {
                    if (properties.ActionData === 1)
                        return "ActionData: multiple values";
                    properties.ActionData = 1;
                    {
                        var error = $root.CMsgBotWorldState.Action.OceanReplayCorrectTime.verify(message.oceanReplayCorrectTime);
                        if (error)
                            return "oceanReplayCorrectTime." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates an Action message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgBotWorldState.Action} Action
             */
            Action.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgBotWorldState.Action)
                    return object;
                var message = new $root.CMsgBotWorldState.Action();
                switch (object.actionType) {
                case "DOTA_UNIT_ORDER_NONE":
                case 0:
                    message.actionType = 0;
                    break;
                case "DOTA_UNIT_ORDER_MOVE_TO_POSITION":
                case 1:
                    message.actionType = 1;
                    break;
                case "DOTA_UNIT_ORDER_MOVE_TO_TARGET":
                case 2:
                    message.actionType = 2;
                    break;
                case "DOTA_UNIT_ORDER_ATTACK_MOVE":
                case 3:
                    message.actionType = 3;
                    break;
                case "DOTA_UNIT_ORDER_ATTACK_TARGET":
                case 4:
                    message.actionType = 4;
                    break;
                case "DOTA_UNIT_ORDER_CAST_POSITION":
                case 5:
                    message.actionType = 5;
                    break;
                case "DOTA_UNIT_ORDER_CAST_TARGET":
                case 6:
                    message.actionType = 6;
                    break;
                case "DOTA_UNIT_ORDER_CAST_TARGET_TREE":
                case 7:
                    message.actionType = 7;
                    break;
                case "DOTA_UNIT_ORDER_CAST_NO_TARGET":
                case 8:
                    message.actionType = 8;
                    break;
                case "DOTA_UNIT_ORDER_CAST_TOGGLE":
                case 9:
                    message.actionType = 9;
                    break;
                case "DOTA_UNIT_ORDER_HOLD_POSITION":
                case 10:
                    message.actionType = 10;
                    break;
                case "DOTA_UNIT_ORDER_TRAIN_ABILITY":
                case 11:
                    message.actionType = 11;
                    break;
                case "DOTA_UNIT_ORDER_DROP_ITEM":
                case 12:
                    message.actionType = 12;
                    break;
                case "DOTA_UNIT_ORDER_GIVE_ITEM":
                case 13:
                    message.actionType = 13;
                    break;
                case "DOTA_UNIT_ORDER_PICKUP_ITEM":
                case 14:
                    message.actionType = 14;
                    break;
                case "DOTA_UNIT_ORDER_PICKUP_RUNE":
                case 15:
                    message.actionType = 15;
                    break;
                case "DOTA_UNIT_ORDER_PURCHASE_ITEM":
                case 16:
                    message.actionType = 16;
                    break;
                case "DOTA_UNIT_ORDER_SELL_ITEM":
                case 17:
                    message.actionType = 17;
                    break;
                case "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM":
                case 18:
                    message.actionType = 18;
                    break;
                case "DOTA_UNIT_ORDER_MOVE_ITEM":
                case 19:
                    message.actionType = 19;
                    break;
                case "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO":
                case 20:
                    message.actionType = 20;
                    break;
                case "DOTA_UNIT_ORDER_STOP":
                case 21:
                    message.actionType = 21;
                    break;
                case "DOTA_UNIT_ORDER_TAUNT":
                case 22:
                    message.actionType = 22;
                    break;
                case "DOTA_UNIT_ORDER_BUYBACK":
                case 23:
                    message.actionType = 23;
                    break;
                case "DOTA_UNIT_ORDER_GLYPH":
                case 24:
                    message.actionType = 24;
                    break;
                case "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH":
                case 25:
                    message.actionType = 25;
                    break;
                case "DOTA_UNIT_ORDER_CAST_RUNE":
                case 26:
                    message.actionType = 26;
                    break;
                case "DOTA_UNIT_ORDER_PING_ABILITY":
                case 27:
                    message.actionType = 27;
                    break;
                case "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION":
                case 28:
                    message.actionType = 28;
                    break;
                case "DOTA_UNIT_ORDER_PATROL":
                case 29:
                    message.actionType = 29;
                    break;
                case "DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION":
                case 30:
                    message.actionType = 30;
                    break;
                case "DOTA_UNIT_ORDER_RADAR":
                case 31:
                    message.actionType = 31;
                    break;
                case "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK":
                case 32:
                    message.actionType = 32;
                    break;
                case "DOTA_UNIT_ORDER_CONTINUE":
                case 33:
                    message.actionType = 33;
                    break;
                case "ACTION_CHAT":
                case 40:
                    message.actionType = 40;
                    break;
                case "ACTION_SWAP_ITEMS":
                case 41:
                    message.actionType = 41;
                    break;
                case "ACTION_USE_SHRINE":
                case 42:
                    message.actionType = 42;
                    break;
                case "ACTION_COURIER":
                case 43:
                    message.actionType = 43;
                    break;
                case "RPC_GET_ACTUAL_INCOMING_DAMAGE":
                case 44:
                    message.actionType = 44;
                    break;
                case "RPC_GET_ESTIMATED_DAMAGE_TO_TARGET":
                case 45:
                    message.actionType = 45;
                    break;
                case "OCEAN_FULL_UPDATE":
                case 50:
                    message.actionType = 50;
                    break;
                case "OCEAN_RELOAD_CODE":
                case 51:
                    message.actionType = 51;
                    break;
                case "OCEAN_SOFT_RESET":
                case 52:
                    message.actionType = 52;
                    break;
                case "OCEAN_HOLD_FRAMESKIP":
                case 54:
                    message.actionType = 54;
                    break;
                case "OCEAN_WIN_GAME":
                case 63:
                    message.actionType = 63;
                    break;
                case "OCEAN_REPLAY_CORRECT_TIME":
                case 64:
                    message.actionType = 64;
                    break;
                case "SCRIPTING_DEBUG_DRAW_TEXT":
                case 55:
                    message.actionType = 55;
                    break;
                case "SCRIPTING_DEBUG_DRAW_LINE":
                case 56:
                    message.actionType = 56;
                    break;
                case "SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION":
                case 57:
                    message.actionType = 57;
                    break;
                case "SCRIPTING_DEBUG_DRAW_SCREEN_TEXT":
                case 58:
                    message.actionType = 58;
                    break;
                case "SCRIPTING_DEBUG_DRAW_BOX":
                case 59:
                    message.actionType = 59;
                    break;
                case "SCRIPTING_DEBUG_DRAW_CIRCLE":
                case 60:
                    message.actionType = 60;
                    break;
                case "SCRIPTING_DEBUG_DRAW_CLEAR":
                case 61:
                    message.actionType = 61;
                    break;
                case "SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY":
                case 65:
                    message.actionType = 65;
                    break;
                case "DOTA_UNIT_ORDER_MOVE_DIRECTLY":
                case 62:
                    message.actionType = 62;
                    break;
                }
                if (object.player != null)
                    message.player = object.player | 0;
                if (object.actionID != null)
                    message.actionID = object.actionID | 0;
                if (object.actionDelay != null)
                    message.actionDelay = object.actionDelay | 0;
                if (object.moveToLocation != null) {
                    if (typeof object.moveToLocation !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.moveToLocation: object expected");
                    message.moveToLocation = $root.CMsgBotWorldState.Action.MoveToLocation.fromObject(object.moveToLocation);
                }
                if (object.moveToTarget != null) {
                    if (typeof object.moveToTarget !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.moveToTarget: object expected");
                    message.moveToTarget = $root.CMsgBotWorldState.Action.MoveToTarget.fromObject(object.moveToTarget);
                }
                if (object.attackMove != null) {
                    if (typeof object.attackMove !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.attackMove: object expected");
                    message.attackMove = $root.CMsgBotWorldState.Action.AttackMove.fromObject(object.attackMove);
                }
                if (object.attackTarget != null) {
                    if (typeof object.attackTarget !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.attackTarget: object expected");
                    message.attackTarget = $root.CMsgBotWorldState.Action.AttackTarget.fromObject(object.attackTarget);
                }
                if (object.castLocation != null) {
                    if (typeof object.castLocation !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.castLocation: object expected");
                    message.castLocation = $root.CMsgBotWorldState.Action.CastLocation.fromObject(object.castLocation);
                }
                if (object.castTarget != null) {
                    if (typeof object.castTarget !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.castTarget: object expected");
                    message.castTarget = $root.CMsgBotWorldState.Action.CastTarget.fromObject(object.castTarget);
                }
                if (object.castTree != null) {
                    if (typeof object.castTree !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.castTree: object expected");
                    message.castTree = $root.CMsgBotWorldState.Action.CastTree.fromObject(object.castTree);
                }
                if (object.cast != null) {
                    if (typeof object.cast !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.cast: object expected");
                    message.cast = $root.CMsgBotWorldState.Action.Cast.fromObject(object.cast);
                }
                if (object.castToggle != null) {
                    if (typeof object.castToggle !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.castToggle: object expected");
                    message.castToggle = $root.CMsgBotWorldState.Action.CastToggle.fromObject(object.castToggle);
                }
                if (object.holdLocation != null) {
                    if (typeof object.holdLocation !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.holdLocation: object expected");
                    message.holdLocation = $root.CMsgBotWorldState.Action.HoldLocation.fromObject(object.holdLocation);
                }
                if (object.trainAbility != null) {
                    if (typeof object.trainAbility !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.trainAbility: object expected");
                    message.trainAbility = $root.CMsgBotWorldState.Action.TrainAbility.fromObject(object.trainAbility);
                }
                if (object.dropItem != null) {
                    if (typeof object.dropItem !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.dropItem: object expected");
                    message.dropItem = $root.CMsgBotWorldState.Action.DropItem.fromObject(object.dropItem);
                }
                if (object.pickUpItem != null) {
                    if (typeof object.pickUpItem !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.pickUpItem: object expected");
                    message.pickUpItem = $root.CMsgBotWorldState.Action.PickUpItem.fromObject(object.pickUpItem);
                }
                if (object.pickupRune != null) {
                    if (typeof object.pickupRune !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.pickupRune: object expected");
                    message.pickupRune = $root.CMsgBotWorldState.Action.PickupRune.fromObject(object.pickupRune);
                }
                if (object.purchaseItem != null) {
                    if (typeof object.purchaseItem !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.purchaseItem: object expected");
                    message.purchaseItem = $root.CMsgBotWorldState.Action.PurchaseItem.fromObject(object.purchaseItem);
                }
                if (object.sellItem != null) {
                    if (typeof object.sellItem !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.sellItem: object expected");
                    message.sellItem = $root.CMsgBotWorldState.Action.SellItem.fromObject(object.sellItem);
                }
                if (object.disassembleItem != null) {
                    if (typeof object.disassembleItem !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.disassembleItem: object expected");
                    message.disassembleItem = $root.CMsgBotWorldState.Action.DisassembleItem.fromObject(object.disassembleItem);
                }
                if (object.setCombineLockItem != null) {
                    if (typeof object.setCombineLockItem !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.setCombineLockItem: object expected");
                    message.setCombineLockItem = $root.CMsgBotWorldState.Action.SetCombineLockItem.fromObject(object.setCombineLockItem);
                }
                if (object.stop != null) {
                    if (typeof object.stop !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.stop: object expected");
                    message.stop = $root.CMsgBotWorldState.Action.Stop.fromObject(object.stop);
                }
                if (object.chat != null) {
                    if (typeof object.chat !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.chat: object expected");
                    message.chat = $root.CMsgBotWorldState.Action.Chat.fromObject(object.chat);
                }
                if (object.swapItems != null) {
                    if (typeof object.swapItems !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.swapItems: object expected");
                    message.swapItems = $root.CMsgBotWorldState.Action.SwapItems.fromObject(object.swapItems);
                }
                if (object.useShrine != null) {
                    if (typeof object.useShrine !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.useShrine: object expected");
                    message.useShrine = $root.CMsgBotWorldState.Action.UseShrine.fromObject(object.useShrine);
                }
                if (object.courier != null) {
                    if (typeof object.courier !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.courier: object expected");
                    message.courier = $root.CMsgBotWorldState.Action.Courier.fromObject(object.courier);
                }
                if (object.getActualIncomingDamage != null) {
                    if (typeof object.getActualIncomingDamage !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.getActualIncomingDamage: object expected");
                    message.getActualIncomingDamage = $root.CMsgBotWorldState.Action.GetActualIncomingDamage.fromObject(object.getActualIncomingDamage);
                }
                if (object.getEstimatedDamageToTarget != null) {
                    if (typeof object.getEstimatedDamageToTarget !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.getEstimatedDamageToTarget: object expected");
                    message.getEstimatedDamageToTarget = $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget.fromObject(object.getEstimatedDamageToTarget);
                }
                if (object.glyph != null) {
                    if (typeof object.glyph !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.glyph: object expected");
                    message.glyph = $root.CMsgBotWorldState.Action.Glyph.fromObject(object.glyph);
                }
                if (object.softReset != null) {
                    if (typeof object.softReset !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.softReset: object expected");
                    message.softReset = $root.CMsgBotWorldState.Action.SoftReset.fromObject(object.softReset);
                }
                if (object.buyback != null) {
                    if (typeof object.buyback !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.buyback: object expected");
                    message.buyback = $root.CMsgBotWorldState.Action.Buyback.fromObject(object.buyback);
                }
                if (object.scriptingDebugDrawText != null) {
                    if (typeof object.scriptingDebugDrawText !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.scriptingDebugDrawText: object expected");
                    message.scriptingDebugDrawText = $root.CMsgBotWorldState.Action.ScriptingDebugDrawText.fromObject(object.scriptingDebugDrawText);
                }
                if (object.scriptingDebugDrawLine != null) {
                    if (typeof object.scriptingDebugDrawLine !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.scriptingDebugDrawLine: object expected");
                    message.scriptingDebugDrawLine = $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine.fromObject(object.scriptingDebugDrawLine);
                }
                if (object.scriptingDebugDrawScreenText != null) {
                    if (typeof object.scriptingDebugDrawScreenText !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.scriptingDebugDrawScreenText: object expected");
                    message.scriptingDebugDrawScreenText = $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.fromObject(object.scriptingDebugDrawScreenText);
                }
                if (object.scriptingDebugDrawBox != null) {
                    if (typeof object.scriptingDebugDrawBox !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.scriptingDebugDrawBox: object expected");
                    message.scriptingDebugDrawBox = $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox.fromObject(object.scriptingDebugDrawBox);
                }
                if (object.scriptingDebugDrawCircle != null) {
                    if (typeof object.scriptingDebugDrawCircle !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.scriptingDebugDrawCircle: object expected");
                    message.scriptingDebugDrawCircle = $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle.fromObject(object.scriptingDebugDrawCircle);
                }
                if (object.scriptingDebugDrawClear != null) {
                    if (typeof object.scriptingDebugDrawClear !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.scriptingDebugDrawClear: object expected");
                    message.scriptingDebugDrawClear = $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear.fromObject(object.scriptingDebugDrawClear);
                }
                if (object.scriptingDebugScreenTextPretty != null) {
                    if (typeof object.scriptingDebugScreenTextPretty !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.scriptingDebugScreenTextPretty: object expected");
                    message.scriptingDebugScreenTextPretty = $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.fromObject(object.scriptingDebugScreenTextPretty);
                }
                if (object.moveDirectly != null) {
                    if (typeof object.moveDirectly !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.moveDirectly: object expected");
                    message.moveDirectly = $root.CMsgBotWorldState.Action.MoveToLocation.fromObject(object.moveDirectly);
                }
                if (object.oceanWinGame != null) {
                    if (typeof object.oceanWinGame !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.oceanWinGame: object expected");
                    message.oceanWinGame = $root.CMsgBotWorldState.Action.OceanWinGame.fromObject(object.oceanWinGame);
                }
                if (object.oceanReplayCorrectTime != null) {
                    if (typeof object.oceanReplayCorrectTime !== "object")
                        throw TypeError(".CMsgBotWorldState.Action.oceanReplayCorrectTime: object expected");
                    message.oceanReplayCorrectTime = $root.CMsgBotWorldState.Action.OceanReplayCorrectTime.fromObject(object.oceanReplayCorrectTime);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an Action message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgBotWorldState.Action
             * @static
             * @param {CMsgBotWorldState.Action} message Action
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Action.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.actionType = options.enums === String ? "DOTA_UNIT_ORDER_NONE" : 0;
                    object.player = -1;
                    object.actionID = -1;
                    object.actionDelay = 0;
                }
                if (message.actionType != null && message.hasOwnProperty("actionType"))
                    object.actionType = options.enums === String ? $root.CMsgBotWorldState.Action.Type[message.actionType] : message.actionType;
                if (message.player != null && message.hasOwnProperty("player"))
                    object.player = message.player;
                if (message.actionID != null && message.hasOwnProperty("actionID"))
                    object.actionID = message.actionID;
                if (message.actionDelay != null && message.hasOwnProperty("actionDelay"))
                    object.actionDelay = message.actionDelay;
                if (message.moveToLocation != null && message.hasOwnProperty("moveToLocation")) {
                    object.moveToLocation = $root.CMsgBotWorldState.Action.MoveToLocation.toObject(message.moveToLocation, options);
                    if (options.oneofs)
                        object.ActionData = "moveToLocation";
                }
                if (message.moveToTarget != null && message.hasOwnProperty("moveToTarget")) {
                    object.moveToTarget = $root.CMsgBotWorldState.Action.MoveToTarget.toObject(message.moveToTarget, options);
                    if (options.oneofs)
                        object.ActionData = "moveToTarget";
                }
                if (message.attackMove != null && message.hasOwnProperty("attackMove")) {
                    object.attackMove = $root.CMsgBotWorldState.Action.AttackMove.toObject(message.attackMove, options);
                    if (options.oneofs)
                        object.ActionData = "attackMove";
                }
                if (message.attackTarget != null && message.hasOwnProperty("attackTarget")) {
                    object.attackTarget = $root.CMsgBotWorldState.Action.AttackTarget.toObject(message.attackTarget, options);
                    if (options.oneofs)
                        object.ActionData = "attackTarget";
                }
                if (message.castLocation != null && message.hasOwnProperty("castLocation")) {
                    object.castLocation = $root.CMsgBotWorldState.Action.CastLocation.toObject(message.castLocation, options);
                    if (options.oneofs)
                        object.ActionData = "castLocation";
                }
                if (message.castTarget != null && message.hasOwnProperty("castTarget")) {
                    object.castTarget = $root.CMsgBotWorldState.Action.CastTarget.toObject(message.castTarget, options);
                    if (options.oneofs)
                        object.ActionData = "castTarget";
                }
                if (message.castTree != null && message.hasOwnProperty("castTree")) {
                    object.castTree = $root.CMsgBotWorldState.Action.CastTree.toObject(message.castTree, options);
                    if (options.oneofs)
                        object.ActionData = "castTree";
                }
                if (message.cast != null && message.hasOwnProperty("cast")) {
                    object.cast = $root.CMsgBotWorldState.Action.Cast.toObject(message.cast, options);
                    if (options.oneofs)
                        object.ActionData = "cast";
                }
                if (message.castToggle != null && message.hasOwnProperty("castToggle")) {
                    object.castToggle = $root.CMsgBotWorldState.Action.CastToggle.toObject(message.castToggle, options);
                    if (options.oneofs)
                        object.ActionData = "castToggle";
                }
                if (message.holdLocation != null && message.hasOwnProperty("holdLocation")) {
                    object.holdLocation = $root.CMsgBotWorldState.Action.HoldLocation.toObject(message.holdLocation, options);
                    if (options.oneofs)
                        object.ActionData = "holdLocation";
                }
                if (message.trainAbility != null && message.hasOwnProperty("trainAbility")) {
                    object.trainAbility = $root.CMsgBotWorldState.Action.TrainAbility.toObject(message.trainAbility, options);
                    if (options.oneofs)
                        object.ActionData = "trainAbility";
                }
                if (message.dropItem != null && message.hasOwnProperty("dropItem")) {
                    object.dropItem = $root.CMsgBotWorldState.Action.DropItem.toObject(message.dropItem, options);
                    if (options.oneofs)
                        object.ActionData = "dropItem";
                }
                if (message.pickUpItem != null && message.hasOwnProperty("pickUpItem")) {
                    object.pickUpItem = $root.CMsgBotWorldState.Action.PickUpItem.toObject(message.pickUpItem, options);
                    if (options.oneofs)
                        object.ActionData = "pickUpItem";
                }
                if (message.pickupRune != null && message.hasOwnProperty("pickupRune")) {
                    object.pickupRune = $root.CMsgBotWorldState.Action.PickupRune.toObject(message.pickupRune, options);
                    if (options.oneofs)
                        object.ActionData = "pickupRune";
                }
                if (message.purchaseItem != null && message.hasOwnProperty("purchaseItem")) {
                    object.purchaseItem = $root.CMsgBotWorldState.Action.PurchaseItem.toObject(message.purchaseItem, options);
                    if (options.oneofs)
                        object.ActionData = "purchaseItem";
                }
                if (message.sellItem != null && message.hasOwnProperty("sellItem")) {
                    object.sellItem = $root.CMsgBotWorldState.Action.SellItem.toObject(message.sellItem, options);
                    if (options.oneofs)
                        object.ActionData = "sellItem";
                }
                if (message.disassembleItem != null && message.hasOwnProperty("disassembleItem")) {
                    object.disassembleItem = $root.CMsgBotWorldState.Action.DisassembleItem.toObject(message.disassembleItem, options);
                    if (options.oneofs)
                        object.ActionData = "disassembleItem";
                }
                if (message.stop != null && message.hasOwnProperty("stop")) {
                    object.stop = $root.CMsgBotWorldState.Action.Stop.toObject(message.stop, options);
                    if (options.oneofs)
                        object.ActionData = "stop";
                }
                if (message.setCombineLockItem != null && message.hasOwnProperty("setCombineLockItem")) {
                    object.setCombineLockItem = $root.CMsgBotWorldState.Action.SetCombineLockItem.toObject(message.setCombineLockItem, options);
                    if (options.oneofs)
                        object.ActionData = "setCombineLockItem";
                }
                if (message.chat != null && message.hasOwnProperty("chat")) {
                    object.chat = $root.CMsgBotWorldState.Action.Chat.toObject(message.chat, options);
                    if (options.oneofs)
                        object.ActionData = "chat";
                }
                if (message.swapItems != null && message.hasOwnProperty("swapItems")) {
                    object.swapItems = $root.CMsgBotWorldState.Action.SwapItems.toObject(message.swapItems, options);
                    if (options.oneofs)
                        object.ActionData = "swapItems";
                }
                if (message.useShrine != null && message.hasOwnProperty("useShrine")) {
                    object.useShrine = $root.CMsgBotWorldState.Action.UseShrine.toObject(message.useShrine, options);
                    if (options.oneofs)
                        object.ActionData = "useShrine";
                }
                if (message.courier != null && message.hasOwnProperty("courier")) {
                    object.courier = $root.CMsgBotWorldState.Action.Courier.toObject(message.courier, options);
                    if (options.oneofs)
                        object.ActionData = "courier";
                }
                if (message.getActualIncomingDamage != null && message.hasOwnProperty("getActualIncomingDamage")) {
                    object.getActualIncomingDamage = $root.CMsgBotWorldState.Action.GetActualIncomingDamage.toObject(message.getActualIncomingDamage, options);
                    if (options.oneofs)
                        object.ActionData = "getActualIncomingDamage";
                }
                if (message.getEstimatedDamageToTarget != null && message.hasOwnProperty("getEstimatedDamageToTarget")) {
                    object.getEstimatedDamageToTarget = $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget.toObject(message.getEstimatedDamageToTarget, options);
                    if (options.oneofs)
                        object.ActionData = "getEstimatedDamageToTarget";
                }
                if (message.glyph != null && message.hasOwnProperty("glyph")) {
                    object.glyph = $root.CMsgBotWorldState.Action.Glyph.toObject(message.glyph, options);
                    if (options.oneofs)
                        object.ActionData = "glyph";
                }
                if (message.softReset != null && message.hasOwnProperty("softReset")) {
                    object.softReset = $root.CMsgBotWorldState.Action.SoftReset.toObject(message.softReset, options);
                    if (options.oneofs)
                        object.ActionData = "softReset";
                }
                if (message.buyback != null && message.hasOwnProperty("buyback")) {
                    object.buyback = $root.CMsgBotWorldState.Action.Buyback.toObject(message.buyback, options);
                    if (options.oneofs)
                        object.ActionData = "buyback";
                }
                if (message.scriptingDebugDrawText != null && message.hasOwnProperty("scriptingDebugDrawText")) {
                    object.scriptingDebugDrawText = $root.CMsgBotWorldState.Action.ScriptingDebugDrawText.toObject(message.scriptingDebugDrawText, options);
                    if (options.oneofs)
                        object.ActionData = "scriptingDebugDrawText";
                }
                if (message.scriptingDebugDrawLine != null && message.hasOwnProperty("scriptingDebugDrawLine")) {
                    object.scriptingDebugDrawLine = $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine.toObject(message.scriptingDebugDrawLine, options);
                    if (options.oneofs)
                        object.ActionData = "scriptingDebugDrawLine";
                }
                if (message.scriptingDebugDrawScreenText != null && message.hasOwnProperty("scriptingDebugDrawScreenText")) {
                    object.scriptingDebugDrawScreenText = $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.toObject(message.scriptingDebugDrawScreenText, options);
                    if (options.oneofs)
                        object.ActionData = "scriptingDebugDrawScreenText";
                }
                if (message.scriptingDebugDrawBox != null && message.hasOwnProperty("scriptingDebugDrawBox")) {
                    object.scriptingDebugDrawBox = $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox.toObject(message.scriptingDebugDrawBox, options);
                    if (options.oneofs)
                        object.ActionData = "scriptingDebugDrawBox";
                }
                if (message.scriptingDebugDrawCircle != null && message.hasOwnProperty("scriptingDebugDrawCircle")) {
                    object.scriptingDebugDrawCircle = $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle.toObject(message.scriptingDebugDrawCircle, options);
                    if (options.oneofs)
                        object.ActionData = "scriptingDebugDrawCircle";
                }
                if (message.scriptingDebugDrawClear != null && message.hasOwnProperty("scriptingDebugDrawClear")) {
                    object.scriptingDebugDrawClear = $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear.toObject(message.scriptingDebugDrawClear, options);
                    if (options.oneofs)
                        object.ActionData = "scriptingDebugDrawClear";
                }
                if (message.moveDirectly != null && message.hasOwnProperty("moveDirectly")) {
                    object.moveDirectly = $root.CMsgBotWorldState.Action.MoveToLocation.toObject(message.moveDirectly, options);
                    if (options.oneofs)
                        object.ActionData = "moveDirectly";
                }
                if (message.oceanWinGame != null && message.hasOwnProperty("oceanWinGame")) {
                    object.oceanWinGame = $root.CMsgBotWorldState.Action.OceanWinGame.toObject(message.oceanWinGame, options);
                    if (options.oneofs)
                        object.ActionData = "oceanWinGame";
                }
                if (message.oceanReplayCorrectTime != null && message.hasOwnProperty("oceanReplayCorrectTime")) {
                    object.oceanReplayCorrectTime = $root.CMsgBotWorldState.Action.OceanReplayCorrectTime.toObject(message.oceanReplayCorrectTime, options);
                    if (options.oneofs)
                        object.ActionData = "oceanReplayCorrectTime";
                }
                if (message.scriptingDebugScreenTextPretty != null && message.hasOwnProperty("scriptingDebugScreenTextPretty")) {
                    object.scriptingDebugScreenTextPretty = $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.toObject(message.scriptingDebugScreenTextPretty, options);
                    if (options.oneofs)
                        object.ActionData = "scriptingDebugScreenTextPretty";
                }
                return object;
            };
    
            /**
             * Converts this Action to JSON.
             * @function toJSON
             * @memberof CMsgBotWorldState.Action
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Action.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            Action.MoveToLocation = (function() {
    
                /**
                 * Properties of a MoveToLocation.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IMoveToLocation
                 * @property {Array.<number>|null} [units] MoveToLocation units
                 * @property {CMsgBotWorldState.IVector} location MoveToLocation location
                 */
    
                /**
                 * Constructs a new MoveToLocation.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a MoveToLocation.
                 * @implements IMoveToLocation
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IMoveToLocation=} [properties] Properties to set
                 */
                function MoveToLocation(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MoveToLocation units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @instance
                 */
                MoveToLocation.prototype.units = $util.emptyArray;
    
                /**
                 * MoveToLocation location.
                 * @member {CMsgBotWorldState.IVector} location
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @instance
                 */
                MoveToLocation.prototype.location = null;
    
                /**
                 * Creates a new MoveToLocation instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.IMoveToLocation=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.MoveToLocation} MoveToLocation instance
                 */
                MoveToLocation.create = function create(properties) {
                    return new MoveToLocation(properties);
                };
    
                /**
                 * Encodes the specified MoveToLocation message. Does not implicitly {@link CMsgBotWorldState.Action.MoveToLocation.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.IMoveToLocation} message MoveToLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MoveToLocation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MoveToLocation message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.MoveToLocation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.IMoveToLocation} message MoveToLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MoveToLocation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MoveToLocation message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.MoveToLocation} MoveToLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MoveToLocation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.MoveToLocation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("location"))
                        throw $util.ProtocolError("missing required 'location'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a MoveToLocation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.MoveToLocation} MoveToLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MoveToLocation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MoveToLocation message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MoveToLocation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                        if (error)
                            return "location." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MoveToLocation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.MoveToLocation} MoveToLocation
                 */
                MoveToLocation.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.MoveToLocation)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.MoveToLocation();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.MoveToLocation.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.location != null) {
                        if (typeof object.location !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.MoveToLocation.location: object expected");
                        message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MoveToLocation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.MoveToLocation} message MoveToLocation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MoveToLocation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults)
                        object.location = null;
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                    return object;
                };
    
                /**
                 * Converts this MoveToLocation to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.MoveToLocation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MoveToLocation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MoveToLocation;
            })();
    
            Action.MoveToTarget = (function() {
    
                /**
                 * Properties of a MoveToTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IMoveToTarget
                 * @property {Array.<number>|null} [units] MoveToTarget units
                 * @property {number} target MoveToTarget target
                 */
    
                /**
                 * Constructs a new MoveToTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a MoveToTarget.
                 * @implements IMoveToTarget
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IMoveToTarget=} [properties] Properties to set
                 */
                function MoveToTarget(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MoveToTarget units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @instance
                 */
                MoveToTarget.prototype.units = $util.emptyArray;
    
                /**
                 * MoveToTarget target.
                 * @member {number} target
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @instance
                 */
                MoveToTarget.prototype.target = 0;
    
                /**
                 * Creates a new MoveToTarget instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IMoveToTarget=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.MoveToTarget} MoveToTarget instance
                 */
                MoveToTarget.create = function create(properties) {
                    return new MoveToTarget(properties);
                };
    
                /**
                 * Encodes the specified MoveToTarget message. Does not implicitly {@link CMsgBotWorldState.Action.MoveToTarget.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IMoveToTarget} message MoveToTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MoveToTarget.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.target);
                    return writer;
                };
    
                /**
                 * Encodes the specified MoveToTarget message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.MoveToTarget.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IMoveToTarget} message MoveToTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MoveToTarget.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MoveToTarget message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.MoveToTarget} MoveToTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MoveToTarget.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.MoveToTarget();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.target = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("target"))
                        throw $util.ProtocolError("missing required 'target'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a MoveToTarget message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.MoveToTarget} MoveToTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MoveToTarget.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MoveToTarget message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MoveToTarget.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.target))
                        return "target: integer expected";
                    return null;
                };
    
                /**
                 * Creates a MoveToTarget message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.MoveToTarget} MoveToTarget
                 */
                MoveToTarget.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.MoveToTarget)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.MoveToTarget();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.MoveToTarget.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.target != null)
                        message.target = object.target | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a MoveToTarget message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.MoveToTarget} message MoveToTarget
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MoveToTarget.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults)
                        object.target = 0;
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = message.target;
                    return object;
                };
    
                /**
                 * Converts this MoveToTarget to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.MoveToTarget
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MoveToTarget.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MoveToTarget;
            })();
    
            Action.AttackMove = (function() {
    
                /**
                 * Properties of an AttackMove.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IAttackMove
                 * @property {Array.<number>|null} [units] AttackMove units
                 * @property {CMsgBotWorldState.IVector} location AttackMove location
                 */
    
                /**
                 * Constructs a new AttackMove.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents an AttackMove.
                 * @implements IAttackMove
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IAttackMove=} [properties] Properties to set
                 */
                function AttackMove(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * AttackMove units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @instance
                 */
                AttackMove.prototype.units = $util.emptyArray;
    
                /**
                 * AttackMove location.
                 * @member {CMsgBotWorldState.IVector} location
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @instance
                 */
                AttackMove.prototype.location = null;
    
                /**
                 * Creates a new AttackMove instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {CMsgBotWorldState.Action.IAttackMove=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.AttackMove} AttackMove instance
                 */
                AttackMove.create = function create(properties) {
                    return new AttackMove(properties);
                };
    
                /**
                 * Encodes the specified AttackMove message. Does not implicitly {@link CMsgBotWorldState.Action.AttackMove.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {CMsgBotWorldState.Action.IAttackMove} message AttackMove message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttackMove.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified AttackMove message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.AttackMove.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {CMsgBotWorldState.Action.IAttackMove} message AttackMove message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttackMove.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an AttackMove message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.AttackMove} AttackMove
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttackMove.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.AttackMove();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("location"))
                        throw $util.ProtocolError("missing required 'location'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes an AttackMove message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.AttackMove} AttackMove
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttackMove.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an AttackMove message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AttackMove.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                        if (error)
                            return "location." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an AttackMove message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.AttackMove} AttackMove
                 */
                AttackMove.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.AttackMove)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.AttackMove();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.AttackMove.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.location != null) {
                        if (typeof object.location !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.AttackMove.location: object expected");
                        message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an AttackMove message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @static
                 * @param {CMsgBotWorldState.Action.AttackMove} message AttackMove
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AttackMove.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults)
                        object.location = null;
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                    return object;
                };
    
                /**
                 * Converts this AttackMove to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.AttackMove
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AttackMove.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return AttackMove;
            })();
    
            Action.AttackTarget = (function() {
    
                /**
                 * Properties of an AttackTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IAttackTarget
                 * @property {Array.<number>|null} [units] AttackTarget units
                 * @property {number} target AttackTarget target
                 * @property {boolean|null} [once] AttackTarget once
                 */
    
                /**
                 * Constructs a new AttackTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents an AttackTarget.
                 * @implements IAttackTarget
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IAttackTarget=} [properties] Properties to set
                 */
                function AttackTarget(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * AttackTarget units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @instance
                 */
                AttackTarget.prototype.units = $util.emptyArray;
    
                /**
                 * AttackTarget target.
                 * @member {number} target
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @instance
                 */
                AttackTarget.prototype.target = 0;
    
                /**
                 * AttackTarget once.
                 * @member {boolean} once
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @instance
                 */
                AttackTarget.prototype.once = false;
    
                /**
                 * Creates a new AttackTarget instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IAttackTarget=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.AttackTarget} AttackTarget instance
                 */
                AttackTarget.create = function create(properties) {
                    return new AttackTarget(properties);
                };
    
                /**
                 * Encodes the specified AttackTarget message. Does not implicitly {@link CMsgBotWorldState.Action.AttackTarget.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IAttackTarget} message AttackTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttackTarget.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.target);
                    if (message.once != null && Object.hasOwnProperty.call(message, "once"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.once);
                    return writer;
                };
    
                /**
                 * Encodes the specified AttackTarget message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.AttackTarget.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IAttackTarget} message AttackTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttackTarget.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an AttackTarget message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.AttackTarget} AttackTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttackTarget.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.AttackTarget();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.target = reader.int32();
                            break;
                        case 3:
                            message.once = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("target"))
                        throw $util.ProtocolError("missing required 'target'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes an AttackTarget message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.AttackTarget} AttackTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttackTarget.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an AttackTarget message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AttackTarget.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.target))
                        return "target: integer expected";
                    if (message.once != null && message.hasOwnProperty("once"))
                        if (typeof message.once !== "boolean")
                            return "once: boolean expected";
                    return null;
                };
    
                /**
                 * Creates an AttackTarget message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.AttackTarget} AttackTarget
                 */
                AttackTarget.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.AttackTarget)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.AttackTarget();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.AttackTarget.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.target != null)
                        message.target = object.target | 0;
                    if (object.once != null)
                        message.once = Boolean(object.once);
                    return message;
                };
    
                /**
                 * Creates a plain object from an AttackTarget message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.AttackTarget} message AttackTarget
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AttackTarget.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults) {
                        object.target = 0;
                        object.once = false;
                    }
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = message.target;
                    if (message.once != null && message.hasOwnProperty("once"))
                        object.once = message.once;
                    return object;
                };
    
                /**
                 * Converts this AttackTarget to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.AttackTarget
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AttackTarget.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return AttackTarget;
            })();
    
            Action.HoldLocation = (function() {
    
                /**
                 * Properties of a HoldLocation.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IHoldLocation
                 * @property {Array.<number>|null} [units] HoldLocation units
                 */
    
                /**
                 * Constructs a new HoldLocation.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a HoldLocation.
                 * @implements IHoldLocation
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IHoldLocation=} [properties] Properties to set
                 */
                function HoldLocation(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HoldLocation units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @instance
                 */
                HoldLocation.prototype.units = $util.emptyArray;
    
                /**
                 * Creates a new HoldLocation instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.IHoldLocation=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.HoldLocation} HoldLocation instance
                 */
                HoldLocation.create = function create(properties) {
                    return new HoldLocation(properties);
                };
    
                /**
                 * Encodes the specified HoldLocation message. Does not implicitly {@link CMsgBotWorldState.Action.HoldLocation.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.IHoldLocation} message HoldLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HoldLocation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified HoldLocation message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.HoldLocation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.IHoldLocation} message HoldLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HoldLocation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HoldLocation message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.HoldLocation} HoldLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HoldLocation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.HoldLocation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HoldLocation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.HoldLocation} HoldLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HoldLocation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HoldLocation message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HoldLocation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a HoldLocation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.HoldLocation} HoldLocation
                 */
                HoldLocation.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.HoldLocation)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.HoldLocation();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.HoldLocation.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HoldLocation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.HoldLocation} message HoldLocation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HoldLocation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this HoldLocation to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.HoldLocation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HoldLocation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HoldLocation;
            })();
    
            Action.Stop = (function() {
    
                /**
                 * Properties of a Stop.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IStop
                 * @property {Array.<number>|null} [units] Stop units
                 */
    
                /**
                 * Constructs a new Stop.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a Stop.
                 * @implements IStop
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IStop=} [properties] Properties to set
                 */
                function Stop(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Stop units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @instance
                 */
                Stop.prototype.units = $util.emptyArray;
    
                /**
                 * Creates a new Stop instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {CMsgBotWorldState.Action.IStop=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.Stop} Stop instance
                 */
                Stop.create = function create(properties) {
                    return new Stop(properties);
                };
    
                /**
                 * Encodes the specified Stop message. Does not implicitly {@link CMsgBotWorldState.Action.Stop.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {CMsgBotWorldState.Action.IStop} message Stop message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Stop.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified Stop message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.Stop.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {CMsgBotWorldState.Action.IStop} message Stop message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Stop.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Stop message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.Stop} Stop
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Stop.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.Stop();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Stop message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.Stop} Stop
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Stop.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Stop message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Stop.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a Stop message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.Stop} Stop
                 */
                Stop.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.Stop)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.Stop();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.Stop.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Stop message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @static
                 * @param {CMsgBotWorldState.Action.Stop} message Stop
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Stop.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this Stop to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.Stop
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Stop.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Stop;
            })();
    
            Action.CastLocation = (function() {
    
                /**
                 * Properties of a CastLocation.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ICastLocation
                 * @property {Array.<number>|null} [units] CastLocation units
                 * @property {number} abilitySlot CastLocation abilitySlot
                 * @property {CMsgBotWorldState.IVector} location CastLocation location
                 */
    
                /**
                 * Constructs a new CastLocation.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a CastLocation.
                 * @implements ICastLocation
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ICastLocation=} [properties] Properties to set
                 */
                function CastLocation(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CastLocation units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @instance
                 */
                CastLocation.prototype.units = $util.emptyArray;
    
                /**
                 * CastLocation abilitySlot.
                 * @member {number} abilitySlot
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @instance
                 */
                CastLocation.prototype.abilitySlot = 0;
    
                /**
                 * CastLocation location.
                 * @member {CMsgBotWorldState.IVector} location
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @instance
                 */
                CastLocation.prototype.location = null;
    
                /**
                 * Creates a new CastLocation instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastLocation=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.CastLocation} CastLocation instance
                 */
                CastLocation.create = function create(properties) {
                    return new CastLocation(properties);
                };
    
                /**
                 * Encodes the specified CastLocation message. Does not implicitly {@link CMsgBotWorldState.Action.CastLocation.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastLocation} message CastLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastLocation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.abilitySlot);
                    $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CastLocation message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.CastLocation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastLocation} message CastLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastLocation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CastLocation message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.CastLocation} CastLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastLocation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.CastLocation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.abilitySlot = reader.int32();
                            break;
                        case 3:
                            message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("abilitySlot"))
                        throw $util.ProtocolError("missing required 'abilitySlot'", { instance: message });
                    if (!message.hasOwnProperty("location"))
                        throw $util.ProtocolError("missing required 'location'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a CastLocation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.CastLocation} CastLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastLocation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CastLocation message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CastLocation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.abilitySlot))
                        return "abilitySlot: integer expected";
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                        if (error)
                            return "location." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CastLocation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.CastLocation} CastLocation
                 */
                CastLocation.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.CastLocation)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.CastLocation();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.CastLocation.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.abilitySlot != null)
                        message.abilitySlot = object.abilitySlot | 0;
                    if (object.location != null) {
                        if (typeof object.location !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.CastLocation.location: object expected");
                        message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CastLocation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @static
                 * @param {CMsgBotWorldState.Action.CastLocation} message CastLocation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CastLocation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults) {
                        object.abilitySlot = 0;
                        object.location = null;
                    }
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.abilitySlot != null && message.hasOwnProperty("abilitySlot"))
                        object.abilitySlot = message.abilitySlot;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                    return object;
                };
    
                /**
                 * Converts this CastLocation to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.CastLocation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CastLocation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CastLocation;
            })();
    
            Action.CastTarget = (function() {
    
                /**
                 * Properties of a CastTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ICastTarget
                 * @property {Array.<number>|null} [units] CastTarget units
                 * @property {number} abilitySlot CastTarget abilitySlot
                 * @property {number} target CastTarget target
                 */
    
                /**
                 * Constructs a new CastTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a CastTarget.
                 * @implements ICastTarget
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ICastTarget=} [properties] Properties to set
                 */
                function CastTarget(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CastTarget units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @instance
                 */
                CastTarget.prototype.units = $util.emptyArray;
    
                /**
                 * CastTarget abilitySlot.
                 * @member {number} abilitySlot
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @instance
                 */
                CastTarget.prototype.abilitySlot = 0;
    
                /**
                 * CastTarget target.
                 * @member {number} target
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @instance
                 */
                CastTarget.prototype.target = 0;
    
                /**
                 * Creates a new CastTarget instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastTarget=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.CastTarget} CastTarget instance
                 */
                CastTarget.create = function create(properties) {
                    return new CastTarget(properties);
                };
    
                /**
                 * Encodes the specified CastTarget message. Does not implicitly {@link CMsgBotWorldState.Action.CastTarget.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastTarget} message CastTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastTarget.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.abilitySlot);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.target);
                    return writer;
                };
    
                /**
                 * Encodes the specified CastTarget message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.CastTarget.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastTarget} message CastTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastTarget.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CastTarget message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.CastTarget} CastTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastTarget.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.CastTarget();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.abilitySlot = reader.int32();
                            break;
                        case 3:
                            message.target = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("abilitySlot"))
                        throw $util.ProtocolError("missing required 'abilitySlot'", { instance: message });
                    if (!message.hasOwnProperty("target"))
                        throw $util.ProtocolError("missing required 'target'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a CastTarget message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.CastTarget} CastTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastTarget.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CastTarget message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CastTarget.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.abilitySlot))
                        return "abilitySlot: integer expected";
                    if (!$util.isInteger(message.target))
                        return "target: integer expected";
                    return null;
                };
    
                /**
                 * Creates a CastTarget message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.CastTarget} CastTarget
                 */
                CastTarget.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.CastTarget)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.CastTarget();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.CastTarget.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.abilitySlot != null)
                        message.abilitySlot = object.abilitySlot | 0;
                    if (object.target != null)
                        message.target = object.target | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a CastTarget message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.CastTarget} message CastTarget
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CastTarget.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults) {
                        object.abilitySlot = 0;
                        object.target = 0;
                    }
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.abilitySlot != null && message.hasOwnProperty("abilitySlot"))
                        object.abilitySlot = message.abilitySlot;
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = message.target;
                    return object;
                };
    
                /**
                 * Converts this CastTarget to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.CastTarget
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CastTarget.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CastTarget;
            })();
    
            Action.CastTree = (function() {
    
                /**
                 * Properties of a CastTree.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ICastTree
                 * @property {Array.<number>|null} [units] CastTree units
                 * @property {number} abilitySlot CastTree abilitySlot
                 * @property {number} tree CastTree tree
                 */
    
                /**
                 * Constructs a new CastTree.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a CastTree.
                 * @implements ICastTree
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ICastTree=} [properties] Properties to set
                 */
                function CastTree(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CastTree units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @instance
                 */
                CastTree.prototype.units = $util.emptyArray;
    
                /**
                 * CastTree abilitySlot.
                 * @member {number} abilitySlot
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @instance
                 */
                CastTree.prototype.abilitySlot = 0;
    
                /**
                 * CastTree tree.
                 * @member {number} tree
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @instance
                 */
                CastTree.prototype.tree = 0;
    
                /**
                 * Creates a new CastTree instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastTree=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.CastTree} CastTree instance
                 */
                CastTree.create = function create(properties) {
                    return new CastTree(properties);
                };
    
                /**
                 * Encodes the specified CastTree message. Does not implicitly {@link CMsgBotWorldState.Action.CastTree.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastTree} message CastTree message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastTree.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.abilitySlot);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.tree);
                    return writer;
                };
    
                /**
                 * Encodes the specified CastTree message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.CastTree.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastTree} message CastTree message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastTree.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CastTree message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.CastTree} CastTree
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastTree.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.CastTree();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.abilitySlot = reader.int32();
                            break;
                        case 3:
                            message.tree = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("abilitySlot"))
                        throw $util.ProtocolError("missing required 'abilitySlot'", { instance: message });
                    if (!message.hasOwnProperty("tree"))
                        throw $util.ProtocolError("missing required 'tree'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a CastTree message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.CastTree} CastTree
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastTree.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CastTree message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CastTree.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.abilitySlot))
                        return "abilitySlot: integer expected";
                    if (!$util.isInteger(message.tree))
                        return "tree: integer expected";
                    return null;
                };
    
                /**
                 * Creates a CastTree message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.CastTree} CastTree
                 */
                CastTree.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.CastTree)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.CastTree();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.CastTree.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.abilitySlot != null)
                        message.abilitySlot = object.abilitySlot | 0;
                    if (object.tree != null)
                        message.tree = object.tree | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a CastTree message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @static
                 * @param {CMsgBotWorldState.Action.CastTree} message CastTree
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CastTree.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults) {
                        object.abilitySlot = 0;
                        object.tree = 0;
                    }
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.abilitySlot != null && message.hasOwnProperty("abilitySlot"))
                        object.abilitySlot = message.abilitySlot;
                    if (message.tree != null && message.hasOwnProperty("tree"))
                        object.tree = message.tree;
                    return object;
                };
    
                /**
                 * Converts this CastTree to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.CastTree
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CastTree.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CastTree;
            })();
    
            Action.Cast = (function() {
    
                /**
                 * Properties of a Cast.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ICast
                 * @property {Array.<number>|null} [units] Cast units
                 * @property {number} abilitySlot Cast abilitySlot
                 */
    
                /**
                 * Constructs a new Cast.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a Cast.
                 * @implements ICast
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ICast=} [properties] Properties to set
                 */
                function Cast(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Cast units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @instance
                 */
                Cast.prototype.units = $util.emptyArray;
    
                /**
                 * Cast abilitySlot.
                 * @member {number} abilitySlot
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @instance
                 */
                Cast.prototype.abilitySlot = 0;
    
                /**
                 * Creates a new Cast instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {CMsgBotWorldState.Action.ICast=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.Cast} Cast instance
                 */
                Cast.create = function create(properties) {
                    return new Cast(properties);
                };
    
                /**
                 * Encodes the specified Cast message. Does not implicitly {@link CMsgBotWorldState.Action.Cast.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {CMsgBotWorldState.Action.ICast} message Cast message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Cast.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.abilitySlot);
                    return writer;
                };
    
                /**
                 * Encodes the specified Cast message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.Cast.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {CMsgBotWorldState.Action.ICast} message Cast message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Cast.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Cast message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.Cast} Cast
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Cast.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.Cast();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.abilitySlot = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("abilitySlot"))
                        throw $util.ProtocolError("missing required 'abilitySlot'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a Cast message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.Cast} Cast
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Cast.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Cast message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Cast.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.abilitySlot))
                        return "abilitySlot: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Cast message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.Cast} Cast
                 */
                Cast.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.Cast)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.Cast();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.Cast.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.abilitySlot != null)
                        message.abilitySlot = object.abilitySlot | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Cast message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @static
                 * @param {CMsgBotWorldState.Action.Cast} message Cast
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Cast.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults)
                        object.abilitySlot = 0;
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.abilitySlot != null && message.hasOwnProperty("abilitySlot"))
                        object.abilitySlot = message.abilitySlot;
                    return object;
                };
    
                /**
                 * Converts this Cast to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.Cast
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Cast.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Cast;
            })();
    
            Action.CastToggle = (function() {
    
                /**
                 * Properties of a CastToggle.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ICastToggle
                 * @property {Array.<number>|null} [units] CastToggle units
                 * @property {number} abilitySlot CastToggle abilitySlot
                 */
    
                /**
                 * Constructs a new CastToggle.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a CastToggle.
                 * @implements ICastToggle
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ICastToggle=} [properties] Properties to set
                 */
                function CastToggle(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CastToggle units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @instance
                 */
                CastToggle.prototype.units = $util.emptyArray;
    
                /**
                 * CastToggle abilitySlot.
                 * @member {number} abilitySlot
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @instance
                 */
                CastToggle.prototype.abilitySlot = 0;
    
                /**
                 * Creates a new CastToggle instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastToggle=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.CastToggle} CastToggle instance
                 */
                CastToggle.create = function create(properties) {
                    return new CastToggle(properties);
                };
    
                /**
                 * Encodes the specified CastToggle message. Does not implicitly {@link CMsgBotWorldState.Action.CastToggle.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastToggle} message CastToggle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastToggle.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.abilitySlot);
                    return writer;
                };
    
                /**
                 * Encodes the specified CastToggle message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.CastToggle.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {CMsgBotWorldState.Action.ICastToggle} message CastToggle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CastToggle.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CastToggle message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.CastToggle} CastToggle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastToggle.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.CastToggle();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.abilitySlot = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("abilitySlot"))
                        throw $util.ProtocolError("missing required 'abilitySlot'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a CastToggle message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.CastToggle} CastToggle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CastToggle.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CastToggle message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CastToggle.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.abilitySlot))
                        return "abilitySlot: integer expected";
                    return null;
                };
    
                /**
                 * Creates a CastToggle message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.CastToggle} CastToggle
                 */
                CastToggle.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.CastToggle)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.CastToggle();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.CastToggle.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.abilitySlot != null)
                        message.abilitySlot = object.abilitySlot | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a CastToggle message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @static
                 * @param {CMsgBotWorldState.Action.CastToggle} message CastToggle
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CastToggle.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults)
                        object.abilitySlot = 0;
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.abilitySlot != null && message.hasOwnProperty("abilitySlot"))
                        object.abilitySlot = message.abilitySlot;
                    return object;
                };
    
                /**
                 * Converts this CastToggle to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.CastToggle
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CastToggle.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CastToggle;
            })();
    
            Action.TrainAbility = (function() {
    
                /**
                 * Properties of a TrainAbility.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ITrainAbility
                 * @property {string} ability TrainAbility ability
                 * @property {number|null} [level] TrainAbility level
                 * @property {number|null} [unit] TrainAbility unit
                 */
    
                /**
                 * Constructs a new TrainAbility.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a TrainAbility.
                 * @implements ITrainAbility
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ITrainAbility=} [properties] Properties to set
                 */
                function TrainAbility(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TrainAbility ability.
                 * @member {string} ability
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @instance
                 */
                TrainAbility.prototype.ability = "";
    
                /**
                 * TrainAbility level.
                 * @member {number} level
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @instance
                 */
                TrainAbility.prototype.level = 0;
    
                /**
                 * TrainAbility unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @instance
                 */
                TrainAbility.prototype.unit = 0;
    
                /**
                 * Creates a new TrainAbility instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {CMsgBotWorldState.Action.ITrainAbility=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.TrainAbility} TrainAbility instance
                 */
                TrainAbility.create = function create(properties) {
                    return new TrainAbility(properties);
                };
    
                /**
                 * Encodes the specified TrainAbility message. Does not implicitly {@link CMsgBotWorldState.Action.TrainAbility.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {CMsgBotWorldState.Action.ITrainAbility} message TrainAbility message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TrainAbility.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ability);
                    if (message.level != null && Object.hasOwnProperty.call(message, "level"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.level);
                    if (message.unit != null && Object.hasOwnProperty.call(message, "unit"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.unit);
                    return writer;
                };
    
                /**
                 * Encodes the specified TrainAbility message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.TrainAbility.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {CMsgBotWorldState.Action.ITrainAbility} message TrainAbility message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TrainAbility.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TrainAbility message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.TrainAbility} TrainAbility
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TrainAbility.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.TrainAbility();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ability = reader.string();
                            break;
                        case 2:
                            message.level = reader.int32();
                            break;
                        case 3:
                            message.unit = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("ability"))
                        throw $util.ProtocolError("missing required 'ability'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a TrainAbility message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.TrainAbility} TrainAbility
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TrainAbility.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TrainAbility message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TrainAbility.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.ability))
                        return "ability: string expected";
                    if (message.level != null && message.hasOwnProperty("level"))
                        if (!$util.isInteger(message.level))
                            return "level: integer expected";
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        if (!$util.isInteger(message.unit))
                            return "unit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a TrainAbility message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.TrainAbility} TrainAbility
                 */
                TrainAbility.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.TrainAbility)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.TrainAbility();
                    if (object.ability != null)
                        message.ability = String(object.ability);
                    if (object.level != null)
                        message.level = object.level | 0;
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a TrainAbility message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @static
                 * @param {CMsgBotWorldState.Action.TrainAbility} message TrainAbility
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TrainAbility.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.ability = "";
                        object.level = 0;
                        object.unit = 0;
                    }
                    if (message.ability != null && message.hasOwnProperty("ability"))
                        object.ability = message.ability;
                    if (message.level != null && message.hasOwnProperty("level"))
                        object.level = message.level;
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    return object;
                };
    
                /**
                 * Converts this TrainAbility to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.TrainAbility
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TrainAbility.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TrainAbility;
            })();
    
            Action.DropItem = (function() {
    
                /**
                 * Properties of a DropItem.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IDropItem
                 * @property {number|null} [unit] DropItem unit
                 * @property {number|null} [slot] DropItem slot
                 * @property {CMsgBotWorldState.IVector|null} [location] DropItem location
                 */
    
                /**
                 * Constructs a new DropItem.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a DropItem.
                 * @implements IDropItem
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IDropItem=} [properties] Properties to set
                 */
                function DropItem(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DropItem unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @instance
                 */
                DropItem.prototype.unit = 0;
    
                /**
                 * DropItem slot.
                 * @member {number} slot
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @instance
                 */
                DropItem.prototype.slot = 0;
    
                /**
                 * DropItem location.
                 * @member {CMsgBotWorldState.IVector|null|undefined} location
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @instance
                 */
                DropItem.prototype.location = null;
    
                /**
                 * Creates a new DropItem instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IDropItem=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.DropItem} DropItem instance
                 */
                DropItem.create = function create(properties) {
                    return new DropItem(properties);
                };
    
                /**
                 * Encodes the specified DropItem message. Does not implicitly {@link CMsgBotWorldState.Action.DropItem.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IDropItem} message DropItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DropItem.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.unit != null && Object.hasOwnProperty.call(message, "unit"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.unit);
                    if (message.slot != null && Object.hasOwnProperty.call(message, "slot"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.slot);
                    if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                        $root.CMsgBotWorldState.Vector.encode(message.location, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DropItem message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.DropItem.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IDropItem} message DropItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DropItem.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DropItem message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.DropItem} DropItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DropItem.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.DropItem();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.unit = reader.int32();
                            break;
                        case 2:
                            message.slot = reader.int32();
                            break;
                        case 3:
                            message.location = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DropItem message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.DropItem} DropItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DropItem.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DropItem message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DropItem.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        if (!$util.isInteger(message.unit))
                            return "unit: integer expected";
                    if (message.slot != null && message.hasOwnProperty("slot"))
                        if (!$util.isInteger(message.slot))
                            return "slot: integer expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.location);
                        if (error)
                            return "location." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DropItem message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.DropItem} DropItem
                 */
                DropItem.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.DropItem)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.DropItem();
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    if (object.slot != null)
                        message.slot = object.slot | 0;
                    if (object.location != null) {
                        if (typeof object.location !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.DropItem.location: object expected");
                        message.location = $root.CMsgBotWorldState.Vector.fromObject(object.location);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DropItem message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @static
                 * @param {CMsgBotWorldState.Action.DropItem} message DropItem
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DropItem.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.unit = 0;
                        object.slot = 0;
                        object.location = null;
                    }
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    if (message.slot != null && message.hasOwnProperty("slot"))
                        object.slot = message.slot;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = $root.CMsgBotWorldState.Vector.toObject(message.location, options);
                    return object;
                };
    
                /**
                 * Converts this DropItem to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.DropItem
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DropItem.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DropItem;
            })();
    
            Action.PickUpItem = (function() {
    
                /**
                 * Properties of a PickUpItem.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IPickUpItem
                 * @property {number|null} [unit] PickUpItem unit
                 * @property {number|null} [itemId] PickUpItem itemId
                 */
    
                /**
                 * Constructs a new PickUpItem.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a PickUpItem.
                 * @implements IPickUpItem
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IPickUpItem=} [properties] Properties to set
                 */
                function PickUpItem(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PickUpItem unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @instance
                 */
                PickUpItem.prototype.unit = 0;
    
                /**
                 * PickUpItem itemId.
                 * @member {number} itemId
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @instance
                 */
                PickUpItem.prototype.itemId = 0;
    
                /**
                 * Creates a new PickUpItem instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IPickUpItem=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.PickUpItem} PickUpItem instance
                 */
                PickUpItem.create = function create(properties) {
                    return new PickUpItem(properties);
                };
    
                /**
                 * Encodes the specified PickUpItem message. Does not implicitly {@link CMsgBotWorldState.Action.PickUpItem.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IPickUpItem} message PickUpItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PickUpItem.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.unit != null && Object.hasOwnProperty.call(message, "unit"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.unit);
                    if (message.itemId != null && Object.hasOwnProperty.call(message, "itemId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
                    return writer;
                };
    
                /**
                 * Encodes the specified PickUpItem message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.PickUpItem.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IPickUpItem} message PickUpItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PickUpItem.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PickUpItem message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.PickUpItem} PickUpItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PickUpItem.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.PickUpItem();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.unit = reader.int32();
                            break;
                        case 2:
                            message.itemId = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PickUpItem message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.PickUpItem} PickUpItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PickUpItem.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PickUpItem message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PickUpItem.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        if (!$util.isInteger(message.unit))
                            return "unit: integer expected";
                    if (message.itemId != null && message.hasOwnProperty("itemId"))
                        if (!$util.isInteger(message.itemId))
                            return "itemId: integer expected";
                    return null;
                };
    
                /**
                 * Creates a PickUpItem message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.PickUpItem} PickUpItem
                 */
                PickUpItem.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.PickUpItem)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.PickUpItem();
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    if (object.itemId != null)
                        message.itemId = object.itemId | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a PickUpItem message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @static
                 * @param {CMsgBotWorldState.Action.PickUpItem} message PickUpItem
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PickUpItem.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.unit = 0;
                        object.itemId = 0;
                    }
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    if (message.itemId != null && message.hasOwnProperty("itemId"))
                        object.itemId = message.itemId;
                    return object;
                };
    
                /**
                 * Converts this PickUpItem to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.PickUpItem
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PickUpItem.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PickUpItem;
            })();
    
            Action.PurchaseItem = (function() {
    
                /**
                 * Properties of a PurchaseItem.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IPurchaseItem
                 * @property {number|null} [item] PurchaseItem item
                 * @property {string|null} [item_name] PurchaseItem item_name
                 * @property {number|null} [unit] PurchaseItem unit
                 */
    
                /**
                 * Constructs a new PurchaseItem.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a PurchaseItem.
                 * @implements IPurchaseItem
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IPurchaseItem=} [properties] Properties to set
                 */
                function PurchaseItem(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PurchaseItem item.
                 * @member {number} item
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @instance
                 */
                PurchaseItem.prototype.item = 0;
    
                /**
                 * PurchaseItem item_name.
                 * @member {string} item_name
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @instance
                 */
                PurchaseItem.prototype.item_name = "";
    
                /**
                 * PurchaseItem unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @instance
                 */
                PurchaseItem.prototype.unit = 0;
    
                /**
                 * Creates a new PurchaseItem instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IPurchaseItem=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.PurchaseItem} PurchaseItem instance
                 */
                PurchaseItem.create = function create(properties) {
                    return new PurchaseItem(properties);
                };
    
                /**
                 * Encodes the specified PurchaseItem message. Does not implicitly {@link CMsgBotWorldState.Action.PurchaseItem.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IPurchaseItem} message PurchaseItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PurchaseItem.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.item);
                    if (message.item_name != null && Object.hasOwnProperty.call(message, "item_name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.item_name);
                    if (message.unit != null && Object.hasOwnProperty.call(message, "unit"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.unit);
                    return writer;
                };
    
                /**
                 * Encodes the specified PurchaseItem message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.PurchaseItem.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IPurchaseItem} message PurchaseItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PurchaseItem.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PurchaseItem message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.PurchaseItem} PurchaseItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PurchaseItem.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.PurchaseItem();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.item = reader.int32();
                            break;
                        case 2:
                            message.item_name = reader.string();
                            break;
                        case 3:
                            message.unit = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PurchaseItem message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.PurchaseItem} PurchaseItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PurchaseItem.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PurchaseItem message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PurchaseItem.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.item != null && message.hasOwnProperty("item"))
                        if (!$util.isInteger(message.item))
                            return "item: integer expected";
                    if (message.item_name != null && message.hasOwnProperty("item_name"))
                        if (!$util.isString(message.item_name))
                            return "item_name: string expected";
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        if (!$util.isInteger(message.unit))
                            return "unit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a PurchaseItem message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.PurchaseItem} PurchaseItem
                 */
                PurchaseItem.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.PurchaseItem)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.PurchaseItem();
                    if (object.item != null)
                        message.item = object.item | 0;
                    if (object.item_name != null)
                        message.item_name = String(object.item_name);
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a PurchaseItem message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @static
                 * @param {CMsgBotWorldState.Action.PurchaseItem} message PurchaseItem
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PurchaseItem.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.item = 0;
                        object.item_name = "";
                        object.unit = 0;
                    }
                    if (message.item != null && message.hasOwnProperty("item"))
                        object.item = message.item;
                    if (message.item_name != null && message.hasOwnProperty("item_name"))
                        object.item_name = message.item_name;
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    return object;
                };
    
                /**
                 * Converts this PurchaseItem to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.PurchaseItem
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PurchaseItem.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PurchaseItem;
            })();
    
            Action.SellItem = (function() {
    
                /**
                 * Properties of a SellItem.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ISellItem
                 * @property {number|null} [item] SellItem item
                 * @property {number|null} [slot] SellItem slot
                 * @property {number|null} [unit] SellItem unit
                 */
    
                /**
                 * Constructs a new SellItem.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a SellItem.
                 * @implements ISellItem
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ISellItem=} [properties] Properties to set
                 */
                function SellItem(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SellItem item.
                 * @member {number} item
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @instance
                 */
                SellItem.prototype.item = 0;
    
                /**
                 * SellItem slot.
                 * @member {number} slot
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @instance
                 */
                SellItem.prototype.slot = 0;
    
                /**
                 * SellItem unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @instance
                 */
                SellItem.prototype.unit = 0;
    
                /**
                 * Creates a new SellItem instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {CMsgBotWorldState.Action.ISellItem=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.SellItem} SellItem instance
                 */
                SellItem.create = function create(properties) {
                    return new SellItem(properties);
                };
    
                /**
                 * Encodes the specified SellItem message. Does not implicitly {@link CMsgBotWorldState.Action.SellItem.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {CMsgBotWorldState.Action.ISellItem} message SellItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SellItem.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.item != null && Object.hasOwnProperty.call(message, "item"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.item);
                    if (message.slot != null && Object.hasOwnProperty.call(message, "slot"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.slot);
                    if (message.unit != null && Object.hasOwnProperty.call(message, "unit"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.unit);
                    return writer;
                };
    
                /**
                 * Encodes the specified SellItem message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.SellItem.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {CMsgBotWorldState.Action.ISellItem} message SellItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SellItem.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SellItem message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.SellItem} SellItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SellItem.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.SellItem();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.item = reader.int32();
                            break;
                        case 2:
                            message.slot = reader.int32();
                            break;
                        case 3:
                            message.unit = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SellItem message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.SellItem} SellItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SellItem.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SellItem message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SellItem.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.item != null && message.hasOwnProperty("item"))
                        if (!$util.isInteger(message.item))
                            return "item: integer expected";
                    if (message.slot != null && message.hasOwnProperty("slot"))
                        if (!$util.isInteger(message.slot))
                            return "slot: integer expected";
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        if (!$util.isInteger(message.unit))
                            return "unit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a SellItem message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.SellItem} SellItem
                 */
                SellItem.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.SellItem)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.SellItem();
                    if (object.item != null)
                        message.item = object.item | 0;
                    if (object.slot != null)
                        message.slot = object.slot | 0;
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a SellItem message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @static
                 * @param {CMsgBotWorldState.Action.SellItem} message SellItem
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SellItem.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.item = 0;
                        object.slot = 0;
                        object.unit = 0;
                    }
                    if (message.item != null && message.hasOwnProperty("item"))
                        object.item = message.item;
                    if (message.slot != null && message.hasOwnProperty("slot"))
                        object.slot = message.slot;
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    return object;
                };
    
                /**
                 * Converts this SellItem to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.SellItem
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SellItem.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SellItem;
            })();
    
            Action.SwapItems = (function() {
    
                /**
                 * Properties of a SwapItems.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ISwapItems
                 * @property {number} slot_a SwapItems slot_a
                 * @property {number} slot_b SwapItems slot_b
                 * @property {number|null} [unit] SwapItems unit
                 */
    
                /**
                 * Constructs a new SwapItems.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a SwapItems.
                 * @implements ISwapItems
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ISwapItems=} [properties] Properties to set
                 */
                function SwapItems(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SwapItems slot_a.
                 * @member {number} slot_a
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @instance
                 */
                SwapItems.prototype.slot_a = 0;
    
                /**
                 * SwapItems slot_b.
                 * @member {number} slot_b
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @instance
                 */
                SwapItems.prototype.slot_b = 0;
    
                /**
                 * SwapItems unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @instance
                 */
                SwapItems.prototype.unit = 0;
    
                /**
                 * Creates a new SwapItems instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {CMsgBotWorldState.Action.ISwapItems=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.SwapItems} SwapItems instance
                 */
                SwapItems.create = function create(properties) {
                    return new SwapItems(properties);
                };
    
                /**
                 * Encodes the specified SwapItems message. Does not implicitly {@link CMsgBotWorldState.Action.SwapItems.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {CMsgBotWorldState.Action.ISwapItems} message SwapItems message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SwapItems.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.slot_a);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.slot_b);
                    if (message.unit != null && Object.hasOwnProperty.call(message, "unit"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.unit);
                    return writer;
                };
    
                /**
                 * Encodes the specified SwapItems message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.SwapItems.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {CMsgBotWorldState.Action.ISwapItems} message SwapItems message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SwapItems.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SwapItems message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.SwapItems} SwapItems
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SwapItems.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.SwapItems();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.slot_a = reader.int32();
                            break;
                        case 2:
                            message.slot_b = reader.int32();
                            break;
                        case 3:
                            message.unit = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("slot_a"))
                        throw $util.ProtocolError("missing required 'slot_a'", { instance: message });
                    if (!message.hasOwnProperty("slot_b"))
                        throw $util.ProtocolError("missing required 'slot_b'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a SwapItems message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.SwapItems} SwapItems
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SwapItems.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SwapItems message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SwapItems.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.slot_a))
                        return "slot_a: integer expected";
                    if (!$util.isInteger(message.slot_b))
                        return "slot_b: integer expected";
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        if (!$util.isInteger(message.unit))
                            return "unit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a SwapItems message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.SwapItems} SwapItems
                 */
                SwapItems.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.SwapItems)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.SwapItems();
                    if (object.slot_a != null)
                        message.slot_a = object.slot_a | 0;
                    if (object.slot_b != null)
                        message.slot_b = object.slot_b | 0;
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a SwapItems message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @static
                 * @param {CMsgBotWorldState.Action.SwapItems} message SwapItems
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SwapItems.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.slot_a = 0;
                        object.slot_b = 0;
                        object.unit = 0;
                    }
                    if (message.slot_a != null && message.hasOwnProperty("slot_a"))
                        object.slot_a = message.slot_a;
                    if (message.slot_b != null && message.hasOwnProperty("slot_b"))
                        object.slot_b = message.slot_b;
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    return object;
                };
    
                /**
                 * Converts this SwapItems to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.SwapItems
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SwapItems.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SwapItems;
            })();
    
            Action.DisassembleItem = (function() {
    
                /**
                 * Properties of a DisassembleItem.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IDisassembleItem
                 * @property {number} slot DisassembleItem slot
                 */
    
                /**
                 * Constructs a new DisassembleItem.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a DisassembleItem.
                 * @implements IDisassembleItem
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IDisassembleItem=} [properties] Properties to set
                 */
                function DisassembleItem(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DisassembleItem slot.
                 * @member {number} slot
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @instance
                 */
                DisassembleItem.prototype.slot = 0;
    
                /**
                 * Creates a new DisassembleItem instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IDisassembleItem=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.DisassembleItem} DisassembleItem instance
                 */
                DisassembleItem.create = function create(properties) {
                    return new DisassembleItem(properties);
                };
    
                /**
                 * Encodes the specified DisassembleItem message. Does not implicitly {@link CMsgBotWorldState.Action.DisassembleItem.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IDisassembleItem} message DisassembleItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DisassembleItem.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.slot);
                    return writer;
                };
    
                /**
                 * Encodes the specified DisassembleItem message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.DisassembleItem.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {CMsgBotWorldState.Action.IDisassembleItem} message DisassembleItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DisassembleItem.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DisassembleItem message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.DisassembleItem} DisassembleItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DisassembleItem.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.DisassembleItem();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.slot = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("slot"))
                        throw $util.ProtocolError("missing required 'slot'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a DisassembleItem message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.DisassembleItem} DisassembleItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DisassembleItem.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DisassembleItem message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DisassembleItem.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.slot))
                        return "slot: integer expected";
                    return null;
                };
    
                /**
                 * Creates a DisassembleItem message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.DisassembleItem} DisassembleItem
                 */
                DisassembleItem.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.DisassembleItem)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.DisassembleItem();
                    if (object.slot != null)
                        message.slot = object.slot | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a DisassembleItem message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @static
                 * @param {CMsgBotWorldState.Action.DisassembleItem} message DisassembleItem
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DisassembleItem.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.slot = 0;
                    if (message.slot != null && message.hasOwnProperty("slot"))
                        object.slot = message.slot;
                    return object;
                };
    
                /**
                 * Converts this DisassembleItem to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.DisassembleItem
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DisassembleItem.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DisassembleItem;
            })();
    
            Action.SetCombineLockItem = (function() {
    
                /**
                 * Properties of a SetCombineLockItem.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ISetCombineLockItem
                 * @property {number} slot SetCombineLockItem slot
                 * @property {boolean} value SetCombineLockItem value
                 */
    
                /**
                 * Constructs a new SetCombineLockItem.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a SetCombineLockItem.
                 * @implements ISetCombineLockItem
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ISetCombineLockItem=} [properties] Properties to set
                 */
                function SetCombineLockItem(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SetCombineLockItem slot.
                 * @member {number} slot
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @instance
                 */
                SetCombineLockItem.prototype.slot = 0;
    
                /**
                 * SetCombineLockItem value.
                 * @member {boolean} value
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @instance
                 */
                SetCombineLockItem.prototype.value = false;
    
                /**
                 * Creates a new SetCombineLockItem instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {CMsgBotWorldState.Action.ISetCombineLockItem=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.SetCombineLockItem} SetCombineLockItem instance
                 */
                SetCombineLockItem.create = function create(properties) {
                    return new SetCombineLockItem(properties);
                };
    
                /**
                 * Encodes the specified SetCombineLockItem message. Does not implicitly {@link CMsgBotWorldState.Action.SetCombineLockItem.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {CMsgBotWorldState.Action.ISetCombineLockItem} message SetCombineLockItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SetCombineLockItem.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.slot);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified SetCombineLockItem message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.SetCombineLockItem.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {CMsgBotWorldState.Action.ISetCombineLockItem} message SetCombineLockItem message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SetCombineLockItem.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SetCombineLockItem message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.SetCombineLockItem} SetCombineLockItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SetCombineLockItem.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.SetCombineLockItem();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.slot = reader.int32();
                            break;
                        case 2:
                            message.value = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("slot"))
                        throw $util.ProtocolError("missing required 'slot'", { instance: message });
                    if (!message.hasOwnProperty("value"))
                        throw $util.ProtocolError("missing required 'value'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a SetCombineLockItem message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.SetCombineLockItem} SetCombineLockItem
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SetCombineLockItem.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SetCombineLockItem message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SetCombineLockItem.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.slot))
                        return "slot: integer expected";
                    if (typeof message.value !== "boolean")
                        return "value: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a SetCombineLockItem message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.SetCombineLockItem} SetCombineLockItem
                 */
                SetCombineLockItem.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.SetCombineLockItem)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.SetCombineLockItem();
                    if (object.slot != null)
                        message.slot = object.slot | 0;
                    if (object.value != null)
                        message.value = Boolean(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a SetCombineLockItem message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @static
                 * @param {CMsgBotWorldState.Action.SetCombineLockItem} message SetCombineLockItem
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SetCombineLockItem.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.slot = 0;
                        object.value = false;
                    }
                    if (message.slot != null && message.hasOwnProperty("slot"))
                        object.slot = message.slot;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this SetCombineLockItem to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.SetCombineLockItem
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SetCombineLockItem.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SetCombineLockItem;
            })();
    
            Action.PickupRune = (function() {
    
                /**
                 * Properties of a PickupRune.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IPickupRune
                 * @property {Array.<number>|null} [units] PickupRune units
                 * @property {number} rune PickupRune rune
                 */
    
                /**
                 * Constructs a new PickupRune.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a PickupRune.
                 * @implements IPickupRune
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IPickupRune=} [properties] Properties to set
                 */
                function PickupRune(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PickupRune units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @instance
                 */
                PickupRune.prototype.units = $util.emptyArray;
    
                /**
                 * PickupRune rune.
                 * @member {number} rune
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @instance
                 */
                PickupRune.prototype.rune = 0;
    
                /**
                 * Creates a new PickupRune instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {CMsgBotWorldState.Action.IPickupRune=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.PickupRune} PickupRune instance
                 */
                PickupRune.create = function create(properties) {
                    return new PickupRune(properties);
                };
    
                /**
                 * Encodes the specified PickupRune message. Does not implicitly {@link CMsgBotWorldState.Action.PickupRune.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {CMsgBotWorldState.Action.IPickupRune} message PickupRune message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PickupRune.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rune);
                    return writer;
                };
    
                /**
                 * Encodes the specified PickupRune message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.PickupRune.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {CMsgBotWorldState.Action.IPickupRune} message PickupRune message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PickupRune.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PickupRune message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.PickupRune} PickupRune
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PickupRune.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.PickupRune();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.rune = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("rune"))
                        throw $util.ProtocolError("missing required 'rune'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a PickupRune message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.PickupRune} PickupRune
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PickupRune.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PickupRune message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PickupRune.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.rune))
                        return "rune: integer expected";
                    return null;
                };
    
                /**
                 * Creates a PickupRune message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.PickupRune} PickupRune
                 */
                PickupRune.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.PickupRune)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.PickupRune();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.PickupRune.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.rune != null)
                        message.rune = object.rune | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a PickupRune message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @static
                 * @param {CMsgBotWorldState.Action.PickupRune} message PickupRune
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PickupRune.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults)
                        object.rune = 0;
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.rune != null && message.hasOwnProperty("rune"))
                        object.rune = message.rune;
                    return object;
                };
    
                /**
                 * Converts this PickupRune to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.PickupRune
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PickupRune.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PickupRune;
            })();
    
            Action.Chat = (function() {
    
                /**
                 * Properties of a Chat.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IChat
                 * @property {string} message Chat message
                 * @property {boolean} to_allchat Chat to_allchat
                 */
    
                /**
                 * Constructs a new Chat.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a Chat.
                 * @implements IChat
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IChat=} [properties] Properties to set
                 */
                function Chat(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Chat message.
                 * @member {string} message
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @instance
                 */
                Chat.prototype.message = "";
    
                /**
                 * Chat to_allchat.
                 * @member {boolean} to_allchat
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @instance
                 */
                Chat.prototype.to_allchat = false;
    
                /**
                 * Creates a new Chat instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {CMsgBotWorldState.Action.IChat=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.Chat} Chat instance
                 */
                Chat.create = function create(properties) {
                    return new Chat(properties);
                };
    
                /**
                 * Encodes the specified Chat message. Does not implicitly {@link CMsgBotWorldState.Action.Chat.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {CMsgBotWorldState.Action.IChat} message Chat message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Chat.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.to_allchat);
                    return writer;
                };
    
                /**
                 * Encodes the specified Chat message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.Chat.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {CMsgBotWorldState.Action.IChat} message Chat message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Chat.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Chat message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.Chat} Chat
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Chat.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.Chat();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message = reader.string();
                            break;
                        case 2:
                            message.to_allchat = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("message"))
                        throw $util.ProtocolError("missing required 'message'", { instance: message });
                    if (!message.hasOwnProperty("to_allchat"))
                        throw $util.ProtocolError("missing required 'to_allchat'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a Chat message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.Chat} Chat
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Chat.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Chat message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Chat.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.message))
                        return "message: string expected";
                    if (typeof message.to_allchat !== "boolean")
                        return "to_allchat: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Chat message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.Chat} Chat
                 */
                Chat.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.Chat)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.Chat();
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.to_allchat != null)
                        message.to_allchat = Boolean(object.to_allchat);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Chat message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @static
                 * @param {CMsgBotWorldState.Action.Chat} message Chat
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Chat.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.message = "";
                        object.to_allchat = false;
                    }
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.to_allchat != null && message.hasOwnProperty("to_allchat"))
                        object.to_allchat = message.to_allchat;
                    return object;
                };
    
                /**
                 * Converts this Chat to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.Chat
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Chat.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Chat;
            })();
    
            Action.UseShrine = (function() {
    
                /**
                 * Properties of a UseShrine.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IUseShrine
                 * @property {Array.<number>|null} [units] UseShrine units
                 * @property {number} shrine UseShrine shrine
                 */
    
                /**
                 * Constructs a new UseShrine.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a UseShrine.
                 * @implements IUseShrine
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IUseShrine=} [properties] Properties to set
                 */
                function UseShrine(properties) {
                    this.units = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UseShrine units.
                 * @member {Array.<number>} units
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @instance
                 */
                UseShrine.prototype.units = $util.emptyArray;
    
                /**
                 * UseShrine shrine.
                 * @member {number} shrine
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @instance
                 */
                UseShrine.prototype.shrine = 0;
    
                /**
                 * Creates a new UseShrine instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {CMsgBotWorldState.Action.IUseShrine=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.UseShrine} UseShrine instance
                 */
                UseShrine.create = function create(properties) {
                    return new UseShrine(properties);
                };
    
                /**
                 * Encodes the specified UseShrine message. Does not implicitly {@link CMsgBotWorldState.Action.UseShrine.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {CMsgBotWorldState.Action.IUseShrine} message UseShrine message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UseShrine.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.units != null && message.units.length)
                        for (var i = 0; i < message.units.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.units[i]);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.shrine);
                    return writer;
                };
    
                /**
                 * Encodes the specified UseShrine message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.UseShrine.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {CMsgBotWorldState.Action.IUseShrine} message UseShrine message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UseShrine.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a UseShrine message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.UseShrine} UseShrine
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UseShrine.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.UseShrine();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.units && message.units.length))
                                message.units = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.units.push(reader.int32());
                            } else
                                message.units.push(reader.int32());
                            break;
                        case 2:
                            message.shrine = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("shrine"))
                        throw $util.ProtocolError("missing required 'shrine'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a UseShrine message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.UseShrine} UseShrine
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UseShrine.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a UseShrine message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UseShrine.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.units != null && message.hasOwnProperty("units")) {
                        if (!Array.isArray(message.units))
                            return "units: array expected";
                        for (var i = 0; i < message.units.length; ++i)
                            if (!$util.isInteger(message.units[i]))
                                return "units: integer[] expected";
                    }
                    if (!$util.isInteger(message.shrine))
                        return "shrine: integer expected";
                    return null;
                };
    
                /**
                 * Creates a UseShrine message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.UseShrine} UseShrine
                 */
                UseShrine.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.UseShrine)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.UseShrine();
                    if (object.units) {
                        if (!Array.isArray(object.units))
                            throw TypeError(".CMsgBotWorldState.Action.UseShrine.units: array expected");
                        message.units = [];
                        for (var i = 0; i < object.units.length; ++i)
                            message.units[i] = object.units[i] | 0;
                    }
                    if (object.shrine != null)
                        message.shrine = object.shrine | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a UseShrine message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @static
                 * @param {CMsgBotWorldState.Action.UseShrine} message UseShrine
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UseShrine.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.units = [];
                    if (options.defaults)
                        object.shrine = 0;
                    if (message.units && message.units.length) {
                        object.units = [];
                        for (var j = 0; j < message.units.length; ++j)
                            object.units[j] = message.units[j];
                    }
                    if (message.shrine != null && message.hasOwnProperty("shrine"))
                        object.shrine = message.shrine;
                    return object;
                };
    
                /**
                 * Converts this UseShrine to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.UseShrine
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UseShrine.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return UseShrine;
            })();
    
            Action.Courier = (function() {
    
                /**
                 * Properties of a Courier.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ICourier
                 * @property {number} unit Courier unit
                 * @property {number} courier Courier courier
                 * @property {number} action Courier action
                 */
    
                /**
                 * Constructs a new Courier.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a Courier.
                 * @implements ICourier
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ICourier=} [properties] Properties to set
                 */
                function Courier(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Courier unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @instance
                 */
                Courier.prototype.unit = 0;
    
                /**
                 * Courier courier.
                 * @member {number} courier
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @instance
                 */
                Courier.prototype.courier = 0;
    
                /**
                 * Courier action.
                 * @member {number} action
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @instance
                 */
                Courier.prototype.action = 0;
    
                /**
                 * Creates a new Courier instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {CMsgBotWorldState.Action.ICourier=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.Courier} Courier instance
                 */
                Courier.create = function create(properties) {
                    return new Courier(properties);
                };
    
                /**
                 * Encodes the specified Courier message. Does not implicitly {@link CMsgBotWorldState.Action.Courier.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {CMsgBotWorldState.Action.ICourier} message Courier message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Courier.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.unit);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.courier);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.action);
                    return writer;
                };
    
                /**
                 * Encodes the specified Courier message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.Courier.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {CMsgBotWorldState.Action.ICourier} message Courier message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Courier.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Courier message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.Courier} Courier
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Courier.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.Courier();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.unit = reader.int32();
                            break;
                        case 2:
                            message.courier = reader.int32();
                            break;
                        case 3:
                            message.action = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("unit"))
                        throw $util.ProtocolError("missing required 'unit'", { instance: message });
                    if (!message.hasOwnProperty("courier"))
                        throw $util.ProtocolError("missing required 'courier'", { instance: message });
                    if (!message.hasOwnProperty("action"))
                        throw $util.ProtocolError("missing required 'action'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a Courier message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.Courier} Courier
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Courier.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Courier message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Courier.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.unit))
                        return "unit: integer expected";
                    if (!$util.isInteger(message.courier))
                        return "courier: integer expected";
                    if (!$util.isInteger(message.action))
                        return "action: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Courier message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.Courier} Courier
                 */
                Courier.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.Courier)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.Courier();
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    if (object.courier != null)
                        message.courier = object.courier | 0;
                    if (object.action != null)
                        message.action = object.action | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Courier message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @static
                 * @param {CMsgBotWorldState.Action.Courier} message Courier
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Courier.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.unit = 0;
                        object.courier = 0;
                        object.action = 0;
                    }
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    if (message.courier != null && message.hasOwnProperty("courier"))
                        object.courier = message.courier;
                    if (message.action != null && message.hasOwnProperty("action"))
                        object.action = message.action;
                    return object;
                };
    
                /**
                 * Converts this Courier to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.Courier
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Courier.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Courier;
            })();
    
            Action.GetActualIncomingDamage = (function() {
    
                /**
                 * Properties of a GetActualIncomingDamage.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IGetActualIncomingDamage
                 * @property {number} unit GetActualIncomingDamage unit
                 * @property {number} nDamage GetActualIncomingDamage nDamage
                 * @property {number} nDamageType GetActualIncomingDamage nDamageType
                 */
    
                /**
                 * Constructs a new GetActualIncomingDamage.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a GetActualIncomingDamage.
                 * @implements IGetActualIncomingDamage
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IGetActualIncomingDamage=} [properties] Properties to set
                 */
                function GetActualIncomingDamage(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetActualIncomingDamage unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @instance
                 */
                GetActualIncomingDamage.prototype.unit = 0;
    
                /**
                 * GetActualIncomingDamage nDamage.
                 * @member {number} nDamage
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @instance
                 */
                GetActualIncomingDamage.prototype.nDamage = 0;
    
                /**
                 * GetActualIncomingDamage nDamageType.
                 * @member {number} nDamageType
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @instance
                 */
                GetActualIncomingDamage.prototype.nDamageType = 0;
    
                /**
                 * Creates a new GetActualIncomingDamage instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {CMsgBotWorldState.Action.IGetActualIncomingDamage=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.GetActualIncomingDamage} GetActualIncomingDamage instance
                 */
                GetActualIncomingDamage.create = function create(properties) {
                    return new GetActualIncomingDamage(properties);
                };
    
                /**
                 * Encodes the specified GetActualIncomingDamage message. Does not implicitly {@link CMsgBotWorldState.Action.GetActualIncomingDamage.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {CMsgBotWorldState.Action.IGetActualIncomingDamage} message GetActualIncomingDamage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetActualIncomingDamage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.unit);
                    writer.uint32(/* id 2, wireType 5 =*/21).float(message.nDamage);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nDamageType);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetActualIncomingDamage message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.GetActualIncomingDamage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {CMsgBotWorldState.Action.IGetActualIncomingDamage} message GetActualIncomingDamage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetActualIncomingDamage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetActualIncomingDamage message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.GetActualIncomingDamage} GetActualIncomingDamage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetActualIncomingDamage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.GetActualIncomingDamage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.unit = reader.int32();
                            break;
                        case 2:
                            message.nDamage = reader.float();
                            break;
                        case 3:
                            message.nDamageType = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("unit"))
                        throw $util.ProtocolError("missing required 'unit'", { instance: message });
                    if (!message.hasOwnProperty("nDamage"))
                        throw $util.ProtocolError("missing required 'nDamage'", { instance: message });
                    if (!message.hasOwnProperty("nDamageType"))
                        throw $util.ProtocolError("missing required 'nDamageType'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a GetActualIncomingDamage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.GetActualIncomingDamage} GetActualIncomingDamage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetActualIncomingDamage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetActualIncomingDamage message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetActualIncomingDamage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.unit))
                        return "unit: integer expected";
                    if (typeof message.nDamage !== "number")
                        return "nDamage: number expected";
                    if (!$util.isInteger(message.nDamageType))
                        return "nDamageType: integer expected";
                    return null;
                };
    
                /**
                 * Creates a GetActualIncomingDamage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.GetActualIncomingDamage} GetActualIncomingDamage
                 */
                GetActualIncomingDamage.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.GetActualIncomingDamage)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.GetActualIncomingDamage();
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    if (object.nDamage != null)
                        message.nDamage = Number(object.nDamage);
                    if (object.nDamageType != null)
                        message.nDamageType = object.nDamageType | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetActualIncomingDamage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @static
                 * @param {CMsgBotWorldState.Action.GetActualIncomingDamage} message GetActualIncomingDamage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetActualIncomingDamage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.unit = 0;
                        object.nDamage = 0;
                        object.nDamageType = 0;
                    }
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    if (message.nDamage != null && message.hasOwnProperty("nDamage"))
                        object.nDamage = options.json && !isFinite(message.nDamage) ? String(message.nDamage) : message.nDamage;
                    if (message.nDamageType != null && message.hasOwnProperty("nDamageType"))
                        object.nDamageType = message.nDamageType;
                    return object;
                };
    
                /**
                 * Converts this GetActualIncomingDamage to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.GetActualIncomingDamage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetActualIncomingDamage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GetActualIncomingDamage;
            })();
    
            Action.GetEstimatedDamageToTarget = (function() {
    
                /**
                 * Properties of a GetEstimatedDamageToTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IGetEstimatedDamageToTarget
                 * @property {number} unit GetEstimatedDamageToTarget unit
                 * @property {boolean} bCurrentlyAvailable GetEstimatedDamageToTarget bCurrentlyAvailable
                 * @property {number} hTarget GetEstimatedDamageToTarget hTarget
                 * @property {number} fDuration GetEstimatedDamageToTarget fDuration
                 * @property {number} nDamageTypes GetEstimatedDamageToTarget nDamageTypes
                 */
    
                /**
                 * Constructs a new GetEstimatedDamageToTarget.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a GetEstimatedDamageToTarget.
                 * @implements IGetEstimatedDamageToTarget
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IGetEstimatedDamageToTarget=} [properties] Properties to set
                 */
                function GetEstimatedDamageToTarget(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetEstimatedDamageToTarget unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @instance
                 */
                GetEstimatedDamageToTarget.prototype.unit = 0;
    
                /**
                 * GetEstimatedDamageToTarget bCurrentlyAvailable.
                 * @member {boolean} bCurrentlyAvailable
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @instance
                 */
                GetEstimatedDamageToTarget.prototype.bCurrentlyAvailable = false;
    
                /**
                 * GetEstimatedDamageToTarget hTarget.
                 * @member {number} hTarget
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @instance
                 */
                GetEstimatedDamageToTarget.prototype.hTarget = 0;
    
                /**
                 * GetEstimatedDamageToTarget fDuration.
                 * @member {number} fDuration
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @instance
                 */
                GetEstimatedDamageToTarget.prototype.fDuration = 0;
    
                /**
                 * GetEstimatedDamageToTarget nDamageTypes.
                 * @member {number} nDamageTypes
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @instance
                 */
                GetEstimatedDamageToTarget.prototype.nDamageTypes = 0;
    
                /**
                 * Creates a new GetEstimatedDamageToTarget instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IGetEstimatedDamageToTarget=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.GetEstimatedDamageToTarget} GetEstimatedDamageToTarget instance
                 */
                GetEstimatedDamageToTarget.create = function create(properties) {
                    return new GetEstimatedDamageToTarget(properties);
                };
    
                /**
                 * Encodes the specified GetEstimatedDamageToTarget message. Does not implicitly {@link CMsgBotWorldState.Action.GetEstimatedDamageToTarget.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IGetEstimatedDamageToTarget} message GetEstimatedDamageToTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetEstimatedDamageToTarget.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.unit);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bCurrentlyAvailable);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.hTarget);
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.fDuration);
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.nDamageTypes);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetEstimatedDamageToTarget message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.GetEstimatedDamageToTarget.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.IGetEstimatedDamageToTarget} message GetEstimatedDamageToTarget message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetEstimatedDamageToTarget.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetEstimatedDamageToTarget message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.GetEstimatedDamageToTarget} GetEstimatedDamageToTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetEstimatedDamageToTarget.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.unit = reader.int32();
                            break;
                        case 2:
                            message.bCurrentlyAvailable = reader.bool();
                            break;
                        case 3:
                            message.hTarget = reader.int32();
                            break;
                        case 4:
                            message.fDuration = reader.float();
                            break;
                        case 5:
                            message.nDamageTypes = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("unit"))
                        throw $util.ProtocolError("missing required 'unit'", { instance: message });
                    if (!message.hasOwnProperty("bCurrentlyAvailable"))
                        throw $util.ProtocolError("missing required 'bCurrentlyAvailable'", { instance: message });
                    if (!message.hasOwnProperty("hTarget"))
                        throw $util.ProtocolError("missing required 'hTarget'", { instance: message });
                    if (!message.hasOwnProperty("fDuration"))
                        throw $util.ProtocolError("missing required 'fDuration'", { instance: message });
                    if (!message.hasOwnProperty("nDamageTypes"))
                        throw $util.ProtocolError("missing required 'nDamageTypes'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a GetEstimatedDamageToTarget message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.GetEstimatedDamageToTarget} GetEstimatedDamageToTarget
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetEstimatedDamageToTarget.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetEstimatedDamageToTarget message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetEstimatedDamageToTarget.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.unit))
                        return "unit: integer expected";
                    if (typeof message.bCurrentlyAvailable !== "boolean")
                        return "bCurrentlyAvailable: boolean expected";
                    if (!$util.isInteger(message.hTarget))
                        return "hTarget: integer expected";
                    if (typeof message.fDuration !== "number")
                        return "fDuration: number expected";
                    if (!$util.isInteger(message.nDamageTypes))
                        return "nDamageTypes: integer expected";
                    return null;
                };
    
                /**
                 * Creates a GetEstimatedDamageToTarget message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.GetEstimatedDamageToTarget} GetEstimatedDamageToTarget
                 */
                GetEstimatedDamageToTarget.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.GetEstimatedDamageToTarget();
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    if (object.bCurrentlyAvailable != null)
                        message.bCurrentlyAvailable = Boolean(object.bCurrentlyAvailable);
                    if (object.hTarget != null)
                        message.hTarget = object.hTarget | 0;
                    if (object.fDuration != null)
                        message.fDuration = Number(object.fDuration);
                    if (object.nDamageTypes != null)
                        message.nDamageTypes = object.nDamageTypes | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetEstimatedDamageToTarget message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @static
                 * @param {CMsgBotWorldState.Action.GetEstimatedDamageToTarget} message GetEstimatedDamageToTarget
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetEstimatedDamageToTarget.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.unit = 0;
                        object.bCurrentlyAvailable = false;
                        object.hTarget = 0;
                        object.fDuration = 0;
                        object.nDamageTypes = 0;
                    }
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    if (message.bCurrentlyAvailable != null && message.hasOwnProperty("bCurrentlyAvailable"))
                        object.bCurrentlyAvailable = message.bCurrentlyAvailable;
                    if (message.hTarget != null && message.hasOwnProperty("hTarget"))
                        object.hTarget = message.hTarget;
                    if (message.fDuration != null && message.hasOwnProperty("fDuration"))
                        object.fDuration = options.json && !isFinite(message.fDuration) ? String(message.fDuration) : message.fDuration;
                    if (message.nDamageTypes != null && message.hasOwnProperty("nDamageTypes"))
                        object.nDamageTypes = message.nDamageTypes;
                    return object;
                };
    
                /**
                 * Converts this GetEstimatedDamageToTarget to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.GetEstimatedDamageToTarget
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetEstimatedDamageToTarget.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GetEstimatedDamageToTarget;
            })();
    
            Action.Glyph = (function() {
    
                /**
                 * Properties of a Glyph.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IGlyph
                 * @property {number} unit Glyph unit
                 */
    
                /**
                 * Constructs a new Glyph.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a Glyph.
                 * @implements IGlyph
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IGlyph=} [properties] Properties to set
                 */
                function Glyph(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Glyph unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @instance
                 */
                Glyph.prototype.unit = 0;
    
                /**
                 * Creates a new Glyph instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {CMsgBotWorldState.Action.IGlyph=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.Glyph} Glyph instance
                 */
                Glyph.create = function create(properties) {
                    return new Glyph(properties);
                };
    
                /**
                 * Encodes the specified Glyph message. Does not implicitly {@link CMsgBotWorldState.Action.Glyph.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {CMsgBotWorldState.Action.IGlyph} message Glyph message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Glyph.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.unit);
                    return writer;
                };
    
                /**
                 * Encodes the specified Glyph message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.Glyph.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {CMsgBotWorldState.Action.IGlyph} message Glyph message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Glyph.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Glyph message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.Glyph} Glyph
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Glyph.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.Glyph();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.unit = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("unit"))
                        throw $util.ProtocolError("missing required 'unit'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a Glyph message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.Glyph} Glyph
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Glyph.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Glyph message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Glyph.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.unit))
                        return "unit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Glyph message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.Glyph} Glyph
                 */
                Glyph.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.Glyph)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.Glyph();
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Glyph message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @static
                 * @param {CMsgBotWorldState.Action.Glyph} message Glyph
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Glyph.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.unit = 0;
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    return object;
                };
    
                /**
                 * Converts this Glyph to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.Glyph
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Glyph.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Glyph;
            })();
    
            Action.SoftReset = (function() {
    
                /**
                 * Properties of a SoftReset.
                 * @memberof CMsgBotWorldState.Action
                 * @interface ISoftReset
                 * @property {string|null} [minigameConfig] SoftReset minigameConfig
                 * @property {string|null} [snapshotData] SoftReset snapshotData
                 */
    
                /**
                 * Constructs a new SoftReset.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a SoftReset.
                 * @implements ISoftReset
                 * @constructor
                 * @param {CMsgBotWorldState.Action.ISoftReset=} [properties] Properties to set
                 */
                function SoftReset(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SoftReset minigameConfig.
                 * @member {string} minigameConfig
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @instance
                 */
                SoftReset.prototype.minigameConfig = "";
    
                /**
                 * SoftReset snapshotData.
                 * @member {string} snapshotData
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @instance
                 */
                SoftReset.prototype.snapshotData = "";
    
                /**
                 * Creates a new SoftReset instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {CMsgBotWorldState.Action.ISoftReset=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.SoftReset} SoftReset instance
                 */
                SoftReset.create = function create(properties) {
                    return new SoftReset(properties);
                };
    
                /**
                 * Encodes the specified SoftReset message. Does not implicitly {@link CMsgBotWorldState.Action.SoftReset.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {CMsgBotWorldState.Action.ISoftReset} message SoftReset message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SoftReset.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.minigameConfig != null && Object.hasOwnProperty.call(message, "minigameConfig"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.minigameConfig);
                    if (message.snapshotData != null && Object.hasOwnProperty.call(message, "snapshotData"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.snapshotData);
                    return writer;
                };
    
                /**
                 * Encodes the specified SoftReset message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.SoftReset.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {CMsgBotWorldState.Action.ISoftReset} message SoftReset message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SoftReset.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SoftReset message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.SoftReset} SoftReset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SoftReset.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.SoftReset();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.minigameConfig = reader.string();
                            break;
                        case 2:
                            message.snapshotData = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SoftReset message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.SoftReset} SoftReset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SoftReset.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SoftReset message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SoftReset.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.minigameConfig != null && message.hasOwnProperty("minigameConfig"))
                        if (!$util.isString(message.minigameConfig))
                            return "minigameConfig: string expected";
                    if (message.snapshotData != null && message.hasOwnProperty("snapshotData"))
                        if (!$util.isString(message.snapshotData))
                            return "snapshotData: string expected";
                    return null;
                };
    
                /**
                 * Creates a SoftReset message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.SoftReset} SoftReset
                 */
                SoftReset.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.SoftReset)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.SoftReset();
                    if (object.minigameConfig != null)
                        message.minigameConfig = String(object.minigameConfig);
                    if (object.snapshotData != null)
                        message.snapshotData = String(object.snapshotData);
                    return message;
                };
    
                /**
                 * Creates a plain object from a SoftReset message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @static
                 * @param {CMsgBotWorldState.Action.SoftReset} message SoftReset
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SoftReset.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.minigameConfig = "";
                        object.snapshotData = "";
                    }
                    if (message.minigameConfig != null && message.hasOwnProperty("minigameConfig"))
                        object.minigameConfig = message.minigameConfig;
                    if (message.snapshotData != null && message.hasOwnProperty("snapshotData"))
                        object.snapshotData = message.snapshotData;
                    return object;
                };
    
                /**
                 * Converts this SoftReset to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.SoftReset
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SoftReset.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SoftReset;
            })();
    
            Action.Buyback = (function() {
    
                /**
                 * Properties of a Buyback.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IBuyback
                 * @property {number} unit Buyback unit
                 */
    
                /**
                 * Constructs a new Buyback.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a Buyback.
                 * @implements IBuyback
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IBuyback=} [properties] Properties to set
                 */
                function Buyback(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Buyback unit.
                 * @member {number} unit
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @instance
                 */
                Buyback.prototype.unit = 0;
    
                /**
                 * Creates a new Buyback instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {CMsgBotWorldState.Action.IBuyback=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.Buyback} Buyback instance
                 */
                Buyback.create = function create(properties) {
                    return new Buyback(properties);
                };
    
                /**
                 * Encodes the specified Buyback message. Does not implicitly {@link CMsgBotWorldState.Action.Buyback.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {CMsgBotWorldState.Action.IBuyback} message Buyback message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Buyback.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.unit);
                    return writer;
                };
    
                /**
                 * Encodes the specified Buyback message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.Buyback.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {CMsgBotWorldState.Action.IBuyback} message Buyback message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Buyback.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Buyback message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.Buyback} Buyback
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Buyback.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.Buyback();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.unit = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("unit"))
                        throw $util.ProtocolError("missing required 'unit'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a Buyback message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.Buyback} Buyback
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Buyback.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Buyback message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Buyback.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.unit))
                        return "unit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Buyback message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.Buyback} Buyback
                 */
                Buyback.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.Buyback)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.Buyback();
                    if (object.unit != null)
                        message.unit = object.unit | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Buyback message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @static
                 * @param {CMsgBotWorldState.Action.Buyback} message Buyback
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Buyback.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.unit = 0;
                    if (message.unit != null && message.hasOwnProperty("unit"))
                        object.unit = message.unit;
                    return object;
                };
    
                /**
                 * Converts this Buyback to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.Buyback
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Buyback.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Buyback;
            })();
    
            Action.ScriptingDebugDrawText = (function() {
    
                /**
                 * Properties of a ScriptingDebugDrawText.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IScriptingDebugDrawText
                 * @property {CMsgBotWorldState.IVector} origin ScriptingDebugDrawText origin
                 * @property {string} text ScriptingDebugDrawText text
                 * @property {boolean} bViewCheck ScriptingDebugDrawText bViewCheck
                 * @property {number} duration ScriptingDebugDrawText duration
                 */
    
                /**
                 * Constructs a new ScriptingDebugDrawText.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a ScriptingDebugDrawText.
                 * @implements IScriptingDebugDrawText
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawText=} [properties] Properties to set
                 */
                function ScriptingDebugDrawText(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ScriptingDebugDrawText origin.
                 * @member {CMsgBotWorldState.IVector} origin
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @instance
                 */
                ScriptingDebugDrawText.prototype.origin = null;
    
                /**
                 * ScriptingDebugDrawText text.
                 * @member {string} text
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @instance
                 */
                ScriptingDebugDrawText.prototype.text = "";
    
                /**
                 * ScriptingDebugDrawText bViewCheck.
                 * @member {boolean} bViewCheck
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @instance
                 */
                ScriptingDebugDrawText.prototype.bViewCheck = false;
    
                /**
                 * ScriptingDebugDrawText duration.
                 * @member {number} duration
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @instance
                 */
                ScriptingDebugDrawText.prototype.duration = 0;
    
                /**
                 * Creates a new ScriptingDebugDrawText instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawText=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawText} ScriptingDebugDrawText instance
                 */
                ScriptingDebugDrawText.create = function create(properties) {
                    return new ScriptingDebugDrawText(properties);
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawText message. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawText.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawText} message ScriptingDebugDrawText message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawText.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    $root.CMsgBotWorldState.Vector.encode(message.origin, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.bViewCheck);
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.duration);
                    return writer;
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawText message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawText.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawText} message ScriptingDebugDrawText message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawText.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScriptingDebugDrawText message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawText} ScriptingDebugDrawText
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawText.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawText();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.origin = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.text = reader.string();
                            break;
                        case 3:
                            message.bViewCheck = reader.bool();
                            break;
                        case 4:
                            message.duration = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("origin"))
                        throw $util.ProtocolError("missing required 'origin'", { instance: message });
                    if (!message.hasOwnProperty("text"))
                        throw $util.ProtocolError("missing required 'text'", { instance: message });
                    if (!message.hasOwnProperty("bViewCheck"))
                        throw $util.ProtocolError("missing required 'bViewCheck'", { instance: message });
                    if (!message.hasOwnProperty("duration"))
                        throw $util.ProtocolError("missing required 'duration'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a ScriptingDebugDrawText message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawText} ScriptingDebugDrawText
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawText.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScriptingDebugDrawText message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScriptingDebugDrawText.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.origin);
                        if (error)
                            return "origin." + error;
                    }
                    if (!$util.isString(message.text))
                        return "text: string expected";
                    if (typeof message.bViewCheck !== "boolean")
                        return "bViewCheck: boolean expected";
                    if (typeof message.duration !== "number")
                        return "duration: number expected";
                    return null;
                };
    
                /**
                 * Creates a ScriptingDebugDrawText message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawText} ScriptingDebugDrawText
                 */
                ScriptingDebugDrawText.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.ScriptingDebugDrawText)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawText();
                    if (object.origin != null) {
                        if (typeof object.origin !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawText.origin: object expected");
                        message.origin = $root.CMsgBotWorldState.Vector.fromObject(object.origin);
                    }
                    if (object.text != null)
                        message.text = String(object.text);
                    if (object.bViewCheck != null)
                        message.bViewCheck = Boolean(object.bViewCheck);
                    if (object.duration != null)
                        message.duration = Number(object.duration);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ScriptingDebugDrawText message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @static
                 * @param {CMsgBotWorldState.Action.ScriptingDebugDrawText} message ScriptingDebugDrawText
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScriptingDebugDrawText.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.origin = null;
                        object.text = "";
                        object.bViewCheck = false;
                        object.duration = 0;
                    }
                    if (message.origin != null && message.hasOwnProperty("origin"))
                        object.origin = $root.CMsgBotWorldState.Vector.toObject(message.origin, options);
                    if (message.text != null && message.hasOwnProperty("text"))
                        object.text = message.text;
                    if (message.bViewCheck != null && message.hasOwnProperty("bViewCheck"))
                        object.bViewCheck = message.bViewCheck;
                    if (message.duration != null && message.hasOwnProperty("duration"))
                        object.duration = options.json && !isFinite(message.duration) ? String(message.duration) : message.duration;
                    return object;
                };
    
                /**
                 * Converts this ScriptingDebugDrawText to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawText
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScriptingDebugDrawText.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScriptingDebugDrawText;
            })();
    
            Action.ScriptingDebugDrawLine = (function() {
    
                /**
                 * Properties of a ScriptingDebugDrawLine.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IScriptingDebugDrawLine
                 * @property {CMsgBotWorldState.IVector} origin ScriptingDebugDrawLine origin
                 * @property {CMsgBotWorldState.IVector} target ScriptingDebugDrawLine target
                 * @property {number} r ScriptingDebugDrawLine r
                 * @property {number} g ScriptingDebugDrawLine g
                 * @property {number} b ScriptingDebugDrawLine b
                 * @property {boolean} ztest ScriptingDebugDrawLine ztest
                 * @property {number} duration ScriptingDebugDrawLine duration
                 */
    
                /**
                 * Constructs a new ScriptingDebugDrawLine.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a ScriptingDebugDrawLine.
                 * @implements IScriptingDebugDrawLine
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawLine=} [properties] Properties to set
                 */
                function ScriptingDebugDrawLine(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ScriptingDebugDrawLine origin.
                 * @member {CMsgBotWorldState.IVector} origin
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 */
                ScriptingDebugDrawLine.prototype.origin = null;
    
                /**
                 * ScriptingDebugDrawLine target.
                 * @member {CMsgBotWorldState.IVector} target
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 */
                ScriptingDebugDrawLine.prototype.target = null;
    
                /**
                 * ScriptingDebugDrawLine r.
                 * @member {number} r
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 */
                ScriptingDebugDrawLine.prototype.r = 0;
    
                /**
                 * ScriptingDebugDrawLine g.
                 * @member {number} g
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 */
                ScriptingDebugDrawLine.prototype.g = 0;
    
                /**
                 * ScriptingDebugDrawLine b.
                 * @member {number} b
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 */
                ScriptingDebugDrawLine.prototype.b = 0;
    
                /**
                 * ScriptingDebugDrawLine ztest.
                 * @member {boolean} ztest
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 */
                ScriptingDebugDrawLine.prototype.ztest = false;
    
                /**
                 * ScriptingDebugDrawLine duration.
                 * @member {number} duration
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 */
                ScriptingDebugDrawLine.prototype.duration = 0;
    
                /**
                 * Creates a new ScriptingDebugDrawLine instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawLine=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawLine} ScriptingDebugDrawLine instance
                 */
                ScriptingDebugDrawLine.create = function create(properties) {
                    return new ScriptingDebugDrawLine(properties);
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawLine message. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawLine.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawLine} message ScriptingDebugDrawLine message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawLine.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    $root.CMsgBotWorldState.Vector.encode(message.origin, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    $root.CMsgBotWorldState.Vector.encode(message.target, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.r);
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.g);
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.b);
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.ztest);
                    writer.uint32(/* id 7, wireType 5 =*/61).float(message.duration);
                    return writer;
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawLine message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawLine.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawLine} message ScriptingDebugDrawLine message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawLine.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScriptingDebugDrawLine message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawLine} ScriptingDebugDrawLine
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawLine.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.origin = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.target = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.r = reader.int32();
                            break;
                        case 4:
                            message.g = reader.int32();
                            break;
                        case 5:
                            message.b = reader.int32();
                            break;
                        case 6:
                            message.ztest = reader.bool();
                            break;
                        case 7:
                            message.duration = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("origin"))
                        throw $util.ProtocolError("missing required 'origin'", { instance: message });
                    if (!message.hasOwnProperty("target"))
                        throw $util.ProtocolError("missing required 'target'", { instance: message });
                    if (!message.hasOwnProperty("r"))
                        throw $util.ProtocolError("missing required 'r'", { instance: message });
                    if (!message.hasOwnProperty("g"))
                        throw $util.ProtocolError("missing required 'g'", { instance: message });
                    if (!message.hasOwnProperty("b"))
                        throw $util.ProtocolError("missing required 'b'", { instance: message });
                    if (!message.hasOwnProperty("ztest"))
                        throw $util.ProtocolError("missing required 'ztest'", { instance: message });
                    if (!message.hasOwnProperty("duration"))
                        throw $util.ProtocolError("missing required 'duration'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a ScriptingDebugDrawLine message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawLine} ScriptingDebugDrawLine
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawLine.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScriptingDebugDrawLine message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScriptingDebugDrawLine.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.origin);
                        if (error)
                            return "origin." + error;
                    }
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.target);
                        if (error)
                            return "target." + error;
                    }
                    if (!$util.isInteger(message.r))
                        return "r: integer expected";
                    if (!$util.isInteger(message.g))
                        return "g: integer expected";
                    if (!$util.isInteger(message.b))
                        return "b: integer expected";
                    if (typeof message.ztest !== "boolean")
                        return "ztest: boolean expected";
                    if (typeof message.duration !== "number")
                        return "duration: number expected";
                    return null;
                };
    
                /**
                 * Creates a ScriptingDebugDrawLine message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawLine} ScriptingDebugDrawLine
                 */
                ScriptingDebugDrawLine.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawLine();
                    if (object.origin != null) {
                        if (typeof object.origin !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawLine.origin: object expected");
                        message.origin = $root.CMsgBotWorldState.Vector.fromObject(object.origin);
                    }
                    if (object.target != null) {
                        if (typeof object.target !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawLine.target: object expected");
                        message.target = $root.CMsgBotWorldState.Vector.fromObject(object.target);
                    }
                    if (object.r != null)
                        message.r = object.r | 0;
                    if (object.g != null)
                        message.g = object.g | 0;
                    if (object.b != null)
                        message.b = object.b | 0;
                    if (object.ztest != null)
                        message.ztest = Boolean(object.ztest);
                    if (object.duration != null)
                        message.duration = Number(object.duration);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ScriptingDebugDrawLine message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @static
                 * @param {CMsgBotWorldState.Action.ScriptingDebugDrawLine} message ScriptingDebugDrawLine
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScriptingDebugDrawLine.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.origin = null;
                        object.target = null;
                        object.r = 0;
                        object.g = 0;
                        object.b = 0;
                        object.ztest = false;
                        object.duration = 0;
                    }
                    if (message.origin != null && message.hasOwnProperty("origin"))
                        object.origin = $root.CMsgBotWorldState.Vector.toObject(message.origin, options);
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = $root.CMsgBotWorldState.Vector.toObject(message.target, options);
                    if (message.r != null && message.hasOwnProperty("r"))
                        object.r = message.r;
                    if (message.g != null && message.hasOwnProperty("g"))
                        object.g = message.g;
                    if (message.b != null && message.hasOwnProperty("b"))
                        object.b = message.b;
                    if (message.ztest != null && message.hasOwnProperty("ztest"))
                        object.ztest = message.ztest;
                    if (message.duration != null && message.hasOwnProperty("duration"))
                        object.duration = options.json && !isFinite(message.duration) ? String(message.duration) : message.duration;
                    return object;
                };
    
                /**
                 * Converts this ScriptingDebugDrawLine to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawLine
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScriptingDebugDrawLine.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScriptingDebugDrawLine;
            })();
    
            Action.ScriptingDebugDrawScreenText = (function() {
    
                /**
                 * Properties of a ScriptingDebugDrawScreenText.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IScriptingDebugDrawScreenText
                 * @property {number} x ScriptingDebugDrawScreenText x
                 * @property {number} y ScriptingDebugDrawScreenText y
                 * @property {number} lineOffset ScriptingDebugDrawScreenText lineOffset
                 * @property {string} text ScriptingDebugDrawScreenText text
                 * @property {number} r ScriptingDebugDrawScreenText r
                 * @property {number} g ScriptingDebugDrawScreenText g
                 * @property {number} b ScriptingDebugDrawScreenText b
                 * @property {number} a ScriptingDebugDrawScreenText a
                 * @property {number} duration ScriptingDebugDrawScreenText duration
                 */
    
                /**
                 * Constructs a new ScriptingDebugDrawScreenText.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a ScriptingDebugDrawScreenText.
                 * @implements IScriptingDebugDrawScreenText
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawScreenText=} [properties] Properties to set
                 */
                function ScriptingDebugDrawScreenText(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ScriptingDebugDrawScreenText x.
                 * @member {number} x
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.x = 0;
    
                /**
                 * ScriptingDebugDrawScreenText y.
                 * @member {number} y
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.y = 0;
    
                /**
                 * ScriptingDebugDrawScreenText lineOffset.
                 * @member {number} lineOffset
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.lineOffset = 0;
    
                /**
                 * ScriptingDebugDrawScreenText text.
                 * @member {string} text
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.text = "";
    
                /**
                 * ScriptingDebugDrawScreenText r.
                 * @member {number} r
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.r = 0;
    
                /**
                 * ScriptingDebugDrawScreenText g.
                 * @member {number} g
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.g = 0;
    
                /**
                 * ScriptingDebugDrawScreenText b.
                 * @member {number} b
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.b = 0;
    
                /**
                 * ScriptingDebugDrawScreenText a.
                 * @member {number} a
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.a = 0;
    
                /**
                 * ScriptingDebugDrawScreenText duration.
                 * @member {number} duration
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 */
                ScriptingDebugDrawScreenText.prototype.duration = 0;
    
                /**
                 * Creates a new ScriptingDebugDrawScreenText instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawScreenText=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawScreenText} ScriptingDebugDrawScreenText instance
                 */
                ScriptingDebugDrawScreenText.create = function create(properties) {
                    return new ScriptingDebugDrawScreenText(properties);
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawScreenText message. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawScreenText} message ScriptingDebugDrawScreenText message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawScreenText.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                    writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lineOffset);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.text);
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.r);
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.g);
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.b);
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.a);
                    writer.uint32(/* id 9, wireType 5 =*/77).float(message.duration);
                    return writer;
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawScreenText message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawScreenText} message ScriptingDebugDrawScreenText message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawScreenText.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScriptingDebugDrawScreenText message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawScreenText} ScriptingDebugDrawScreenText
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawScreenText.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.x = reader.float();
                            break;
                        case 2:
                            message.y = reader.float();
                            break;
                        case 3:
                            message.lineOffset = reader.int32();
                            break;
                        case 4:
                            message.text = reader.string();
                            break;
                        case 5:
                            message.r = reader.int32();
                            break;
                        case 6:
                            message.g = reader.int32();
                            break;
                        case 7:
                            message.b = reader.int32();
                            break;
                        case 8:
                            message.a = reader.int32();
                            break;
                        case 9:
                            message.duration = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("x"))
                        throw $util.ProtocolError("missing required 'x'", { instance: message });
                    if (!message.hasOwnProperty("y"))
                        throw $util.ProtocolError("missing required 'y'", { instance: message });
                    if (!message.hasOwnProperty("lineOffset"))
                        throw $util.ProtocolError("missing required 'lineOffset'", { instance: message });
                    if (!message.hasOwnProperty("text"))
                        throw $util.ProtocolError("missing required 'text'", { instance: message });
                    if (!message.hasOwnProperty("r"))
                        throw $util.ProtocolError("missing required 'r'", { instance: message });
                    if (!message.hasOwnProperty("g"))
                        throw $util.ProtocolError("missing required 'g'", { instance: message });
                    if (!message.hasOwnProperty("b"))
                        throw $util.ProtocolError("missing required 'b'", { instance: message });
                    if (!message.hasOwnProperty("a"))
                        throw $util.ProtocolError("missing required 'a'", { instance: message });
                    if (!message.hasOwnProperty("duration"))
                        throw $util.ProtocolError("missing required 'duration'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a ScriptingDebugDrawScreenText message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawScreenText} ScriptingDebugDrawScreenText
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawScreenText.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScriptingDebugDrawScreenText message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScriptingDebugDrawScreenText.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (typeof message.x !== "number")
                        return "x: number expected";
                    if (typeof message.y !== "number")
                        return "y: number expected";
                    if (!$util.isInteger(message.lineOffset))
                        return "lineOffset: integer expected";
                    if (!$util.isString(message.text))
                        return "text: string expected";
                    if (!$util.isInteger(message.r))
                        return "r: integer expected";
                    if (!$util.isInteger(message.g))
                        return "g: integer expected";
                    if (!$util.isInteger(message.b))
                        return "b: integer expected";
                    if (!$util.isInteger(message.a))
                        return "a: integer expected";
                    if (typeof message.duration !== "number")
                        return "duration: number expected";
                    return null;
                };
    
                /**
                 * Creates a ScriptingDebugDrawScreenText message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawScreenText} ScriptingDebugDrawScreenText
                 */
                ScriptingDebugDrawScreenText.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText();
                    if (object.x != null)
                        message.x = Number(object.x);
                    if (object.y != null)
                        message.y = Number(object.y);
                    if (object.lineOffset != null)
                        message.lineOffset = object.lineOffset | 0;
                    if (object.text != null)
                        message.text = String(object.text);
                    if (object.r != null)
                        message.r = object.r | 0;
                    if (object.g != null)
                        message.g = object.g | 0;
                    if (object.b != null)
                        message.b = object.b | 0;
                    if (object.a != null)
                        message.a = object.a | 0;
                    if (object.duration != null)
                        message.duration = Number(object.duration);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ScriptingDebugDrawScreenText message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @static
                 * @param {CMsgBotWorldState.Action.ScriptingDebugDrawScreenText} message ScriptingDebugDrawScreenText
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScriptingDebugDrawScreenText.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.x = 0;
                        object.y = 0;
                        object.lineOffset = 0;
                        object.text = "";
                        object.r = 0;
                        object.g = 0;
                        object.b = 0;
                        object.a = 0;
                        object.duration = 0;
                    }
                    if (message.x != null && message.hasOwnProperty("x"))
                        object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                    if (message.y != null && message.hasOwnProperty("y"))
                        object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                    if (message.lineOffset != null && message.hasOwnProperty("lineOffset"))
                        object.lineOffset = message.lineOffset;
                    if (message.text != null && message.hasOwnProperty("text"))
                        object.text = message.text;
                    if (message.r != null && message.hasOwnProperty("r"))
                        object.r = message.r;
                    if (message.g != null && message.hasOwnProperty("g"))
                        object.g = message.g;
                    if (message.b != null && message.hasOwnProperty("b"))
                        object.b = message.b;
                    if (message.a != null && message.hasOwnProperty("a"))
                        object.a = message.a;
                    if (message.duration != null && message.hasOwnProperty("duration"))
                        object.duration = options.json && !isFinite(message.duration) ? String(message.duration) : message.duration;
                    return object;
                };
    
                /**
                 * Converts this ScriptingDebugDrawScreenText to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScriptingDebugDrawScreenText.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScriptingDebugDrawScreenText;
            })();
    
            Action.ScriptingDebugScreenTextPretty = (function() {
    
                /**
                 * Properties of a ScriptingDebugScreenTextPretty.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IScriptingDebugScreenTextPretty
                 * @property {number} x ScriptingDebugScreenTextPretty x
                 * @property {number} y ScriptingDebugScreenTextPretty y
                 * @property {number} lineOffset ScriptingDebugScreenTextPretty lineOffset
                 * @property {string} text ScriptingDebugScreenTextPretty text
                 * @property {number} r ScriptingDebugScreenTextPretty r
                 * @property {number} g ScriptingDebugScreenTextPretty g
                 * @property {number} b ScriptingDebugScreenTextPretty b
                 * @property {number} a ScriptingDebugScreenTextPretty a
                 * @property {number} duration ScriptingDebugScreenTextPretty duration
                 * @property {string} font ScriptingDebugScreenTextPretty font
                 * @property {number} size ScriptingDebugScreenTextPretty size
                 * @property {boolean} bBold ScriptingDebugScreenTextPretty bBold
                 */
    
                /**
                 * Constructs a new ScriptingDebugScreenTextPretty.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a ScriptingDebugScreenTextPretty.
                 * @implements IScriptingDebugScreenTextPretty
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IScriptingDebugScreenTextPretty=} [properties] Properties to set
                 */
                function ScriptingDebugScreenTextPretty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ScriptingDebugScreenTextPretty x.
                 * @member {number} x
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.x = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty y.
                 * @member {number} y
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.y = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty lineOffset.
                 * @member {number} lineOffset
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.lineOffset = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty text.
                 * @member {string} text
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.text = "";
    
                /**
                 * ScriptingDebugScreenTextPretty r.
                 * @member {number} r
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.r = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty g.
                 * @member {number} g
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.g = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty b.
                 * @member {number} b
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.b = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty a.
                 * @member {number} a
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.a = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty duration.
                 * @member {number} duration
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.duration = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty font.
                 * @member {string} font
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.font = "";
    
                /**
                 * ScriptingDebugScreenTextPretty size.
                 * @member {number} size
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.size = 0;
    
                /**
                 * ScriptingDebugScreenTextPretty bBold.
                 * @member {boolean} bBold
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 */
                ScriptingDebugScreenTextPretty.prototype.bBold = false;
    
                /**
                 * Creates a new ScriptingDebugScreenTextPretty instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugScreenTextPretty=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty} ScriptingDebugScreenTextPretty instance
                 */
                ScriptingDebugScreenTextPretty.create = function create(properties) {
                    return new ScriptingDebugScreenTextPretty(properties);
                };
    
                /**
                 * Encodes the specified ScriptingDebugScreenTextPretty message. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugScreenTextPretty} message ScriptingDebugScreenTextPretty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugScreenTextPretty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                    writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lineOffset);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.text);
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.r);
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.g);
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.b);
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.a);
                    writer.uint32(/* id 9, wireType 5 =*/77).float(message.duration);
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.font);
                    writer.uint32(/* id 11, wireType 5 =*/93).float(message.size);
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.bBold);
                    return writer;
                };
    
                /**
                 * Encodes the specified ScriptingDebugScreenTextPretty message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugScreenTextPretty} message ScriptingDebugScreenTextPretty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugScreenTextPretty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScriptingDebugScreenTextPretty message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty} ScriptingDebugScreenTextPretty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugScreenTextPretty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.x = reader.float();
                            break;
                        case 2:
                            message.y = reader.float();
                            break;
                        case 3:
                            message.lineOffset = reader.int32();
                            break;
                        case 4:
                            message.text = reader.string();
                            break;
                        case 5:
                            message.r = reader.int32();
                            break;
                        case 6:
                            message.g = reader.int32();
                            break;
                        case 7:
                            message.b = reader.int32();
                            break;
                        case 8:
                            message.a = reader.int32();
                            break;
                        case 9:
                            message.duration = reader.float();
                            break;
                        case 10:
                            message.font = reader.string();
                            break;
                        case 11:
                            message.size = reader.float();
                            break;
                        case 12:
                            message.bBold = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("x"))
                        throw $util.ProtocolError("missing required 'x'", { instance: message });
                    if (!message.hasOwnProperty("y"))
                        throw $util.ProtocolError("missing required 'y'", { instance: message });
                    if (!message.hasOwnProperty("lineOffset"))
                        throw $util.ProtocolError("missing required 'lineOffset'", { instance: message });
                    if (!message.hasOwnProperty("text"))
                        throw $util.ProtocolError("missing required 'text'", { instance: message });
                    if (!message.hasOwnProperty("r"))
                        throw $util.ProtocolError("missing required 'r'", { instance: message });
                    if (!message.hasOwnProperty("g"))
                        throw $util.ProtocolError("missing required 'g'", { instance: message });
                    if (!message.hasOwnProperty("b"))
                        throw $util.ProtocolError("missing required 'b'", { instance: message });
                    if (!message.hasOwnProperty("a"))
                        throw $util.ProtocolError("missing required 'a'", { instance: message });
                    if (!message.hasOwnProperty("duration"))
                        throw $util.ProtocolError("missing required 'duration'", { instance: message });
                    if (!message.hasOwnProperty("font"))
                        throw $util.ProtocolError("missing required 'font'", { instance: message });
                    if (!message.hasOwnProperty("size"))
                        throw $util.ProtocolError("missing required 'size'", { instance: message });
                    if (!message.hasOwnProperty("bBold"))
                        throw $util.ProtocolError("missing required 'bBold'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a ScriptingDebugScreenTextPretty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty} ScriptingDebugScreenTextPretty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugScreenTextPretty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScriptingDebugScreenTextPretty message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScriptingDebugScreenTextPretty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (typeof message.x !== "number")
                        return "x: number expected";
                    if (typeof message.y !== "number")
                        return "y: number expected";
                    if (!$util.isInteger(message.lineOffset))
                        return "lineOffset: integer expected";
                    if (!$util.isString(message.text))
                        return "text: string expected";
                    if (!$util.isInteger(message.r))
                        return "r: integer expected";
                    if (!$util.isInteger(message.g))
                        return "g: integer expected";
                    if (!$util.isInteger(message.b))
                        return "b: integer expected";
                    if (!$util.isInteger(message.a))
                        return "a: integer expected";
                    if (typeof message.duration !== "number")
                        return "duration: number expected";
                    if (!$util.isString(message.font))
                        return "font: string expected";
                    if (typeof message.size !== "number")
                        return "size: number expected";
                    if (typeof message.bBold !== "boolean")
                        return "bBold: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a ScriptingDebugScreenTextPretty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty} ScriptingDebugScreenTextPretty
                 */
                ScriptingDebugScreenTextPretty.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty();
                    if (object.x != null)
                        message.x = Number(object.x);
                    if (object.y != null)
                        message.y = Number(object.y);
                    if (object.lineOffset != null)
                        message.lineOffset = object.lineOffset | 0;
                    if (object.text != null)
                        message.text = String(object.text);
                    if (object.r != null)
                        message.r = object.r | 0;
                    if (object.g != null)
                        message.g = object.g | 0;
                    if (object.b != null)
                        message.b = object.b | 0;
                    if (object.a != null)
                        message.a = object.a | 0;
                    if (object.duration != null)
                        message.duration = Number(object.duration);
                    if (object.font != null)
                        message.font = String(object.font);
                    if (object.size != null)
                        message.size = Number(object.size);
                    if (object.bBold != null)
                        message.bBold = Boolean(object.bBold);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ScriptingDebugScreenTextPretty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @static
                 * @param {CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty} message ScriptingDebugScreenTextPretty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScriptingDebugScreenTextPretty.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.x = 0;
                        object.y = 0;
                        object.lineOffset = 0;
                        object.text = "";
                        object.r = 0;
                        object.g = 0;
                        object.b = 0;
                        object.a = 0;
                        object.duration = 0;
                        object.font = "";
                        object.size = 0;
                        object.bBold = false;
                    }
                    if (message.x != null && message.hasOwnProperty("x"))
                        object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                    if (message.y != null && message.hasOwnProperty("y"))
                        object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                    if (message.lineOffset != null && message.hasOwnProperty("lineOffset"))
                        object.lineOffset = message.lineOffset;
                    if (message.text != null && message.hasOwnProperty("text"))
                        object.text = message.text;
                    if (message.r != null && message.hasOwnProperty("r"))
                        object.r = message.r;
                    if (message.g != null && message.hasOwnProperty("g"))
                        object.g = message.g;
                    if (message.b != null && message.hasOwnProperty("b"))
                        object.b = message.b;
                    if (message.a != null && message.hasOwnProperty("a"))
                        object.a = message.a;
                    if (message.duration != null && message.hasOwnProperty("duration"))
                        object.duration = options.json && !isFinite(message.duration) ? String(message.duration) : message.duration;
                    if (message.font != null && message.hasOwnProperty("font"))
                        object.font = message.font;
                    if (message.size != null && message.hasOwnProperty("size"))
                        object.size = options.json && !isFinite(message.size) ? String(message.size) : message.size;
                    if (message.bBold != null && message.hasOwnProperty("bBold"))
                        object.bBold = message.bBold;
                    return object;
                };
    
                /**
                 * Converts this ScriptingDebugScreenTextPretty to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScriptingDebugScreenTextPretty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScriptingDebugScreenTextPretty;
            })();
    
            Action.ScriptingDebugDrawBox = (function() {
    
                /**
                 * Properties of a ScriptingDebugDrawBox.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IScriptingDebugDrawBox
                 * @property {CMsgBotWorldState.IVector} origin ScriptingDebugDrawBox origin
                 * @property {CMsgBotWorldState.IVector} minimum ScriptingDebugDrawBox minimum
                 * @property {CMsgBotWorldState.IVector} maximum ScriptingDebugDrawBox maximum
                 * @property {number} r ScriptingDebugDrawBox r
                 * @property {number} g ScriptingDebugDrawBox g
                 * @property {number} b ScriptingDebugDrawBox b
                 * @property {number} a ScriptingDebugDrawBox a
                 * @property {number} duration ScriptingDebugDrawBox duration
                 */
    
                /**
                 * Constructs a new ScriptingDebugDrawBox.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a ScriptingDebugDrawBox.
                 * @implements IScriptingDebugDrawBox
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawBox=} [properties] Properties to set
                 */
                function ScriptingDebugDrawBox(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ScriptingDebugDrawBox origin.
                 * @member {CMsgBotWorldState.IVector} origin
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.origin = null;
    
                /**
                 * ScriptingDebugDrawBox minimum.
                 * @member {CMsgBotWorldState.IVector} minimum
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.minimum = null;
    
                /**
                 * ScriptingDebugDrawBox maximum.
                 * @member {CMsgBotWorldState.IVector} maximum
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.maximum = null;
    
                /**
                 * ScriptingDebugDrawBox r.
                 * @member {number} r
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.r = 0;
    
                /**
                 * ScriptingDebugDrawBox g.
                 * @member {number} g
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.g = 0;
    
                /**
                 * ScriptingDebugDrawBox b.
                 * @member {number} b
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.b = 0;
    
                /**
                 * ScriptingDebugDrawBox a.
                 * @member {number} a
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.a = 0;
    
                /**
                 * ScriptingDebugDrawBox duration.
                 * @member {number} duration
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 */
                ScriptingDebugDrawBox.prototype.duration = 0;
    
                /**
                 * Creates a new ScriptingDebugDrawBox instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawBox=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawBox} ScriptingDebugDrawBox instance
                 */
                ScriptingDebugDrawBox.create = function create(properties) {
                    return new ScriptingDebugDrawBox(properties);
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawBox message. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawBox.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawBox} message ScriptingDebugDrawBox message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawBox.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    $root.CMsgBotWorldState.Vector.encode(message.origin, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    $root.CMsgBotWorldState.Vector.encode(message.minimum, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    $root.CMsgBotWorldState.Vector.encode(message.maximum, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.r);
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.g);
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.b);
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.a);
                    writer.uint32(/* id 8, wireType 5 =*/69).float(message.duration);
                    return writer;
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawBox message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawBox.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawBox} message ScriptingDebugDrawBox message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawBox.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScriptingDebugDrawBox message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawBox} ScriptingDebugDrawBox
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawBox.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.origin = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.minimum = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.maximum = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.r = reader.int32();
                            break;
                        case 5:
                            message.g = reader.int32();
                            break;
                        case 6:
                            message.b = reader.int32();
                            break;
                        case 7:
                            message.a = reader.int32();
                            break;
                        case 8:
                            message.duration = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("origin"))
                        throw $util.ProtocolError("missing required 'origin'", { instance: message });
                    if (!message.hasOwnProperty("minimum"))
                        throw $util.ProtocolError("missing required 'minimum'", { instance: message });
                    if (!message.hasOwnProperty("maximum"))
                        throw $util.ProtocolError("missing required 'maximum'", { instance: message });
                    if (!message.hasOwnProperty("r"))
                        throw $util.ProtocolError("missing required 'r'", { instance: message });
                    if (!message.hasOwnProperty("g"))
                        throw $util.ProtocolError("missing required 'g'", { instance: message });
                    if (!message.hasOwnProperty("b"))
                        throw $util.ProtocolError("missing required 'b'", { instance: message });
                    if (!message.hasOwnProperty("a"))
                        throw $util.ProtocolError("missing required 'a'", { instance: message });
                    if (!message.hasOwnProperty("duration"))
                        throw $util.ProtocolError("missing required 'duration'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a ScriptingDebugDrawBox message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawBox} ScriptingDebugDrawBox
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawBox.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScriptingDebugDrawBox message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScriptingDebugDrawBox.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.origin);
                        if (error)
                            return "origin." + error;
                    }
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.minimum);
                        if (error)
                            return "minimum." + error;
                    }
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.maximum);
                        if (error)
                            return "maximum." + error;
                    }
                    if (!$util.isInteger(message.r))
                        return "r: integer expected";
                    if (!$util.isInteger(message.g))
                        return "g: integer expected";
                    if (!$util.isInteger(message.b))
                        return "b: integer expected";
                    if (!$util.isInteger(message.a))
                        return "a: integer expected";
                    if (typeof message.duration !== "number")
                        return "duration: number expected";
                    return null;
                };
    
                /**
                 * Creates a ScriptingDebugDrawBox message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawBox} ScriptingDebugDrawBox
                 */
                ScriptingDebugDrawBox.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawBox();
                    if (object.origin != null) {
                        if (typeof object.origin !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawBox.origin: object expected");
                        message.origin = $root.CMsgBotWorldState.Vector.fromObject(object.origin);
                    }
                    if (object.minimum != null) {
                        if (typeof object.minimum !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawBox.minimum: object expected");
                        message.minimum = $root.CMsgBotWorldState.Vector.fromObject(object.minimum);
                    }
                    if (object.maximum != null) {
                        if (typeof object.maximum !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawBox.maximum: object expected");
                        message.maximum = $root.CMsgBotWorldState.Vector.fromObject(object.maximum);
                    }
                    if (object.r != null)
                        message.r = object.r | 0;
                    if (object.g != null)
                        message.g = object.g | 0;
                    if (object.b != null)
                        message.b = object.b | 0;
                    if (object.a != null)
                        message.a = object.a | 0;
                    if (object.duration != null)
                        message.duration = Number(object.duration);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ScriptingDebugDrawBox message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @static
                 * @param {CMsgBotWorldState.Action.ScriptingDebugDrawBox} message ScriptingDebugDrawBox
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScriptingDebugDrawBox.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.origin = null;
                        object.minimum = null;
                        object.maximum = null;
                        object.r = 0;
                        object.g = 0;
                        object.b = 0;
                        object.a = 0;
                        object.duration = 0;
                    }
                    if (message.origin != null && message.hasOwnProperty("origin"))
                        object.origin = $root.CMsgBotWorldState.Vector.toObject(message.origin, options);
                    if (message.minimum != null && message.hasOwnProperty("minimum"))
                        object.minimum = $root.CMsgBotWorldState.Vector.toObject(message.minimum, options);
                    if (message.maximum != null && message.hasOwnProperty("maximum"))
                        object.maximum = $root.CMsgBotWorldState.Vector.toObject(message.maximum, options);
                    if (message.r != null && message.hasOwnProperty("r"))
                        object.r = message.r;
                    if (message.g != null && message.hasOwnProperty("g"))
                        object.g = message.g;
                    if (message.b != null && message.hasOwnProperty("b"))
                        object.b = message.b;
                    if (message.a != null && message.hasOwnProperty("a"))
                        object.a = message.a;
                    if (message.duration != null && message.hasOwnProperty("duration"))
                        object.duration = options.json && !isFinite(message.duration) ? String(message.duration) : message.duration;
                    return object;
                };
    
                /**
                 * Converts this ScriptingDebugDrawBox to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawBox
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScriptingDebugDrawBox.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScriptingDebugDrawBox;
            })();
    
            Action.ScriptingDebugDrawCircle = (function() {
    
                /**
                 * Properties of a ScriptingDebugDrawCircle.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IScriptingDebugDrawCircle
                 * @property {CMsgBotWorldState.IVector} center ScriptingDebugDrawCircle center
                 * @property {CMsgBotWorldState.IVector} vRgb ScriptingDebugDrawCircle vRgb
                 * @property {number} a ScriptingDebugDrawCircle a
                 * @property {number} rad ScriptingDebugDrawCircle rad
                 * @property {boolean} ztest ScriptingDebugDrawCircle ztest
                 * @property {number} duration ScriptingDebugDrawCircle duration
                 */
    
                /**
                 * Constructs a new ScriptingDebugDrawCircle.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a ScriptingDebugDrawCircle.
                 * @implements IScriptingDebugDrawCircle
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawCircle=} [properties] Properties to set
                 */
                function ScriptingDebugDrawCircle(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ScriptingDebugDrawCircle center.
                 * @member {CMsgBotWorldState.IVector} center
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @instance
                 */
                ScriptingDebugDrawCircle.prototype.center = null;
    
                /**
                 * ScriptingDebugDrawCircle vRgb.
                 * @member {CMsgBotWorldState.IVector} vRgb
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @instance
                 */
                ScriptingDebugDrawCircle.prototype.vRgb = null;
    
                /**
                 * ScriptingDebugDrawCircle a.
                 * @member {number} a
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @instance
                 */
                ScriptingDebugDrawCircle.prototype.a = 0;
    
                /**
                 * ScriptingDebugDrawCircle rad.
                 * @member {number} rad
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @instance
                 */
                ScriptingDebugDrawCircle.prototype.rad = 0;
    
                /**
                 * ScriptingDebugDrawCircle ztest.
                 * @member {boolean} ztest
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @instance
                 */
                ScriptingDebugDrawCircle.prototype.ztest = false;
    
                /**
                 * ScriptingDebugDrawCircle duration.
                 * @member {number} duration
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @instance
                 */
                ScriptingDebugDrawCircle.prototype.duration = 0;
    
                /**
                 * Creates a new ScriptingDebugDrawCircle instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawCircle=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawCircle} ScriptingDebugDrawCircle instance
                 */
                ScriptingDebugDrawCircle.create = function create(properties) {
                    return new ScriptingDebugDrawCircle(properties);
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawCircle message. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawCircle.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawCircle} message ScriptingDebugDrawCircle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawCircle.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    $root.CMsgBotWorldState.Vector.encode(message.center, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    $root.CMsgBotWorldState.Vector.encode(message.vRgb, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.a);
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.rad);
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.ztest);
                    writer.uint32(/* id 6, wireType 5 =*/53).float(message.duration);
                    return writer;
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawCircle message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawCircle.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawCircle} message ScriptingDebugDrawCircle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawCircle.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScriptingDebugDrawCircle message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawCircle} ScriptingDebugDrawCircle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawCircle.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.center = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.vRgb = $root.CMsgBotWorldState.Vector.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.a = reader.float();
                            break;
                        case 4:
                            message.rad = reader.float();
                            break;
                        case 5:
                            message.ztest = reader.bool();
                            break;
                        case 6:
                            message.duration = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("center"))
                        throw $util.ProtocolError("missing required 'center'", { instance: message });
                    if (!message.hasOwnProperty("vRgb"))
                        throw $util.ProtocolError("missing required 'vRgb'", { instance: message });
                    if (!message.hasOwnProperty("a"))
                        throw $util.ProtocolError("missing required 'a'", { instance: message });
                    if (!message.hasOwnProperty("rad"))
                        throw $util.ProtocolError("missing required 'rad'", { instance: message });
                    if (!message.hasOwnProperty("ztest"))
                        throw $util.ProtocolError("missing required 'ztest'", { instance: message });
                    if (!message.hasOwnProperty("duration"))
                        throw $util.ProtocolError("missing required 'duration'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes a ScriptingDebugDrawCircle message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawCircle} ScriptingDebugDrawCircle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawCircle.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScriptingDebugDrawCircle message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScriptingDebugDrawCircle.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.center);
                        if (error)
                            return "center." + error;
                    }
                    {
                        var error = $root.CMsgBotWorldState.Vector.verify(message.vRgb);
                        if (error)
                            return "vRgb." + error;
                    }
                    if (typeof message.a !== "number")
                        return "a: number expected";
                    if (typeof message.rad !== "number")
                        return "rad: number expected";
                    if (typeof message.ztest !== "boolean")
                        return "ztest: boolean expected";
                    if (typeof message.duration !== "number")
                        return "duration: number expected";
                    return null;
                };
    
                /**
                 * Creates a ScriptingDebugDrawCircle message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawCircle} ScriptingDebugDrawCircle
                 */
                ScriptingDebugDrawCircle.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawCircle();
                    if (object.center != null) {
                        if (typeof object.center !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawCircle.center: object expected");
                        message.center = $root.CMsgBotWorldState.Vector.fromObject(object.center);
                    }
                    if (object.vRgb != null) {
                        if (typeof object.vRgb !== "object")
                            throw TypeError(".CMsgBotWorldState.Action.ScriptingDebugDrawCircle.vRgb: object expected");
                        message.vRgb = $root.CMsgBotWorldState.Vector.fromObject(object.vRgb);
                    }
                    if (object.a != null)
                        message.a = Number(object.a);
                    if (object.rad != null)
                        message.rad = Number(object.rad);
                    if (object.ztest != null)
                        message.ztest = Boolean(object.ztest);
                    if (object.duration != null)
                        message.duration = Number(object.duration);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ScriptingDebugDrawCircle message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @static
                 * @param {CMsgBotWorldState.Action.ScriptingDebugDrawCircle} message ScriptingDebugDrawCircle
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScriptingDebugDrawCircle.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.center = null;
                        object.vRgb = null;
                        object.a = 0;
                        object.rad = 0;
                        object.ztest = false;
                        object.duration = 0;
                    }
                    if (message.center != null && message.hasOwnProperty("center"))
                        object.center = $root.CMsgBotWorldState.Vector.toObject(message.center, options);
                    if (message.vRgb != null && message.hasOwnProperty("vRgb"))
                        object.vRgb = $root.CMsgBotWorldState.Vector.toObject(message.vRgb, options);
                    if (message.a != null && message.hasOwnProperty("a"))
                        object.a = options.json && !isFinite(message.a) ? String(message.a) : message.a;
                    if (message.rad != null && message.hasOwnProperty("rad"))
                        object.rad = options.json && !isFinite(message.rad) ? String(message.rad) : message.rad;
                    if (message.ztest != null && message.hasOwnProperty("ztest"))
                        object.ztest = message.ztest;
                    if (message.duration != null && message.hasOwnProperty("duration"))
                        object.duration = options.json && !isFinite(message.duration) ? String(message.duration) : message.duration;
                    return object;
                };
    
                /**
                 * Converts this ScriptingDebugDrawCircle to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawCircle
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScriptingDebugDrawCircle.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScriptingDebugDrawCircle;
            })();
    
            Action.ScriptingDebugDrawClear = (function() {
    
                /**
                 * Properties of a ScriptingDebugDrawClear.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IScriptingDebugDrawClear
                 */
    
                /**
                 * Constructs a new ScriptingDebugDrawClear.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents a ScriptingDebugDrawClear.
                 * @implements IScriptingDebugDrawClear
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawClear=} [properties] Properties to set
                 */
                function ScriptingDebugDrawClear(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new ScriptingDebugDrawClear instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawClear=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawClear} ScriptingDebugDrawClear instance
                 */
                ScriptingDebugDrawClear.create = function create(properties) {
                    return new ScriptingDebugDrawClear(properties);
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawClear message. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawClear.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawClear} message ScriptingDebugDrawClear message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawClear.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified ScriptingDebugDrawClear message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.ScriptingDebugDrawClear.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {CMsgBotWorldState.Action.IScriptingDebugDrawClear} message ScriptingDebugDrawClear message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScriptingDebugDrawClear.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScriptingDebugDrawClear message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawClear} ScriptingDebugDrawClear
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawClear.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ScriptingDebugDrawClear message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawClear} ScriptingDebugDrawClear
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScriptingDebugDrawClear.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScriptingDebugDrawClear message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScriptingDebugDrawClear.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a ScriptingDebugDrawClear message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.ScriptingDebugDrawClear} ScriptingDebugDrawClear
                 */
                ScriptingDebugDrawClear.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear)
                        return object;
                    return new $root.CMsgBotWorldState.Action.ScriptingDebugDrawClear();
                };
    
                /**
                 * Creates a plain object from a ScriptingDebugDrawClear message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @static
                 * @param {CMsgBotWorldState.Action.ScriptingDebugDrawClear} message ScriptingDebugDrawClear
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScriptingDebugDrawClear.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this ScriptingDebugDrawClear to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.ScriptingDebugDrawClear
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScriptingDebugDrawClear.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScriptingDebugDrawClear;
            })();
    
            Action.OceanWinGame = (function() {
    
                /**
                 * Properties of an OceanWinGame.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IOceanWinGame
                 * @property {string} team OceanWinGame team
                 * @property {number|null} [reward] OceanWinGame reward
                 */
    
                /**
                 * Constructs a new OceanWinGame.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents an OceanWinGame.
                 * @implements IOceanWinGame
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IOceanWinGame=} [properties] Properties to set
                 */
                function OceanWinGame(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OceanWinGame team.
                 * @member {string} team
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @instance
                 */
                OceanWinGame.prototype.team = "";
    
                /**
                 * OceanWinGame reward.
                 * @member {number} reward
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @instance
                 */
                OceanWinGame.prototype.reward = 0;
    
                /**
                 * Creates a new OceanWinGame instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {CMsgBotWorldState.Action.IOceanWinGame=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.OceanWinGame} OceanWinGame instance
                 */
                OceanWinGame.create = function create(properties) {
                    return new OceanWinGame(properties);
                };
    
                /**
                 * Encodes the specified OceanWinGame message. Does not implicitly {@link CMsgBotWorldState.Action.OceanWinGame.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {CMsgBotWorldState.Action.IOceanWinGame} message OceanWinGame message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OceanWinGame.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.team);
                    if (message.reward != null && Object.hasOwnProperty.call(message, "reward"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.reward);
                    return writer;
                };
    
                /**
                 * Encodes the specified OceanWinGame message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.OceanWinGame.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {CMsgBotWorldState.Action.IOceanWinGame} message OceanWinGame message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OceanWinGame.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OceanWinGame message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.OceanWinGame} OceanWinGame
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OceanWinGame.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.OceanWinGame();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.team = reader.string();
                            break;
                        case 2:
                            message.reward = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("team"))
                        throw $util.ProtocolError("missing required 'team'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes an OceanWinGame message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.OceanWinGame} OceanWinGame
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OceanWinGame.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OceanWinGame message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OceanWinGame.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.team))
                        return "team: string expected";
                    if (message.reward != null && message.hasOwnProperty("reward"))
                        if (typeof message.reward !== "number")
                            return "reward: number expected";
                    return null;
                };
    
                /**
                 * Creates an OceanWinGame message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.OceanWinGame} OceanWinGame
                 */
                OceanWinGame.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.OceanWinGame)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.OceanWinGame();
                    if (object.team != null)
                        message.team = String(object.team);
                    if (object.reward != null)
                        message.reward = Number(object.reward);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OceanWinGame message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @static
                 * @param {CMsgBotWorldState.Action.OceanWinGame} message OceanWinGame
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OceanWinGame.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.team = "";
                        object.reward = 0;
                    }
                    if (message.team != null && message.hasOwnProperty("team"))
                        object.team = message.team;
                    if (message.reward != null && message.hasOwnProperty("reward"))
                        object.reward = options.json && !isFinite(message.reward) ? String(message.reward) : message.reward;
                    return object;
                };
    
                /**
                 * Converts this OceanWinGame to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.OceanWinGame
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OceanWinGame.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OceanWinGame;
            })();
    
            Action.OceanReplayCorrectTime = (function() {
    
                /**
                 * Properties of an OceanReplayCorrectTime.
                 * @memberof CMsgBotWorldState.Action
                 * @interface IOceanReplayCorrectTime
                 * @property {number} delta OceanReplayCorrectTime delta
                 */
    
                /**
                 * Constructs a new OceanReplayCorrectTime.
                 * @memberof CMsgBotWorldState.Action
                 * @classdesc Represents an OceanReplayCorrectTime.
                 * @implements IOceanReplayCorrectTime
                 * @constructor
                 * @param {CMsgBotWorldState.Action.IOceanReplayCorrectTime=} [properties] Properties to set
                 */
                function OceanReplayCorrectTime(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OceanReplayCorrectTime delta.
                 * @member {number} delta
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @instance
                 */
                OceanReplayCorrectTime.prototype.delta = 0;
    
                /**
                 * Creates a new OceanReplayCorrectTime instance using the specified properties.
                 * @function create
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {CMsgBotWorldState.Action.IOceanReplayCorrectTime=} [properties] Properties to set
                 * @returns {CMsgBotWorldState.Action.OceanReplayCorrectTime} OceanReplayCorrectTime instance
                 */
                OceanReplayCorrectTime.create = function create(properties) {
                    return new OceanReplayCorrectTime(properties);
                };
    
                /**
                 * Encodes the specified OceanReplayCorrectTime message. Does not implicitly {@link CMsgBotWorldState.Action.OceanReplayCorrectTime.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {CMsgBotWorldState.Action.IOceanReplayCorrectTime} message OceanReplayCorrectTime message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OceanReplayCorrectTime.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.delta);
                    return writer;
                };
    
                /**
                 * Encodes the specified OceanReplayCorrectTime message, length delimited. Does not implicitly {@link CMsgBotWorldState.Action.OceanReplayCorrectTime.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {CMsgBotWorldState.Action.IOceanReplayCorrectTime} message OceanReplayCorrectTime message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OceanReplayCorrectTime.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OceanReplayCorrectTime message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgBotWorldState.Action.OceanReplayCorrectTime} OceanReplayCorrectTime
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OceanReplayCorrectTime.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgBotWorldState.Action.OceanReplayCorrectTime();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.delta = reader.float();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("delta"))
                        throw $util.ProtocolError("missing required 'delta'", { instance: message });
                    return message;
                };
    
                /**
                 * Decodes an OceanReplayCorrectTime message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgBotWorldState.Action.OceanReplayCorrectTime} OceanReplayCorrectTime
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OceanReplayCorrectTime.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OceanReplayCorrectTime message.
                 * @function verify
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OceanReplayCorrectTime.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (typeof message.delta !== "number")
                        return "delta: number expected";
                    return null;
                };
    
                /**
                 * Creates an OceanReplayCorrectTime message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgBotWorldState.Action.OceanReplayCorrectTime} OceanReplayCorrectTime
                 */
                OceanReplayCorrectTime.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgBotWorldState.Action.OceanReplayCorrectTime)
                        return object;
                    var message = new $root.CMsgBotWorldState.Action.OceanReplayCorrectTime();
                    if (object.delta != null)
                        message.delta = Number(object.delta);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OceanReplayCorrectTime message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @static
                 * @param {CMsgBotWorldState.Action.OceanReplayCorrectTime} message OceanReplayCorrectTime
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OceanReplayCorrectTime.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.delta = 0;
                    if (message.delta != null && message.hasOwnProperty("delta"))
                        object.delta = options.json && !isFinite(message.delta) ? String(message.delta) : message.delta;
                    return object;
                };
    
                /**
                 * Converts this OceanReplayCorrectTime to JSON.
                 * @function toJSON
                 * @memberof CMsgBotWorldState.Action.OceanReplayCorrectTime
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OceanReplayCorrectTime.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OceanReplayCorrectTime;
            })();
    
            /**
             * Type enum.
             * @name CMsgBotWorldState.Action.Type
             * @enum {number}
             * @property {number} DOTA_UNIT_ORDER_NONE=0 DOTA_UNIT_ORDER_NONE value
             * @property {number} DOTA_UNIT_ORDER_MOVE_TO_POSITION=1 DOTA_UNIT_ORDER_MOVE_TO_POSITION value
             * @property {number} DOTA_UNIT_ORDER_MOVE_TO_TARGET=2 DOTA_UNIT_ORDER_MOVE_TO_TARGET value
             * @property {number} DOTA_UNIT_ORDER_ATTACK_MOVE=3 DOTA_UNIT_ORDER_ATTACK_MOVE value
             * @property {number} DOTA_UNIT_ORDER_ATTACK_TARGET=4 DOTA_UNIT_ORDER_ATTACK_TARGET value
             * @property {number} DOTA_UNIT_ORDER_CAST_POSITION=5 DOTA_UNIT_ORDER_CAST_POSITION value
             * @property {number} DOTA_UNIT_ORDER_CAST_TARGET=6 DOTA_UNIT_ORDER_CAST_TARGET value
             * @property {number} DOTA_UNIT_ORDER_CAST_TARGET_TREE=7 DOTA_UNIT_ORDER_CAST_TARGET_TREE value
             * @property {number} DOTA_UNIT_ORDER_CAST_NO_TARGET=8 DOTA_UNIT_ORDER_CAST_NO_TARGET value
             * @property {number} DOTA_UNIT_ORDER_CAST_TOGGLE=9 DOTA_UNIT_ORDER_CAST_TOGGLE value
             * @property {number} DOTA_UNIT_ORDER_HOLD_POSITION=10 DOTA_UNIT_ORDER_HOLD_POSITION value
             * @property {number} DOTA_UNIT_ORDER_TRAIN_ABILITY=11 DOTA_UNIT_ORDER_TRAIN_ABILITY value
             * @property {number} DOTA_UNIT_ORDER_DROP_ITEM=12 DOTA_UNIT_ORDER_DROP_ITEM value
             * @property {number} DOTA_UNIT_ORDER_GIVE_ITEM=13 DOTA_UNIT_ORDER_GIVE_ITEM value
             * @property {number} DOTA_UNIT_ORDER_PICKUP_ITEM=14 DOTA_UNIT_ORDER_PICKUP_ITEM value
             * @property {number} DOTA_UNIT_ORDER_PICKUP_RUNE=15 DOTA_UNIT_ORDER_PICKUP_RUNE value
             * @property {number} DOTA_UNIT_ORDER_PURCHASE_ITEM=16 DOTA_UNIT_ORDER_PURCHASE_ITEM value
             * @property {number} DOTA_UNIT_ORDER_SELL_ITEM=17 DOTA_UNIT_ORDER_SELL_ITEM value
             * @property {number} DOTA_UNIT_ORDER_DISASSEMBLE_ITEM=18 DOTA_UNIT_ORDER_DISASSEMBLE_ITEM value
             * @property {number} DOTA_UNIT_ORDER_MOVE_ITEM=19 DOTA_UNIT_ORDER_MOVE_ITEM value
             * @property {number} DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO=20 DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO value
             * @property {number} DOTA_UNIT_ORDER_STOP=21 DOTA_UNIT_ORDER_STOP value
             * @property {number} DOTA_UNIT_ORDER_TAUNT=22 DOTA_UNIT_ORDER_TAUNT value
             * @property {number} DOTA_UNIT_ORDER_BUYBACK=23 DOTA_UNIT_ORDER_BUYBACK value
             * @property {number} DOTA_UNIT_ORDER_GLYPH=24 DOTA_UNIT_ORDER_GLYPH value
             * @property {number} DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH=25 DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH value
             * @property {number} DOTA_UNIT_ORDER_CAST_RUNE=26 DOTA_UNIT_ORDER_CAST_RUNE value
             * @property {number} DOTA_UNIT_ORDER_PING_ABILITY=27 DOTA_UNIT_ORDER_PING_ABILITY value
             * @property {number} DOTA_UNIT_ORDER_MOVE_TO_DIRECTION=28 DOTA_UNIT_ORDER_MOVE_TO_DIRECTION value
             * @property {number} DOTA_UNIT_ORDER_PATROL=29 DOTA_UNIT_ORDER_PATROL value
             * @property {number} DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION=30 DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION value
             * @property {number} DOTA_UNIT_ORDER_RADAR=31 DOTA_UNIT_ORDER_RADAR value
             * @property {number} DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK=32 DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK value
             * @property {number} DOTA_UNIT_ORDER_CONTINUE=33 DOTA_UNIT_ORDER_CONTINUE value
             * @property {number} ACTION_CHAT=40 ACTION_CHAT value
             * @property {number} ACTION_SWAP_ITEMS=41 ACTION_SWAP_ITEMS value
             * @property {number} ACTION_USE_SHRINE=42 ACTION_USE_SHRINE value
             * @property {number} ACTION_COURIER=43 ACTION_COURIER value
             * @property {number} RPC_GET_ACTUAL_INCOMING_DAMAGE=44 RPC_GET_ACTUAL_INCOMING_DAMAGE value
             * @property {number} RPC_GET_ESTIMATED_DAMAGE_TO_TARGET=45 RPC_GET_ESTIMATED_DAMAGE_TO_TARGET value
             * @property {number} OCEAN_FULL_UPDATE=50 OCEAN_FULL_UPDATE value
             * @property {number} OCEAN_RELOAD_CODE=51 OCEAN_RELOAD_CODE value
             * @property {number} OCEAN_SOFT_RESET=52 OCEAN_SOFT_RESET value
             * @property {number} OCEAN_HOLD_FRAMESKIP=54 OCEAN_HOLD_FRAMESKIP value
             * @property {number} OCEAN_WIN_GAME=63 OCEAN_WIN_GAME value
             * @property {number} OCEAN_REPLAY_CORRECT_TIME=64 OCEAN_REPLAY_CORRECT_TIME value
             * @property {number} SCRIPTING_DEBUG_DRAW_TEXT=55 SCRIPTING_DEBUG_DRAW_TEXT value
             * @property {number} SCRIPTING_DEBUG_DRAW_LINE=56 SCRIPTING_DEBUG_DRAW_LINE value
             * @property {number} SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION=57 SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION value
             * @property {number} SCRIPTING_DEBUG_DRAW_SCREEN_TEXT=58 SCRIPTING_DEBUG_DRAW_SCREEN_TEXT value
             * @property {number} SCRIPTING_DEBUG_DRAW_BOX=59 SCRIPTING_DEBUG_DRAW_BOX value
             * @property {number} SCRIPTING_DEBUG_DRAW_CIRCLE=60 SCRIPTING_DEBUG_DRAW_CIRCLE value
             * @property {number} SCRIPTING_DEBUG_DRAW_CLEAR=61 SCRIPTING_DEBUG_DRAW_CLEAR value
             * @property {number} SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY=65 SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY value
             * @property {number} DOTA_UNIT_ORDER_MOVE_DIRECTLY=62 DOTA_UNIT_ORDER_MOVE_DIRECTLY value
             */
            Action.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DOTA_UNIT_ORDER_NONE"] = 0;
                values[valuesById[1] = "DOTA_UNIT_ORDER_MOVE_TO_POSITION"] = 1;
                values[valuesById[2] = "DOTA_UNIT_ORDER_MOVE_TO_TARGET"] = 2;
                values[valuesById[3] = "DOTA_UNIT_ORDER_ATTACK_MOVE"] = 3;
                values[valuesById[4] = "DOTA_UNIT_ORDER_ATTACK_TARGET"] = 4;
                values[valuesById[5] = "DOTA_UNIT_ORDER_CAST_POSITION"] = 5;
                values[valuesById[6] = "DOTA_UNIT_ORDER_CAST_TARGET"] = 6;
                values[valuesById[7] = "DOTA_UNIT_ORDER_CAST_TARGET_TREE"] = 7;
                values[valuesById[8] = "DOTA_UNIT_ORDER_CAST_NO_TARGET"] = 8;
                values[valuesById[9] = "DOTA_UNIT_ORDER_CAST_TOGGLE"] = 9;
                values[valuesById[10] = "DOTA_UNIT_ORDER_HOLD_POSITION"] = 10;
                values[valuesById[11] = "DOTA_UNIT_ORDER_TRAIN_ABILITY"] = 11;
                values[valuesById[12] = "DOTA_UNIT_ORDER_DROP_ITEM"] = 12;
                values[valuesById[13] = "DOTA_UNIT_ORDER_GIVE_ITEM"] = 13;
                values[valuesById[14] = "DOTA_UNIT_ORDER_PICKUP_ITEM"] = 14;
                values[valuesById[15] = "DOTA_UNIT_ORDER_PICKUP_RUNE"] = 15;
                values[valuesById[16] = "DOTA_UNIT_ORDER_PURCHASE_ITEM"] = 16;
                values[valuesById[17] = "DOTA_UNIT_ORDER_SELL_ITEM"] = 17;
                values[valuesById[18] = "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM"] = 18;
                values[valuesById[19] = "DOTA_UNIT_ORDER_MOVE_ITEM"] = 19;
                values[valuesById[20] = "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO"] = 20;
                values[valuesById[21] = "DOTA_UNIT_ORDER_STOP"] = 21;
                values[valuesById[22] = "DOTA_UNIT_ORDER_TAUNT"] = 22;
                values[valuesById[23] = "DOTA_UNIT_ORDER_BUYBACK"] = 23;
                values[valuesById[24] = "DOTA_UNIT_ORDER_GLYPH"] = 24;
                values[valuesById[25] = "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH"] = 25;
                values[valuesById[26] = "DOTA_UNIT_ORDER_CAST_RUNE"] = 26;
                values[valuesById[27] = "DOTA_UNIT_ORDER_PING_ABILITY"] = 27;
                values[valuesById[28] = "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION"] = 28;
                values[valuesById[29] = "DOTA_UNIT_ORDER_PATROL"] = 29;
                values[valuesById[30] = "DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION"] = 30;
                values[valuesById[31] = "DOTA_UNIT_ORDER_RADAR"] = 31;
                values[valuesById[32] = "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK"] = 32;
                values[valuesById[33] = "DOTA_UNIT_ORDER_CONTINUE"] = 33;
                values[valuesById[40] = "ACTION_CHAT"] = 40;
                values[valuesById[41] = "ACTION_SWAP_ITEMS"] = 41;
                values[valuesById[42] = "ACTION_USE_SHRINE"] = 42;
                values[valuesById[43] = "ACTION_COURIER"] = 43;
                values[valuesById[44] = "RPC_GET_ACTUAL_INCOMING_DAMAGE"] = 44;
                values[valuesById[45] = "RPC_GET_ESTIMATED_DAMAGE_TO_TARGET"] = 45;
                values[valuesById[50] = "OCEAN_FULL_UPDATE"] = 50;
                values[valuesById[51] = "OCEAN_RELOAD_CODE"] = 51;
                values[valuesById[52] = "OCEAN_SOFT_RESET"] = 52;
                values[valuesById[54] = "OCEAN_HOLD_FRAMESKIP"] = 54;
                values[valuesById[63] = "OCEAN_WIN_GAME"] = 63;
                values[valuesById[64] = "OCEAN_REPLAY_CORRECT_TIME"] = 64;
                values[valuesById[55] = "SCRIPTING_DEBUG_DRAW_TEXT"] = 55;
                values[valuesById[56] = "SCRIPTING_DEBUG_DRAW_LINE"] = 56;
                values[valuesById[57] = "SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION"] = 57;
                values[valuesById[58] = "SCRIPTING_DEBUG_DRAW_SCREEN_TEXT"] = 58;
                values[valuesById[59] = "SCRIPTING_DEBUG_DRAW_BOX"] = 59;
                values[valuesById[60] = "SCRIPTING_DEBUG_DRAW_CIRCLE"] = 60;
                values[valuesById[61] = "SCRIPTING_DEBUG_DRAW_CLEAR"] = 61;
                values[valuesById[65] = "SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY"] = 65;
                values[valuesById[62] = "DOTA_UNIT_ORDER_MOVE_DIRECTLY"] = 62;
                return values;
            })();
    
            return Action;
        })();
    
        /**
         * UnitType enum.
         * @name CMsgBotWorldState.UnitType
         * @enum {number}
         * @property {number} INVALID=0 INVALID value
         * @property {number} HERO=1 HERO value
         * @property {number} CREEP_HERO=2 CREEP_HERO value
         * @property {number} LANE_CREEP=3 LANE_CREEP value
         * @property {number} JUNGLE_CREEP=4 JUNGLE_CREEP value
         * @property {number} ROSHAN=5 ROSHAN value
         * @property {number} TOWER=6 TOWER value
         * @property {number} BARRACKS=7 BARRACKS value
         * @property {number} SHRINE=8 SHRINE value
         * @property {number} FORT=9 FORT value
         * @property {number} BUILDING=10 BUILDING value
         * @property {number} COURIER=11 COURIER value
         * @property {number} WARD=12 WARD value
         */
        CMsgBotWorldState.UnitType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "INVALID"] = 0;
            values[valuesById[1] = "HERO"] = 1;
            values[valuesById[2] = "CREEP_HERO"] = 2;
            values[valuesById[3] = "LANE_CREEP"] = 3;
            values[valuesById[4] = "JUNGLE_CREEP"] = 4;
            values[valuesById[5] = "ROSHAN"] = 5;
            values[valuesById[6] = "TOWER"] = 6;
            values[valuesById[7] = "BARRACKS"] = 7;
            values[valuesById[8] = "SHRINE"] = 8;
            values[valuesById[9] = "FORT"] = 9;
            values[valuesById[10] = "BUILDING"] = 10;
            values[valuesById[11] = "COURIER"] = 11;
            values[valuesById[12] = "WARD"] = 12;
            return values;
        })();
    
        /**
         * CourierState enum.
         * @name CMsgBotWorldState.CourierState
         * @enum {number}
         * @property {number} COURIER_STATE_INIT=-1 COURIER_STATE_INIT value
         * @property {number} COURIER_STATE_IDLE=0 COURIER_STATE_IDLE value
         * @property {number} COURIER_STATE_AT_BASE=1 COURIER_STATE_AT_BASE value
         * @property {number} COURIER_STATE_MOVING=2 COURIER_STATE_MOVING value
         * @property {number} COURIER_STATE_DELIVERING_ITEMS=3 COURIER_STATE_DELIVERING_ITEMS value
         * @property {number} COURIER_STATE_RETURNING_TO_BASE=4 COURIER_STATE_RETURNING_TO_BASE value
         * @property {number} COURIER_STATE_DEAD=5 COURIER_STATE_DEAD value
         */
        CMsgBotWorldState.CourierState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[-1] = "COURIER_STATE_INIT"] = -1;
            values[valuesById[0] = "COURIER_STATE_IDLE"] = 0;
            values[valuesById[1] = "COURIER_STATE_AT_BASE"] = 1;
            values[valuesById[2] = "COURIER_STATE_MOVING"] = 2;
            values[valuesById[3] = "COURIER_STATE_DELIVERING_ITEMS"] = 3;
            values[valuesById[4] = "COURIER_STATE_RETURNING_TO_BASE"] = 4;
            values[valuesById[5] = "COURIER_STATE_DEAD"] = 5;
            return values;
        })();
    
        return CMsgBotWorldState;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;
    
                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";
    
                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";
    
                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";
    
                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;
    
                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;
    
                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;
    
                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;
    
                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;
    
                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;
    
                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;
    
                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;
    
                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {string|null} [experimental_map_key] FieldOptions experimental_map_key
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {boolean|null} [".map_field"] FieldOptions .map_field
                 * @property {boolean|null} [".map_key"] FieldOptions .map_key
                 * @property {number|null} [".diff_encode_field"] FieldOptions .diff_encode_field
                 * @property {boolean|null} [".delta_ignore"] FieldOptions .delta_ignore
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions experimental_map_key.
                 * @member {string} experimental_map_key
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.experimental_map_key = "";
    
                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FieldOptions .map_field.
                 * @member {boolean} .map_field
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".map_field"] = false;
    
                /**
                 * FieldOptions .map_key.
                 * @member {boolean} .map_key
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".map_key"] = false;
    
                /**
                 * FieldOptions .diff_encode_field.
                 * @member {number} .diff_encode_field
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".diff_encode_field"] = 0;
    
                /**
                 * FieldOptions .delta_ignore.
                 * @member {boolean} .delta_ignore
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".delta_ignore"] = false;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.experimental_map_key != null && Object.hasOwnProperty.call(message, "experimental_map_key"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.experimental_map_key);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".map_field"] != null && Object.hasOwnProperty.call(message, ".map_field"))
                        writer.uint32(/* id 61000, wireType 0 =*/488000).bool(message[".map_field"]);
                    if (message[".map_key"] != null && Object.hasOwnProperty.call(message, ".map_key"))
                        writer.uint32(/* id 61001, wireType 0 =*/488008).bool(message[".map_key"]);
                    if (message[".diff_encode_field"] != null && Object.hasOwnProperty.call(message, ".diff_encode_field"))
                        writer.uint32(/* id 61002, wireType 0 =*/488016).int32(message[".diff_encode_field"]);
                    if (message[".delta_ignore"] != null && Object.hasOwnProperty.call(message, ".delta_ignore"))
                        writer.uint32(/* id 61003, wireType 0 =*/488024).bool(message[".delta_ignore"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 9:
                            message.experimental_map_key = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 61000:
                            message[".map_field"] = reader.bool();
                            break;
                        case 61001:
                            message[".map_key"] = reader.bool();
                            break;
                        case 61002:
                            message[".diff_encode_field"] = reader.int32();
                            break;
                        case 61003:
                            message[".delta_ignore"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        if (!$util.isString(message.experimental_map_key))
                            return "experimental_map_key: string expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".map_field"] != null && message.hasOwnProperty(".map_field"))
                        if (typeof message[".map_field"] !== "boolean")
                            return ".map_field: boolean expected";
                    if (message[".map_key"] != null && message.hasOwnProperty(".map_key"))
                        if (typeof message[".map_key"] !== "boolean")
                            return ".map_key: boolean expected";
                    if (message[".diff_encode_field"] != null && message.hasOwnProperty(".diff_encode_field"))
                        if (!$util.isInteger(message[".diff_encode_field"]))
                            return ".diff_encode_field: integer expected";
                    if (message[".delta_ignore"] != null && message.hasOwnProperty(".delta_ignore"))
                        if (typeof message[".delta_ignore"] !== "boolean")
                            return ".delta_ignore: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.experimental_map_key != null)
                        message.experimental_map_key = String(object.experimental_map_key);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".map_field"] != null)
                        message[".map_field"] = Boolean(object[".map_field"]);
                    if (object[".map_key"] != null)
                        message[".map_key"] = Boolean(object[".map_key"]);
                    if (object[".diff_encode_field"] != null)
                        message[".diff_encode_field"] = object[".diff_encode_field"] | 0;
                    if (object[".delta_ignore"] != null)
                        message[".delta_ignore"] = Boolean(object[".delta_ignore"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.experimental_map_key = "";
                        object[".map_field"] = false;
                        object[".map_key"] = false;
                        object[".diff_encode_field"] = 0;
                        object[".delta_ignore"] = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        object.experimental_map_key = message.experimental_map_key;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".map_field"] != null && message.hasOwnProperty(".map_field"))
                        object[".map_field"] = message[".map_field"];
                    if (message[".map_key"] != null && message.hasOwnProperty(".map_key"))
                        object[".map_key"] = message[".map_key"];
                    if (message[".diff_encode_field"] != null && message.hasOwnProperty(".diff_encode_field"))
                        object[".diff_encode_field"] = message[".diff_encode_field"];
                    if (message[".delta_ignore"] != null && message.hasOwnProperty(".delta_ignore"))
                        object[".delta_ignore"] = message[".delta_ignore"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";
    
                /**
                 * UninterpretedOption positive_int_value.
                 * @member {number|Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negative_int_value.
                 * @member {number|Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;
    
                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";
    
                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();

    return $root;
});
