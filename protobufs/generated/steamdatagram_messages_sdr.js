/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    /**
     * ESteamDatagramMsgID enum.
     * @exports ESteamDatagramMsgID
     * @enum {number}
     * @property {number} k_ESteamDatagramMsg_Invalid=0 k_ESteamDatagramMsg_Invalid value
     * @property {number} k_ESteamDatagramMsg_RouterPingRequest=1 k_ESteamDatagramMsg_RouterPingRequest value
     * @property {number} k_ESteamDatagramMsg_RouterPingReply=2 k_ESteamDatagramMsg_RouterPingReply value
     * @property {number} k_ESteamDatagramMsg_GameserverPingRequest=3 k_ESteamDatagramMsg_GameserverPingRequest value
     * @property {number} k_ESteamDatagramMsg_LegacyGameserverPingReply=4 k_ESteamDatagramMsg_LegacyGameserverPingReply value
     * @property {number} k_ESteamDatagramMsg_GameserverSessionRequest=5 k_ESteamDatagramMsg_GameserverSessionRequest value
     * @property {number} k_ESteamDatagramMsg_GameserverSessionEstablished=6 k_ESteamDatagramMsg_GameserverSessionEstablished value
     * @property {number} k_ESteamDatagramMsg_NoSession=7 k_ESteamDatagramMsg_NoSession value
     * @property {number} k_ESteamDatagramMsg_Diagnostic=8 k_ESteamDatagramMsg_Diagnostic value
     * @property {number} k_ESteamDatagramMsg_DataClientToRouter=9 k_ESteamDatagramMsg_DataClientToRouter value
     * @property {number} k_ESteamDatagramMsg_DataRouterToServer=10 k_ESteamDatagramMsg_DataRouterToServer value
     * @property {number} k_ESteamDatagramMsg_DataServerToRouter=11 k_ESteamDatagramMsg_DataServerToRouter value
     * @property {number} k_ESteamDatagramMsg_DataRouterToClient=12 k_ESteamDatagramMsg_DataRouterToClient value
     * @property {number} k_ESteamDatagramMsg_Stats=13 k_ESteamDatagramMsg_Stats value
     * @property {number} k_ESteamDatagramMsg_ClientPingSampleRequest=14 k_ESteamDatagramMsg_ClientPingSampleRequest value
     * @property {number} k_ESteamDatagramMsg_ClientPingSampleReply=15 k_ESteamDatagramMsg_ClientPingSampleReply value
     * @property {number} k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary=16 k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary value
     * @property {number} k_ESteamDatagramMsg_RelayHealth=17 k_ESteamDatagramMsg_RelayHealth value
     * @property {number} k_ESteamDatagramMsg_ConnectRequest=18 k_ESteamDatagramMsg_ConnectRequest value
     * @property {number} k_ESteamDatagramMsg_ConnectOK=19 k_ESteamDatagramMsg_ConnectOK value
     * @property {number} k_ESteamDatagramMsg_ConnectionClosed=20 k_ESteamDatagramMsg_ConnectionClosed value
     * @property {number} k_ESteamDatagramMsg_NoConnection=21 k_ESteamDatagramMsg_NoConnection value
     * @property {number} k_ESteamDatagramMsg_RelayToRelayPingRequest=22 k_ESteamDatagramMsg_RelayToRelayPingRequest value
     * @property {number} k_ESteamDatagramMsg_RelayToRelayPingReply=23 k_ESteamDatagramMsg_RelayToRelayPingReply value
     * @property {number} k_ESteamDatagramMsg_P2PSessionRequest=24 k_ESteamDatagramMsg_P2PSessionRequest value
     * @property {number} k_ESteamDatagramMsg_P2PSessionEstablished=25 k_ESteamDatagramMsg_P2PSessionEstablished value
     * @property {number} k_ESteamDatagramMsg_P2PStatsClient=26 k_ESteamDatagramMsg_P2PStatsClient value
     * @property {number} k_ESteamDatagramMsg_P2PStatsRelay=27 k_ESteamDatagramMsg_P2PStatsRelay value
     * @property {number} k_ESteamDatagramMsg_P2PBadRoute=28 k_ESteamDatagramMsg_P2PBadRoute value
     * @property {number} k_ESteamDatagramMsg_GameserverPingReply=29 k_ESteamDatagramMsg_GameserverPingReply value
     * @property {number} k_ESteamDatagramMsg_GameserverRegistration=30 k_ESteamDatagramMsg_GameserverRegistration value
     */
    $root.ESteamDatagramMsgID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_ESteamDatagramMsg_Invalid"] = 0;
        values[valuesById[1] = "k_ESteamDatagramMsg_RouterPingRequest"] = 1;
        values[valuesById[2] = "k_ESteamDatagramMsg_RouterPingReply"] = 2;
        values[valuesById[3] = "k_ESteamDatagramMsg_GameserverPingRequest"] = 3;
        values[valuesById[4] = "k_ESteamDatagramMsg_LegacyGameserverPingReply"] = 4;
        values[valuesById[5] = "k_ESteamDatagramMsg_GameserverSessionRequest"] = 5;
        values[valuesById[6] = "k_ESteamDatagramMsg_GameserverSessionEstablished"] = 6;
        values[valuesById[7] = "k_ESteamDatagramMsg_NoSession"] = 7;
        values[valuesById[8] = "k_ESteamDatagramMsg_Diagnostic"] = 8;
        values[valuesById[9] = "k_ESteamDatagramMsg_DataClientToRouter"] = 9;
        values[valuesById[10] = "k_ESteamDatagramMsg_DataRouterToServer"] = 10;
        values[valuesById[11] = "k_ESteamDatagramMsg_DataServerToRouter"] = 11;
        values[valuesById[12] = "k_ESteamDatagramMsg_DataRouterToClient"] = 12;
        values[valuesById[13] = "k_ESteamDatagramMsg_Stats"] = 13;
        values[valuesById[14] = "k_ESteamDatagramMsg_ClientPingSampleRequest"] = 14;
        values[valuesById[15] = "k_ESteamDatagramMsg_ClientPingSampleReply"] = 15;
        values[valuesById[16] = "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary"] = 16;
        values[valuesById[17] = "k_ESteamDatagramMsg_RelayHealth"] = 17;
        values[valuesById[18] = "k_ESteamDatagramMsg_ConnectRequest"] = 18;
        values[valuesById[19] = "k_ESteamDatagramMsg_ConnectOK"] = 19;
        values[valuesById[20] = "k_ESteamDatagramMsg_ConnectionClosed"] = 20;
        values[valuesById[21] = "k_ESteamDatagramMsg_NoConnection"] = 21;
        values[valuesById[22] = "k_ESteamDatagramMsg_RelayToRelayPingRequest"] = 22;
        values[valuesById[23] = "k_ESteamDatagramMsg_RelayToRelayPingReply"] = 23;
        values[valuesById[24] = "k_ESteamDatagramMsg_P2PSessionRequest"] = 24;
        values[valuesById[25] = "k_ESteamDatagramMsg_P2PSessionEstablished"] = 25;
        values[valuesById[26] = "k_ESteamDatagramMsg_P2PStatsClient"] = 26;
        values[valuesById[27] = "k_ESteamDatagramMsg_P2PStatsRelay"] = 27;
        values[valuesById[28] = "k_ESteamDatagramMsg_P2PBadRoute"] = 28;
        values[valuesById[29] = "k_ESteamDatagramMsg_GameserverPingReply"] = 29;
        values[valuesById[30] = "k_ESteamDatagramMsg_GameserverRegistration"] = 30;
        return values;
    })();
    
    $root.CMsgSteamDatagramRouterPingReply = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramRouterPingReply.
         * @exports ICMsgSteamDatagramRouterPingReply
         * @interface ICMsgSteamDatagramRouterPingReply
         * @property {number|null} [client_timestamp] CMsgSteamDatagramRouterPingReply client_timestamp
         * @property {Array.<number>|null} [latency_datacenter_ids] CMsgSteamDatagramRouterPingReply latency_datacenter_ids
         * @property {Array.<number>|null} [latency_ping_ms] CMsgSteamDatagramRouterPingReply latency_ping_ms
         * @property {number|null} [your_public_ip] CMsgSteamDatagramRouterPingReply your_public_ip
         * @property {number|null} [your_public_port] CMsgSteamDatagramRouterPingReply your_public_port
         * @property {number|null} [server_time] CMsgSteamDatagramRouterPingReply server_time
         * @property {number|Long|null} [challenge] CMsgSteamDatagramRouterPingReply challenge
         * @property {number|null} [seconds_until_shutdown] CMsgSteamDatagramRouterPingReply seconds_until_shutdown
         * @property {number|null} [client_cookie] CMsgSteamDatagramRouterPingReply client_cookie
         * @property {number|null} [scoring_penalty_relay_cluster] CMsgSteamDatagramRouterPingReply scoring_penalty_relay_cluster
         * @property {number|null} [flags] CMsgSteamDatagramRouterPingReply flags
         * @property {Array.<CMsgSteamDatagramRouterPingReply.IRouteException>|null} [route_exceptions] CMsgSteamDatagramRouterPingReply route_exceptions
         * @property {Array.<CMsgSteamDatagramRouterPingReply.IAltAddress>|null} [alt_addresses] CMsgSteamDatagramRouterPingReply alt_addresses
         */
    
        /**
         * Constructs a new CMsgSteamDatagramRouterPingReply.
         * @exports CMsgSteamDatagramRouterPingReply
         * @classdesc Represents a CMsgSteamDatagramRouterPingReply.
         * @implements ICMsgSteamDatagramRouterPingReply
         * @constructor
         * @param {ICMsgSteamDatagramRouterPingReply=} [properties] Properties to set
         */
        function CMsgSteamDatagramRouterPingReply(properties) {
            this.latency_datacenter_ids = [];
            this.latency_ping_ms = [];
            this.route_exceptions = [];
            this.alt_addresses = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramRouterPingReply client_timestamp.
         * @member {number} client_timestamp
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.client_timestamp = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply latency_datacenter_ids.
         * @member {Array.<number>} latency_datacenter_ids
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.latency_datacenter_ids = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply latency_ping_ms.
         * @member {Array.<number>} latency_ping_ms
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.latency_ping_ms = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply your_public_ip.
         * @member {number} your_public_ip
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.your_public_ip = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply your_public_port.
         * @member {number} your_public_port
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.your_public_port = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply server_time.
         * @member {number} server_time
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.server_time = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply seconds_until_shutdown.
         * @member {number} seconds_until_shutdown
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.seconds_until_shutdown = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply client_cookie.
         * @member {number} client_cookie
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.client_cookie = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply scoring_penalty_relay_cluster.
         * @member {number} scoring_penalty_relay_cluster
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.scoring_penalty_relay_cluster = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply route_exceptions.
         * @member {Array.<CMsgSteamDatagramRouterPingReply.IRouteException>} route_exceptions
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.route_exceptions = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply alt_addresses.
         * @member {Array.<CMsgSteamDatagramRouterPingReply.IAltAddress>} alt_addresses
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.alt_addresses = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramRouterPingReply instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {ICMsgSteamDatagramRouterPingReply=} [properties] Properties to set
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply instance
         */
        CMsgSteamDatagramRouterPingReply.create = function create(properties) {
            return new CMsgSteamDatagramRouterPingReply(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRouterPingReply message. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {ICMsgSteamDatagramRouterPingReply} message CMsgSteamDatagramRouterPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRouterPingReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.client_timestamp != null && Object.hasOwnProperty.call(message, "client_timestamp"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.client_timestamp);
            if (message.latency_datacenter_ids != null && message.latency_datacenter_ids.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.latency_datacenter_ids.length; ++i)
                    writer.fixed32(message.latency_datacenter_ids[i]);
                writer.ldelim();
            }
            if (message.latency_ping_ms != null && message.latency_ping_ms.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.latency_ping_ms.length; ++i)
                    writer.uint32(message.latency_ping_ms[i]);
                writer.ldelim();
            }
            if (message.your_public_ip != null && Object.hasOwnProperty.call(message, "your_public_ip"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.your_public_ip);
            if (message.server_time != null && Object.hasOwnProperty.call(message, "server_time"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.server_time);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 6, wireType 1 =*/49).fixed64(message.challenge);
            if (message.seconds_until_shutdown != null && Object.hasOwnProperty.call(message, "seconds_until_shutdown"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.seconds_until_shutdown);
            if (message.client_cookie != null && Object.hasOwnProperty.call(message, "client_cookie"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.client_cookie);
            if (message.scoring_penalty_relay_cluster != null && Object.hasOwnProperty.call(message, "scoring_penalty_relay_cluster"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.scoring_penalty_relay_cluster);
            if (message.route_exceptions != null && message.route_exceptions.length)
                for (var i = 0; i < message.route_exceptions.length; ++i)
                    $root.CMsgSteamDatagramRouterPingReply.RouteException.encode(message.route_exceptions[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.your_public_port != null && Object.hasOwnProperty.call(message, "your_public_port"))
                writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.your_public_port);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.flags);
            if (message.alt_addresses != null && message.alt_addresses.length)
                for (var i = 0; i < message.alt_addresses.length; ++i)
                    $root.CMsgSteamDatagramRouterPingReply.AltAddress.encode(message.alt_addresses[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRouterPingReply message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {ICMsgSteamDatagramRouterPingReply} message CMsgSteamDatagramRouterPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRouterPingReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramRouterPingReply message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRouterPingReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterPingReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.client_timestamp = reader.fixed32();
                    break;
                case 2:
                    if (!(message.latency_datacenter_ids && message.latency_datacenter_ids.length))
                        message.latency_datacenter_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.latency_datacenter_ids.push(reader.fixed32());
                    } else
                        message.latency_datacenter_ids.push(reader.fixed32());
                    break;
                case 3:
                    if (!(message.latency_ping_ms && message.latency_ping_ms.length))
                        message.latency_ping_ms = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.latency_ping_ms.push(reader.uint32());
                    } else
                        message.latency_ping_ms.push(reader.uint32());
                    break;
                case 4:
                    message.your_public_ip = reader.fixed32();
                    break;
                case 11:
                    message.your_public_port = reader.fixed32();
                    break;
                case 5:
                    message.server_time = reader.fixed32();
                    break;
                case 6:
                    message.challenge = reader.fixed64();
                    break;
                case 7:
                    message.seconds_until_shutdown = reader.uint32();
                    break;
                case 8:
                    message.client_cookie = reader.fixed32();
                    break;
                case 9:
                    message.scoring_penalty_relay_cluster = reader.uint32();
                    break;
                case 12:
                    message.flags = reader.uint32();
                    break;
                case 10:
                    if (!(message.route_exceptions && message.route_exceptions.length))
                        message.route_exceptions = [];
                    message.route_exceptions.push($root.CMsgSteamDatagramRouterPingReply.RouteException.decode(reader, reader.uint32()));
                    break;
                case 13:
                    if (!(message.alt_addresses && message.alt_addresses.length))
                        message.alt_addresses = [];
                    message.alt_addresses.push($root.CMsgSteamDatagramRouterPingReply.AltAddress.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramRouterPingReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRouterPingReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramRouterPingReply message.
         * @function verify
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramRouterPingReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.client_timestamp != null && message.hasOwnProperty("client_timestamp"))
                if (!$util.isInteger(message.client_timestamp))
                    return "client_timestamp: integer expected";
            if (message.latency_datacenter_ids != null && message.hasOwnProperty("latency_datacenter_ids")) {
                if (!Array.isArray(message.latency_datacenter_ids))
                    return "latency_datacenter_ids: array expected";
                for (var i = 0; i < message.latency_datacenter_ids.length; ++i)
                    if (!$util.isInteger(message.latency_datacenter_ids[i]))
                        return "latency_datacenter_ids: integer[] expected";
            }
            if (message.latency_ping_ms != null && message.hasOwnProperty("latency_ping_ms")) {
                if (!Array.isArray(message.latency_ping_ms))
                    return "latency_ping_ms: array expected";
                for (var i = 0; i < message.latency_ping_ms.length; ++i)
                    if (!$util.isInteger(message.latency_ping_ms[i]))
                        return "latency_ping_ms: integer[] expected";
            }
            if (message.your_public_ip != null && message.hasOwnProperty("your_public_ip"))
                if (!$util.isInteger(message.your_public_ip))
                    return "your_public_ip: integer expected";
            if (message.your_public_port != null && message.hasOwnProperty("your_public_port"))
                if (!$util.isInteger(message.your_public_port))
                    return "your_public_port: integer expected";
            if (message.server_time != null && message.hasOwnProperty("server_time"))
                if (!$util.isInteger(message.server_time))
                    return "server_time: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                if (!$util.isInteger(message.seconds_until_shutdown))
                    return "seconds_until_shutdown: integer expected";
            if (message.client_cookie != null && message.hasOwnProperty("client_cookie"))
                if (!$util.isInteger(message.client_cookie))
                    return "client_cookie: integer expected";
            if (message.scoring_penalty_relay_cluster != null && message.hasOwnProperty("scoring_penalty_relay_cluster"))
                if (!$util.isInteger(message.scoring_penalty_relay_cluster))
                    return "scoring_penalty_relay_cluster: integer expected";
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.route_exceptions != null && message.hasOwnProperty("route_exceptions")) {
                if (!Array.isArray(message.route_exceptions))
                    return "route_exceptions: array expected";
                for (var i = 0; i < message.route_exceptions.length; ++i) {
                    var error = $root.CMsgSteamDatagramRouterPingReply.RouteException.verify(message.route_exceptions[i]);
                    if (error)
                        return "route_exceptions." + error;
                }
            }
            if (message.alt_addresses != null && message.hasOwnProperty("alt_addresses")) {
                if (!Array.isArray(message.alt_addresses))
                    return "alt_addresses: array expected";
                for (var i = 0; i < message.alt_addresses.length; ++i) {
                    var error = $root.CMsgSteamDatagramRouterPingReply.AltAddress.verify(message.alt_addresses[i]);
                    if (error)
                        return "alt_addresses." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramRouterPingReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply
         */
        CMsgSteamDatagramRouterPingReply.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramRouterPingReply)
                return object;
            var message = new $root.CMsgSteamDatagramRouterPingReply();
            if (object.client_timestamp != null)
                message.client_timestamp = object.client_timestamp >>> 0;
            if (object.latency_datacenter_ids) {
                if (!Array.isArray(object.latency_datacenter_ids))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.latency_datacenter_ids: array expected");
                message.latency_datacenter_ids = [];
                for (var i = 0; i < object.latency_datacenter_ids.length; ++i)
                    message.latency_datacenter_ids[i] = object.latency_datacenter_ids[i] >>> 0;
            }
            if (object.latency_ping_ms) {
                if (!Array.isArray(object.latency_ping_ms))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.latency_ping_ms: array expected");
                message.latency_ping_ms = [];
                for (var i = 0; i < object.latency_ping_ms.length; ++i)
                    message.latency_ping_ms[i] = object.latency_ping_ms[i] >>> 0;
            }
            if (object.your_public_ip != null)
                message.your_public_ip = object.your_public_ip >>> 0;
            if (object.your_public_port != null)
                message.your_public_port = object.your_public_port >>> 0;
            if (object.server_time != null)
                message.server_time = object.server_time >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.seconds_until_shutdown != null)
                message.seconds_until_shutdown = object.seconds_until_shutdown >>> 0;
            if (object.client_cookie != null)
                message.client_cookie = object.client_cookie >>> 0;
            if (object.scoring_penalty_relay_cluster != null)
                message.scoring_penalty_relay_cluster = object.scoring_penalty_relay_cluster >>> 0;
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.route_exceptions) {
                if (!Array.isArray(object.route_exceptions))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.route_exceptions: array expected");
                message.route_exceptions = [];
                for (var i = 0; i < object.route_exceptions.length; ++i) {
                    if (typeof object.route_exceptions[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramRouterPingReply.route_exceptions: object expected");
                    message.route_exceptions[i] = $root.CMsgSteamDatagramRouterPingReply.RouteException.fromObject(object.route_exceptions[i]);
                }
            }
            if (object.alt_addresses) {
                if (!Array.isArray(object.alt_addresses))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.alt_addresses: array expected");
                message.alt_addresses = [];
                for (var i = 0; i < object.alt_addresses.length; ++i) {
                    if (typeof object.alt_addresses[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramRouterPingReply.alt_addresses: object expected");
                    message.alt_addresses[i] = $root.CMsgSteamDatagramRouterPingReply.AltAddress.fromObject(object.alt_addresses[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramRouterPingReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {CMsgSteamDatagramRouterPingReply} message CMsgSteamDatagramRouterPingReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramRouterPingReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.latency_datacenter_ids = [];
                object.latency_ping_ms = [];
                object.route_exceptions = [];
                object.alt_addresses = [];
            }
            if (options.defaults) {
                object.client_timestamp = 0;
                object.your_public_ip = 0;
                object.server_time = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.seconds_until_shutdown = 0;
                object.client_cookie = 0;
                object.scoring_penalty_relay_cluster = 0;
                object.your_public_port = 0;
                object.flags = 0;
            }
            if (message.client_timestamp != null && message.hasOwnProperty("client_timestamp"))
                object.client_timestamp = message.client_timestamp;
            if (message.latency_datacenter_ids && message.latency_datacenter_ids.length) {
                object.latency_datacenter_ids = [];
                for (var j = 0; j < message.latency_datacenter_ids.length; ++j)
                    object.latency_datacenter_ids[j] = message.latency_datacenter_ids[j];
            }
            if (message.latency_ping_ms && message.latency_ping_ms.length) {
                object.latency_ping_ms = [];
                for (var j = 0; j < message.latency_ping_ms.length; ++j)
                    object.latency_ping_ms[j] = message.latency_ping_ms[j];
            }
            if (message.your_public_ip != null && message.hasOwnProperty("your_public_ip"))
                object.your_public_ip = message.your_public_ip;
            if (message.server_time != null && message.hasOwnProperty("server_time"))
                object.server_time = message.server_time;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                object.seconds_until_shutdown = message.seconds_until_shutdown;
            if (message.client_cookie != null && message.hasOwnProperty("client_cookie"))
                object.client_cookie = message.client_cookie;
            if (message.scoring_penalty_relay_cluster != null && message.hasOwnProperty("scoring_penalty_relay_cluster"))
                object.scoring_penalty_relay_cluster = message.scoring_penalty_relay_cluster;
            if (message.route_exceptions && message.route_exceptions.length) {
                object.route_exceptions = [];
                for (var j = 0; j < message.route_exceptions.length; ++j)
                    object.route_exceptions[j] = $root.CMsgSteamDatagramRouterPingReply.RouteException.toObject(message.route_exceptions[j], options);
            }
            if (message.your_public_port != null && message.hasOwnProperty("your_public_port"))
                object.your_public_port = message.your_public_port;
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.alt_addresses && message.alt_addresses.length) {
                object.alt_addresses = [];
                for (var j = 0; j < message.alt_addresses.length; ++j)
                    object.alt_addresses[j] = $root.CMsgSteamDatagramRouterPingReply.AltAddress.toObject(message.alt_addresses[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramRouterPingReply to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramRouterPingReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamDatagramRouterPingReply.RouteException = (function() {
    
            /**
             * Properties of a RouteException.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @interface IRouteException
             * @property {number|null} [data_center_id] RouteException data_center_id
             * @property {number|null} [flags] RouteException flags
             * @property {number|null} [penalty] RouteException penalty
             */
    
            /**
             * Constructs a new RouteException.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @classdesc Represents a RouteException.
             * @implements IRouteException
             * @constructor
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException=} [properties] Properties to set
             */
            function RouteException(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RouteException data_center_id.
             * @member {number} data_center_id
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             */
            RouteException.prototype.data_center_id = 0;
    
            /**
             * RouteException flags.
             * @member {number} flags
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             */
            RouteException.prototype.flags = 0;
    
            /**
             * RouteException penalty.
             * @member {number} penalty
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             */
            RouteException.prototype.penalty = 0;
    
            /**
             * Creates a new RouteException instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException=} [properties] Properties to set
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException instance
             */
            RouteException.create = function create(properties) {
                return new RouteException(properties);
            };
    
            /**
             * Encodes the specified RouteException message. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.RouteException.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException} message RouteException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouteException.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data_center_id != null && Object.hasOwnProperty.call(message, "data_center_id"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.data_center_id);
                if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.flags);
                if (message.penalty != null && Object.hasOwnProperty.call(message, "penalty"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.penalty);
                return writer;
            };
    
            /**
             * Encodes the specified RouteException message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.RouteException.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException} message RouteException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouteException.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RouteException message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouteException.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterPingReply.RouteException();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.data_center_id = reader.fixed32();
                        break;
                    case 2:
                        message.flags = reader.uint32();
                        break;
                    case 3:
                        message.penalty = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RouteException message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouteException.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RouteException message.
             * @function verify
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RouteException.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                    if (!$util.isInteger(message.data_center_id))
                        return "data_center_id: integer expected";
                if (message.flags != null && message.hasOwnProperty("flags"))
                    if (!$util.isInteger(message.flags))
                        return "flags: integer expected";
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    if (!$util.isInteger(message.penalty))
                        return "penalty: integer expected";
                return null;
            };
    
            /**
             * Creates a RouteException message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException
             */
            RouteException.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramRouterPingReply.RouteException)
                    return object;
                var message = new $root.CMsgSteamDatagramRouterPingReply.RouteException();
                if (object.data_center_id != null)
                    message.data_center_id = object.data_center_id >>> 0;
                if (object.flags != null)
                    message.flags = object.flags >>> 0;
                if (object.penalty != null)
                    message.penalty = object.penalty >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RouteException message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.RouteException} message RouteException
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RouteException.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.data_center_id = 0;
                    object.flags = 0;
                    object.penalty = 0;
                }
                if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                    object.data_center_id = message.data_center_id;
                if (message.flags != null && message.hasOwnProperty("flags"))
                    object.flags = message.flags;
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    object.penalty = message.penalty;
                return object;
            };
    
            /**
             * Converts this RouteException to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RouteException.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RouteException;
        })();
    
        CMsgSteamDatagramRouterPingReply.AltAddress = (function() {
    
            /**
             * Properties of an AltAddress.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @interface IAltAddress
             * @property {number|null} [ipv4] AltAddress ipv4
             * @property {number|null} [port] AltAddress port
             * @property {number|null} [penalty] AltAddress penalty
             * @property {CMsgSteamDatagramRouterPingReply.AltAddress.Protocol|null} [protocol] AltAddress protocol
             * @property {string|null} [id] AltAddress id
             */
    
            /**
             * Constructs a new AltAddress.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @classdesc Represents an AltAddress.
             * @implements IAltAddress
             * @constructor
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress=} [properties] Properties to set
             */
            function AltAddress(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AltAddress ipv4.
             * @member {number} ipv4
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.ipv4 = 0;
    
            /**
             * AltAddress port.
             * @member {number} port
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.port = 0;
    
            /**
             * AltAddress penalty.
             * @member {number} penalty
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.penalty = 0;
    
            /**
             * AltAddress protocol.
             * @member {CMsgSteamDatagramRouterPingReply.AltAddress.Protocol} protocol
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.protocol = 0;
    
            /**
             * AltAddress id.
             * @member {string} id
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.id = "";
    
            /**
             * Creates a new AltAddress instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress=} [properties] Properties to set
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress instance
             */
            AltAddress.create = function create(properties) {
                return new AltAddress(properties);
            };
    
            /**
             * Encodes the specified AltAddress message. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.AltAddress.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress} message AltAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AltAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ipv4 != null && Object.hasOwnProperty.call(message, "ipv4"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.ipv4);
                if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
                if (message.penalty != null && Object.hasOwnProperty.call(message, "penalty"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.penalty);
                if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.protocol);
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified AltAddress message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.AltAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress} message AltAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AltAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AltAddress message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AltAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterPingReply.AltAddress();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ipv4 = reader.fixed32();
                        break;
                    case 2:
                        message.port = reader.uint32();
                        break;
                    case 3:
                        message.penalty = reader.uint32();
                        break;
                    case 4:
                        message.protocol = reader.int32();
                        break;
                    case 5:
                        message.id = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AltAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AltAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AltAddress message.
             * @function verify
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AltAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ipv4 != null && message.hasOwnProperty("ipv4"))
                    if (!$util.isInteger(message.ipv4))
                        return "ipv4: integer expected";
                if (message.port != null && message.hasOwnProperty("port"))
                    if (!$util.isInteger(message.port))
                        return "port: integer expected";
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    if (!$util.isInteger(message.penalty))
                        return "penalty: integer expected";
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    switch (message.protocol) {
                    default:
                        return "protocol: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                return null;
            };
    
            /**
             * Creates an AltAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress
             */
            AltAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramRouterPingReply.AltAddress)
                    return object;
                var message = new $root.CMsgSteamDatagramRouterPingReply.AltAddress();
                if (object.ipv4 != null)
                    message.ipv4 = object.ipv4 >>> 0;
                if (object.port != null)
                    message.port = object.port >>> 0;
                if (object.penalty != null)
                    message.penalty = object.penalty >>> 0;
                switch (object.protocol) {
                case "DefaultProtocol":
                case 0:
                    message.protocol = 0;
                    break;
                case "NetworkNext":
                case 1:
                    message.protocol = 1;
                    break;
                }
                if (object.id != null)
                    message.id = String(object.id);
                return message;
            };
    
            /**
             * Creates a plain object from an AltAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.AltAddress} message AltAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AltAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ipv4 = 0;
                    object.port = 0;
                    object.penalty = 0;
                    object.protocol = options.enums === String ? "DefaultProtocol" : 0;
                    object.id = "";
                }
                if (message.ipv4 != null && message.hasOwnProperty("ipv4"))
                    object.ipv4 = message.ipv4;
                if (message.port != null && message.hasOwnProperty("port"))
                    object.port = message.port;
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    object.penalty = message.penalty;
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    object.protocol = options.enums === String ? $root.CMsgSteamDatagramRouterPingReply.AltAddress.Protocol[message.protocol] : message.protocol;
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this AltAddress to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AltAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Protocol enum.
             * @name CMsgSteamDatagramRouterPingReply.AltAddress.Protocol
             * @enum {number}
             * @property {number} DefaultProtocol=0 DefaultProtocol value
             * @property {number} NetworkNext=1 NetworkNext value
             */
            AltAddress.Protocol = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DefaultProtocol"] = 0;
                values[valuesById[1] = "NetworkNext"] = 1;
                return values;
            })();
    
            return AltAddress;
        })();
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramRouterPingReply.Flags
         * @enum {number}
         * @property {number} FLAG_MAYBE_MORE_DATA_CENTERS=1 FLAG_MAYBE_MORE_DATA_CENTERS value
         * @property {number} FLAG_MAYBE_MORE_ALT_ADDRESSES=2 FLAG_MAYBE_MORE_ALT_ADDRESSES value
         */
        CMsgSteamDatagramRouterPingReply.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "FLAG_MAYBE_MORE_DATA_CENTERS"] = 1;
            values[valuesById[2] = "FLAG_MAYBE_MORE_ALT_ADDRESSES"] = 2;
            return values;
        })();
    
        return CMsgSteamDatagramRouterPingReply;
    })();
    
    $root.CMsgSteamDatagramGameserverPingRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverPingRequest.
         * @exports ICMsgSteamDatagramGameserverPingRequest
         * @interface ICMsgSteamDatagramGameserverPingRequest
         * @property {number|null} [your_public_ip] CMsgSteamDatagramGameserverPingRequest your_public_ip
         * @property {number|null} [your_public_port] CMsgSteamDatagramGameserverPingRequest your_public_port
         * @property {number|null} [server_time] CMsgSteamDatagramGameserverPingRequest server_time
         * @property {number|Long|null} [challenge] CMsgSteamDatagramGameserverPingRequest challenge
         * @property {number|null} [router_timestamp] CMsgSteamDatagramGameserverPingRequest router_timestamp
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverPingRequest.
         * @exports CMsgSteamDatagramGameserverPingRequest
         * @classdesc Represents a CMsgSteamDatagramGameserverPingRequest.
         * @implements ICMsgSteamDatagramGameserverPingRequest
         * @constructor
         * @param {ICMsgSteamDatagramGameserverPingRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverPingRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverPingRequest your_public_ip.
         * @member {number} your_public_ip
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequest.prototype.your_public_ip = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequest your_public_port.
         * @member {number} your_public_port
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequest.prototype.your_public_port = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequest server_time.
         * @member {number} server_time
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequest.prototype.server_time = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequest challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequest.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequest router_timestamp.
         * @member {number} router_timestamp
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequest.prototype.router_timestamp = 0;
    
        /**
         * Creates a new CMsgSteamDatagramGameserverPingRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverPingRequest} CMsgSteamDatagramGameserverPingRequest instance
         */
        CMsgSteamDatagramGameserverPingRequest.create = function create(properties) {
            return new CMsgSteamDatagramGameserverPingRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingRequest message. Does not implicitly {@link CMsgSteamDatagramGameserverPingRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequest} message CMsgSteamDatagramGameserverPingRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.your_public_ip != null && Object.hasOwnProperty.call(message, "your_public_ip"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.your_public_ip);
            if (message.server_time != null && Object.hasOwnProperty.call(message, "server_time"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.server_time);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.challenge);
            if (message.router_timestamp != null && Object.hasOwnProperty.call(message, "router_timestamp"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.router_timestamp);
            if (message.your_public_port != null && Object.hasOwnProperty.call(message, "your_public_port"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.your_public_port);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverPingRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequest} message CMsgSteamDatagramGameserverPingRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverPingRequest} CMsgSteamDatagramGameserverPingRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverPingRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.your_public_ip = reader.fixed32();
                    break;
                case 5:
                    message.your_public_port = reader.fixed32();
                    break;
                case 2:
                    message.server_time = reader.fixed32();
                    break;
                case 3:
                    message.challenge = reader.fixed64();
                    break;
                case 4:
                    message.router_timestamp = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverPingRequest} CMsgSteamDatagramGameserverPingRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverPingRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverPingRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.your_public_ip != null && message.hasOwnProperty("your_public_ip"))
                if (!$util.isInteger(message.your_public_ip))
                    return "your_public_ip: integer expected";
            if (message.your_public_port != null && message.hasOwnProperty("your_public_port"))
                if (!$util.isInteger(message.your_public_port))
                    return "your_public_port: integer expected";
            if (message.server_time != null && message.hasOwnProperty("server_time"))
                if (!$util.isInteger(message.server_time))
                    return "server_time: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.router_timestamp != null && message.hasOwnProperty("router_timestamp"))
                if (!$util.isInteger(message.router_timestamp))
                    return "router_timestamp: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverPingRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverPingRequest} CMsgSteamDatagramGameserverPingRequest
         */
        CMsgSteamDatagramGameserverPingRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverPingRequest)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverPingRequest();
            if (object.your_public_ip != null)
                message.your_public_ip = object.your_public_ip >>> 0;
            if (object.your_public_port != null)
                message.your_public_port = object.your_public_port >>> 0;
            if (object.server_time != null)
                message.server_time = object.server_time >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.router_timestamp != null)
                message.router_timestamp = object.router_timestamp >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverPingRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @static
         * @param {CMsgSteamDatagramGameserverPingRequest} message CMsgSteamDatagramGameserverPingRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverPingRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.your_public_ip = 0;
                object.server_time = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.router_timestamp = 0;
                object.your_public_port = 0;
            }
            if (message.your_public_ip != null && message.hasOwnProperty("your_public_ip"))
                object.your_public_ip = message.your_public_ip;
            if (message.server_time != null && message.hasOwnProperty("server_time"))
                object.server_time = message.server_time;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.router_timestamp != null && message.hasOwnProperty("router_timestamp"))
                object.router_timestamp = message.router_timestamp;
            if (message.your_public_port != null && message.hasOwnProperty("your_public_port"))
                object.your_public_port = message.your_public_port;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverPingRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverPingRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverPingRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramGameserverPingRequest;
    })();
    
    $root.CMsgSteamDatagramLegacyGameserverPingReply = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramLegacyGameserverPingReply.
         * @exports ICMsgSteamDatagramLegacyGameserverPingReply
         * @interface ICMsgSteamDatagramLegacyGameserverPingReply
         * @property {number|null} [router_timestamp] CMsgSteamDatagramLegacyGameserverPingReply router_timestamp
         * @property {number|Long|null} [dummy_pad] CMsgSteamDatagramLegacyGameserverPingReply dummy_pad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramLegacyGameserverPingReply.
         * @exports CMsgSteamDatagramLegacyGameserverPingReply
         * @classdesc Represents a CMsgSteamDatagramLegacyGameserverPingReply.
         * @implements ICMsgSteamDatagramLegacyGameserverPingReply
         * @constructor
         * @param {ICMsgSteamDatagramLegacyGameserverPingReply=} [properties] Properties to set
         */
        function CMsgSteamDatagramLegacyGameserverPingReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramLegacyGameserverPingReply router_timestamp.
         * @member {number} router_timestamp
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @instance
         */
        CMsgSteamDatagramLegacyGameserverPingReply.prototype.router_timestamp = 0;
    
        /**
         * CMsgSteamDatagramLegacyGameserverPingReply dummy_pad.
         * @member {number|Long} dummy_pad
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @instance
         */
        CMsgSteamDatagramLegacyGameserverPingReply.prototype.dummy_pad = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramLegacyGameserverPingReply instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {ICMsgSteamDatagramLegacyGameserverPingReply=} [properties] Properties to set
         * @returns {CMsgSteamDatagramLegacyGameserverPingReply} CMsgSteamDatagramLegacyGameserverPingReply instance
         */
        CMsgSteamDatagramLegacyGameserverPingReply.create = function create(properties) {
            return new CMsgSteamDatagramLegacyGameserverPingReply(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLegacyGameserverPingReply message. Does not implicitly {@link CMsgSteamDatagramLegacyGameserverPingReply.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {ICMsgSteamDatagramLegacyGameserverPingReply} message CMsgSteamDatagramLegacyGameserverPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLegacyGameserverPingReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.router_timestamp != null && Object.hasOwnProperty.call(message, "router_timestamp"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.router_timestamp);
            if (message.dummy_pad != null && Object.hasOwnProperty.call(message, "dummy_pad"))
                writer.uint32(/* id 99, wireType 1 =*/793).fixed64(message.dummy_pad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLegacyGameserverPingReply message, length delimited. Does not implicitly {@link CMsgSteamDatagramLegacyGameserverPingReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {ICMsgSteamDatagramLegacyGameserverPingReply} message CMsgSteamDatagramLegacyGameserverPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLegacyGameserverPingReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramLegacyGameserverPingReply message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramLegacyGameserverPingReply} CMsgSteamDatagramLegacyGameserverPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLegacyGameserverPingReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramLegacyGameserverPingReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    message.router_timestamp = reader.fixed32();
                    break;
                case 99:
                    message.dummy_pad = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramLegacyGameserverPingReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramLegacyGameserverPingReply} CMsgSteamDatagramLegacyGameserverPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLegacyGameserverPingReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramLegacyGameserverPingReply message.
         * @function verify
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramLegacyGameserverPingReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.router_timestamp != null && message.hasOwnProperty("router_timestamp"))
                if (!$util.isInteger(message.router_timestamp))
                    return "router_timestamp: integer expected";
            if (message.dummy_pad != null && message.hasOwnProperty("dummy_pad"))
                if (!$util.isInteger(message.dummy_pad) && !(message.dummy_pad && $util.isInteger(message.dummy_pad.low) && $util.isInteger(message.dummy_pad.high)))
                    return "dummy_pad: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramLegacyGameserverPingReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramLegacyGameserverPingReply} CMsgSteamDatagramLegacyGameserverPingReply
         */
        CMsgSteamDatagramLegacyGameserverPingReply.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramLegacyGameserverPingReply)
                return object;
            var message = new $root.CMsgSteamDatagramLegacyGameserverPingReply();
            if (object.router_timestamp != null)
                message.router_timestamp = object.router_timestamp >>> 0;
            if (object.dummy_pad != null)
                if ($util.Long)
                    (message.dummy_pad = $util.Long.fromValue(object.dummy_pad)).unsigned = false;
                else if (typeof object.dummy_pad === "string")
                    message.dummy_pad = parseInt(object.dummy_pad, 10);
                else if (typeof object.dummy_pad === "number")
                    message.dummy_pad = object.dummy_pad;
                else if (typeof object.dummy_pad === "object")
                    message.dummy_pad = new $util.LongBits(object.dummy_pad.low >>> 0, object.dummy_pad.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramLegacyGameserverPingReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @static
         * @param {CMsgSteamDatagramLegacyGameserverPingReply} message CMsgSteamDatagramLegacyGameserverPingReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramLegacyGameserverPingReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.router_timestamp = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.dummy_pad = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.dummy_pad = options.longs === String ? "0" : 0;
            }
            if (message.router_timestamp != null && message.hasOwnProperty("router_timestamp"))
                object.router_timestamp = message.router_timestamp;
            if (message.dummy_pad != null && message.hasOwnProperty("dummy_pad"))
                if (typeof message.dummy_pad === "number")
                    object.dummy_pad = options.longs === String ? String(message.dummy_pad) : message.dummy_pad;
                else
                    object.dummy_pad = options.longs === String ? $util.Long.prototype.toString.call(message.dummy_pad) : options.longs === Number ? new $util.LongBits(message.dummy_pad.low >>> 0, message.dummy_pad.high >>> 0).toNumber() : message.dummy_pad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramLegacyGameserverPingReply to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramLegacyGameserverPingReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramLegacyGameserverPingReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramLegacyGameserverPingReply;
    })();
    
    $root.CMsgSteamDatagramGameserverPingReply = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverPingReply.
         * @exports ICMsgSteamDatagramGameserverPingReply
         * @interface ICMsgSteamDatagramGameserverPingReply
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramGameserverPingReply cert
         * @property {Uint8Array|null} [signed_data] CMsgSteamDatagramGameserverPingReply signed_data
         * @property {Uint8Array|null} [signature] CMsgSteamDatagramGameserverPingReply signature
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverPingReply.
         * @exports CMsgSteamDatagramGameserverPingReply
         * @classdesc Represents a CMsgSteamDatagramGameserverPingReply.
         * @implements ICMsgSteamDatagramGameserverPingReply
         * @constructor
         * @param {ICMsgSteamDatagramGameserverPingReply=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverPingReply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverPingReply cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @instance
         */
        CMsgSteamDatagramGameserverPingReply.prototype.cert = null;
    
        /**
         * CMsgSteamDatagramGameserverPingReply signed_data.
         * @member {Uint8Array} signed_data
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @instance
         */
        CMsgSteamDatagramGameserverPingReply.prototype.signed_data = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverPingReply signature.
         * @member {Uint8Array} signature
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @instance
         */
        CMsgSteamDatagramGameserverPingReply.prototype.signature = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramGameserverPingReply instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {ICMsgSteamDatagramGameserverPingReply=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverPingReply} CMsgSteamDatagramGameserverPingReply instance
         */
        CMsgSteamDatagramGameserverPingReply.create = function create(properties) {
            return new CMsgSteamDatagramGameserverPingReply(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingReply message. Does not implicitly {@link CMsgSteamDatagramGameserverPingReply.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {ICMsgSteamDatagramGameserverPingReply} message CMsgSteamDatagramGameserverPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.signed_data != null && Object.hasOwnProperty.call(message, "signed_data"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.signed_data);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingReply message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverPingReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {ICMsgSteamDatagramGameserverPingReply} message CMsgSteamDatagramGameserverPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingReply message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverPingReply} CMsgSteamDatagramGameserverPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverPingReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.signed_data = reader.bytes();
                    break;
                case 3:
                    message.signature = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverPingReply} CMsgSteamDatagramGameserverPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverPingReply message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverPingReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            if (message.signed_data != null && message.hasOwnProperty("signed_data"))
                if (!(message.signed_data && typeof message.signed_data.length === "number" || $util.isString(message.signed_data)))
                    return "signed_data: buffer expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverPingReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverPingReply} CMsgSteamDatagramGameserverPingReply
         */
        CMsgSteamDatagramGameserverPingReply.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverPingReply)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverPingReply();
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramGameserverPingReply.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            if (object.signed_data != null)
                if (typeof object.signed_data === "string")
                    $util.base64.decode(object.signed_data, message.signed_data = $util.newBuffer($util.base64.length(object.signed_data)), 0);
                else if (object.signed_data.length)
                    message.signed_data = object.signed_data;
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length)
                    message.signature = object.signature;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverPingReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @static
         * @param {CMsgSteamDatagramGameserverPingReply} message CMsgSteamDatagramGameserverPingReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverPingReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cert = null;
                if (options.bytes === String)
                    object.signed_data = "";
                else {
                    object.signed_data = [];
                    if (options.bytes !== Array)
                        object.signed_data = $util.newBuffer(object.signed_data);
                }
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
            }
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.signed_data != null && message.hasOwnProperty("signed_data"))
                object.signed_data = options.bytes === String ? $util.base64.encode(message.signed_data, 0, message.signed_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.signed_data) : message.signed_data;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverPingReply to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverPingReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverPingReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamDatagramGameserverPingReply.SignedData = (function() {
    
            /**
             * Properties of a SignedData.
             * @memberof CMsgSteamDatagramGameserverPingReply
             * @interface ISignedData
             * @property {number|null} [challenge_time] SignedData challenge_time
             * @property {number|Long|null} [challenge] SignedData challenge
             * @property {number|null} [router_timestamp] SignedData router_timestamp
             * @property {number|null} [data_center_id] SignedData data_center_id
             * @property {number|null} [appid] SignedData appid
             */
    
            /**
             * Constructs a new SignedData.
             * @memberof CMsgSteamDatagramGameserverPingReply
             * @classdesc Represents a SignedData.
             * @implements ISignedData
             * @constructor
             * @param {CMsgSteamDatagramGameserverPingReply.ISignedData=} [properties] Properties to set
             */
            function SignedData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SignedData challenge_time.
             * @member {number} challenge_time
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @instance
             */
            SignedData.prototype.challenge_time = 0;
    
            /**
             * SignedData challenge.
             * @member {number|Long} challenge
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @instance
             */
            SignedData.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * SignedData router_timestamp.
             * @member {number} router_timestamp
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @instance
             */
            SignedData.prototype.router_timestamp = 0;
    
            /**
             * SignedData data_center_id.
             * @member {number} data_center_id
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @instance
             */
            SignedData.prototype.data_center_id = 0;
    
            /**
             * SignedData appid.
             * @member {number} appid
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @instance
             */
            SignedData.prototype.appid = 0;
    
            /**
             * Creates a new SignedData instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {CMsgSteamDatagramGameserverPingReply.ISignedData=} [properties] Properties to set
             * @returns {CMsgSteamDatagramGameserverPingReply.SignedData} SignedData instance
             */
            SignedData.create = function create(properties) {
                return new SignedData(properties);
            };
    
            /**
             * Encodes the specified SignedData message. Does not implicitly {@link CMsgSteamDatagramGameserverPingReply.SignedData.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {CMsgSteamDatagramGameserverPingReply.ISignedData} message SignedData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.challenge_time != null && Object.hasOwnProperty.call(message, "challenge_time"))
                    writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.challenge_time);
                if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                    writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.challenge);
                if (message.router_timestamp != null && Object.hasOwnProperty.call(message, "router_timestamp"))
                    writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.router_timestamp);
                if (message.data_center_id != null && Object.hasOwnProperty.call(message, "data_center_id"))
                    writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.data_center_id);
                if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.appid);
                return writer;
            };
    
            /**
             * Encodes the specified SignedData message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverPingReply.SignedData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {CMsgSteamDatagramGameserverPingReply.ISignedData} message SignedData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SignedData message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramGameserverPingReply.SignedData} SignedData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverPingReply.SignedData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.challenge_time = reader.fixed32();
                        break;
                    case 3:
                        message.challenge = reader.fixed64();
                        break;
                    case 4:
                        message.router_timestamp = reader.fixed32();
                        break;
                    case 5:
                        message.data_center_id = reader.fixed32();
                        break;
                    case 6:
                        message.appid = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a SignedData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramGameserverPingReply.SignedData} SignedData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SignedData message.
             * @function verify
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignedData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.challenge_time != null && message.hasOwnProperty("challenge_time"))
                    if (!$util.isInteger(message.challenge_time))
                        return "challenge_time: integer expected";
                if (message.challenge != null && message.hasOwnProperty("challenge"))
                    if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                        return "challenge: integer|Long expected";
                if (message.router_timestamp != null && message.hasOwnProperty("router_timestamp"))
                    if (!$util.isInteger(message.router_timestamp))
                        return "router_timestamp: integer expected";
                if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                    if (!$util.isInteger(message.data_center_id))
                        return "data_center_id: integer expected";
                if (message.appid != null && message.hasOwnProperty("appid"))
                    if (!$util.isInteger(message.appid))
                        return "appid: integer expected";
                return null;
            };
    
            /**
             * Creates a SignedData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramGameserverPingReply.SignedData} SignedData
             */
            SignedData.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramGameserverPingReply.SignedData)
                    return object;
                var message = new $root.CMsgSteamDatagramGameserverPingReply.SignedData();
                if (object.challenge_time != null)
                    message.challenge_time = object.challenge_time >>> 0;
                if (object.challenge != null)
                    if ($util.Long)
                        (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                    else if (typeof object.challenge === "string")
                        message.challenge = parseInt(object.challenge, 10);
                    else if (typeof object.challenge === "number")
                        message.challenge = object.challenge;
                    else if (typeof object.challenge === "object")
                        message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
                if (object.router_timestamp != null)
                    message.router_timestamp = object.router_timestamp >>> 0;
                if (object.data_center_id != null)
                    message.data_center_id = object.data_center_id >>> 0;
                if (object.appid != null)
                    message.appid = object.appid >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a SignedData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @static
             * @param {CMsgSteamDatagramGameserverPingReply.SignedData} message SignedData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignedData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.challenge_time = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.challenge = options.longs === String ? "0" : 0;
                    object.router_timestamp = 0;
                    object.data_center_id = 0;
                    object.appid = 0;
                }
                if (message.challenge_time != null && message.hasOwnProperty("challenge_time"))
                    object.challenge_time = message.challenge_time;
                if (message.challenge != null && message.hasOwnProperty("challenge"))
                    if (typeof message.challenge === "number")
                        object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                    else
                        object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
                if (message.router_timestamp != null && message.hasOwnProperty("router_timestamp"))
                    object.router_timestamp = message.router_timestamp;
                if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                    object.data_center_id = message.data_center_id;
                if (message.appid != null && message.hasOwnProperty("appid"))
                    object.appid = message.appid;
                return object;
            };
    
            /**
             * Converts this SignedData to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramGameserverPingReply.SignedData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignedData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SignedData;
        })();
    
        return CMsgSteamDatagramGameserverPingReply;
    })();
    
    $root.CMsgSteamDatagramNoSessionRelayToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNoSessionRelayToClient.
         * @exports ICMsgSteamDatagramNoSessionRelayToClient
         * @interface ICMsgSteamDatagramNoSessionRelayToClient
         * @property {number|null} [connection_id] CMsgSteamDatagramNoSessionRelayToClient connection_id
         * @property {number|null} [your_public_ip] CMsgSteamDatagramNoSessionRelayToClient your_public_ip
         * @property {number|null} [your_public_port] CMsgSteamDatagramNoSessionRelayToClient your_public_port
         * @property {number|null} [server_time] CMsgSteamDatagramNoSessionRelayToClient server_time
         * @property {number|Long|null} [challenge] CMsgSteamDatagramNoSessionRelayToClient challenge
         * @property {number|null} [seconds_until_shutdown] CMsgSteamDatagramNoSessionRelayToClient seconds_until_shutdown
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNoSessionRelayToClient.
         * @exports CMsgSteamDatagramNoSessionRelayToClient
         * @classdesc Represents a CMsgSteamDatagramNoSessionRelayToClient.
         * @implements ICMsgSteamDatagramNoSessionRelayToClient
         * @constructor
         * @param {ICMsgSteamDatagramNoSessionRelayToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramNoSessionRelayToClient(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient your_public_ip.
         * @member {number} your_public_ip
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.your_public_ip = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient your_public_port.
         * @member {number} your_public_port
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.your_public_port = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient server_time.
         * @member {number} server_time
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.server_time = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient seconds_until_shutdown.
         * @member {number} seconds_until_shutdown
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.seconds_until_shutdown = 0;
    
        /**
         * Creates a new CMsgSteamDatagramNoSessionRelayToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.create = function create(properties) {
            return new CMsgSteamDatagramNoSessionRelayToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToClient message. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToClient} message CMsgSteamDatagramNoSessionRelayToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.your_public_ip != null && Object.hasOwnProperty.call(message, "your_public_ip"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.your_public_ip);
            if (message.server_time != null && Object.hasOwnProperty.call(message, "server_time"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.server_time);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.challenge);
            if (message.seconds_until_shutdown != null && Object.hasOwnProperty.call(message, "seconds_until_shutdown"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seconds_until_shutdown);
            if (message.your_public_port != null && Object.hasOwnProperty.call(message, "your_public_port"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.your_public_port);
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.connection_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToClient} message CMsgSteamDatagramNoSessionRelayToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNoSessionRelayToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7:
                    message.connection_id = reader.fixed32();
                    break;
                case 2:
                    message.your_public_ip = reader.fixed32();
                    break;
                case 6:
                    message.your_public_port = reader.fixed32();
                    break;
                case 3:
                    message.server_time = reader.fixed32();
                    break;
                case 4:
                    message.challenge = reader.fixed64();
                    break;
                case 5:
                    message.seconds_until_shutdown = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNoSessionRelayToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNoSessionRelayToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.your_public_ip != null && message.hasOwnProperty("your_public_ip"))
                if (!$util.isInteger(message.your_public_ip))
                    return "your_public_ip: integer expected";
            if (message.your_public_port != null && message.hasOwnProperty("your_public_port"))
                if (!$util.isInteger(message.your_public_port))
                    return "your_public_port: integer expected";
            if (message.server_time != null && message.hasOwnProperty("server_time"))
                if (!$util.isInteger(message.server_time))
                    return "server_time: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                if (!$util.isInteger(message.seconds_until_shutdown))
                    return "seconds_until_shutdown: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNoSessionRelayToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient
         */
        CMsgSteamDatagramNoSessionRelayToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNoSessionRelayToClient)
                return object;
            var message = new $root.CMsgSteamDatagramNoSessionRelayToClient();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.your_public_ip != null)
                message.your_public_ip = object.your_public_ip >>> 0;
            if (object.your_public_port != null)
                message.your_public_port = object.your_public_port >>> 0;
            if (object.server_time != null)
                message.server_time = object.server_time >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.seconds_until_shutdown != null)
                message.seconds_until_shutdown = object.seconds_until_shutdown >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNoSessionRelayToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {CMsgSteamDatagramNoSessionRelayToClient} message CMsgSteamDatagramNoSessionRelayToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNoSessionRelayToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.your_public_ip = 0;
                object.server_time = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.seconds_until_shutdown = 0;
                object.your_public_port = 0;
                object.connection_id = 0;
            }
            if (message.your_public_ip != null && message.hasOwnProperty("your_public_ip"))
                object.your_public_ip = message.your_public_ip;
            if (message.server_time != null && message.hasOwnProperty("server_time"))
                object.server_time = message.server_time;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                object.seconds_until_shutdown = message.seconds_until_shutdown;
            if (message.your_public_port != null && message.hasOwnProperty("your_public_port"))
                object.your_public_port = message.your_public_port;
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramNoSessionRelayToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramNoSessionRelayToClient;
    })();
    
    $root.CMsgSteamDatagramNoSessionRelayToPeer = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNoSessionRelayToPeer.
         * @exports ICMsgSteamDatagramNoSessionRelayToPeer
         * @interface ICMsgSteamDatagramNoSessionRelayToPeer
         * @property {number|null} [legacy_relay_session_id] CMsgSteamDatagramNoSessionRelayToPeer legacy_relay_session_id
         * @property {number|null} [from_relay_session_id] CMsgSteamDatagramNoSessionRelayToPeer from_relay_session_id
         * @property {number|null} [from_connection_id] CMsgSteamDatagramNoSessionRelayToPeer from_connection_id
         * @property {number|Long|null} [kludge_pad] CMsgSteamDatagramNoSessionRelayToPeer kludge_pad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNoSessionRelayToPeer.
         * @exports CMsgSteamDatagramNoSessionRelayToPeer
         * @classdesc Represents a CMsgSteamDatagramNoSessionRelayToPeer.
         * @implements ICMsgSteamDatagramNoSessionRelayToPeer
         * @constructor
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer=} [properties] Properties to set
         */
        function CMsgSteamDatagramNoSessionRelayToPeer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer legacy_relay_session_id.
         * @member {number} legacy_relay_session_id
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.legacy_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer from_relay_session_id.
         * @member {number} from_relay_session_id
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.from_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer from_connection_id.
         * @member {number} from_connection_id
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.from_connection_id = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer kludge_pad.
         * @member {number|Long} kludge_pad
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.kludge_pad = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramNoSessionRelayToPeer instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.create = function create(properties) {
            return new CMsgSteamDatagramNoSessionRelayToPeer(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToPeer message. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToPeer.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer} message CMsgSteamDatagramNoSessionRelayToPeer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToPeer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.legacy_relay_session_id != null && Object.hasOwnProperty.call(message, "legacy_relay_session_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.legacy_relay_session_id);
            if (message.from_relay_session_id != null && Object.hasOwnProperty.call(message, "from_relay_session_id"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.from_relay_session_id);
            if (message.from_connection_id != null && Object.hasOwnProperty.call(message, "from_connection_id"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.from_connection_id);
            if (message.kludge_pad != null && Object.hasOwnProperty.call(message, "kludge_pad"))
                writer.uint32(/* id 99, wireType 1 =*/793).fixed64(message.kludge_pad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToPeer message, length delimited. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToPeer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer} message CMsgSteamDatagramNoSessionRelayToPeer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToPeer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToPeer message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToPeer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNoSessionRelayToPeer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.legacy_relay_session_id = reader.uint32();
                    break;
                case 2:
                    message.from_relay_session_id = reader.fixed32();
                    break;
                case 7:
                    message.from_connection_id = reader.fixed32();
                    break;
                case 99:
                    message.kludge_pad = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToPeer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToPeer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNoSessionRelayToPeer message.
         * @function verify
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNoSessionRelayToPeer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.legacy_relay_session_id != null && message.hasOwnProperty("legacy_relay_session_id"))
                if (!$util.isInteger(message.legacy_relay_session_id))
                    return "legacy_relay_session_id: integer expected";
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                if (!$util.isInteger(message.from_relay_session_id))
                    return "from_relay_session_id: integer expected";
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                if (!$util.isInteger(message.from_connection_id))
                    return "from_connection_id: integer expected";
            if (message.kludge_pad != null && message.hasOwnProperty("kludge_pad"))
                if (!$util.isInteger(message.kludge_pad) && !(message.kludge_pad && $util.isInteger(message.kludge_pad.low) && $util.isInteger(message.kludge_pad.high)))
                    return "kludge_pad: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNoSessionRelayToPeer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer
         */
        CMsgSteamDatagramNoSessionRelayToPeer.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNoSessionRelayToPeer)
                return object;
            var message = new $root.CMsgSteamDatagramNoSessionRelayToPeer();
            if (object.legacy_relay_session_id != null)
                message.legacy_relay_session_id = object.legacy_relay_session_id >>> 0;
            if (object.from_relay_session_id != null)
                message.from_relay_session_id = object.from_relay_session_id >>> 0;
            if (object.from_connection_id != null)
                message.from_connection_id = object.from_connection_id >>> 0;
            if (object.kludge_pad != null)
                if ($util.Long)
                    (message.kludge_pad = $util.Long.fromValue(object.kludge_pad)).unsigned = false;
                else if (typeof object.kludge_pad === "string")
                    message.kludge_pad = parseInt(object.kludge_pad, 10);
                else if (typeof object.kludge_pad === "number")
                    message.kludge_pad = object.kludge_pad;
                else if (typeof object.kludge_pad === "object")
                    message.kludge_pad = new $util.LongBits(object.kludge_pad.low >>> 0, object.kludge_pad.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNoSessionRelayToPeer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {CMsgSteamDatagramNoSessionRelayToPeer} message CMsgSteamDatagramNoSessionRelayToPeer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNoSessionRelayToPeer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.legacy_relay_session_id = 0;
                object.from_relay_session_id = 0;
                object.from_connection_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kludge_pad = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kludge_pad = options.longs === String ? "0" : 0;
            }
            if (message.legacy_relay_session_id != null && message.hasOwnProperty("legacy_relay_session_id"))
                object.legacy_relay_session_id = message.legacy_relay_session_id;
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                object.from_relay_session_id = message.from_relay_session_id;
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                object.from_connection_id = message.from_connection_id;
            if (message.kludge_pad != null && message.hasOwnProperty("kludge_pad"))
                if (typeof message.kludge_pad === "number")
                    object.kludge_pad = options.longs === String ? String(message.kludge_pad) : message.kludge_pad;
                else
                    object.kludge_pad = options.longs === String ? $util.Long.prototype.toString.call(message.kludge_pad) : options.longs === Number ? new $util.LongBits(message.kludge_pad.low >>> 0, message.kludge_pad.high >>> 0).toNumber() : message.kludge_pad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramNoSessionRelayToPeer to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramNoSessionRelayToPeer;
    })();
    
    $root.CMsgSteamDatagramClientPingSampleRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramClientPingSampleRequest.
         * @exports ICMsgSteamDatagramClientPingSampleRequest
         * @interface ICMsgSteamDatagramClientPingSampleRequest
         * @property {number|null} [connection_id] CMsgSteamDatagramClientPingSampleRequest connection_id
         */
    
        /**
         * Constructs a new CMsgSteamDatagramClientPingSampleRequest.
         * @exports CMsgSteamDatagramClientPingSampleRequest
         * @classdesc Represents a CMsgSteamDatagramClientPingSampleRequest.
         * @implements ICMsgSteamDatagramClientPingSampleRequest
         * @constructor
         * @param {ICMsgSteamDatagramClientPingSampleRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramClientPingSampleRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramClientPingSampleRequest connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @instance
         */
        CMsgSteamDatagramClientPingSampleRequest.prototype.connection_id = 0;
    
        /**
         * Creates a new CMsgSteamDatagramClientPingSampleRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest instance
         */
        CMsgSteamDatagramClientPingSampleRequest.create = function create(properties) {
            return new CMsgSteamDatagramClientPingSampleRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleRequest message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleRequest} message CMsgSteamDatagramClientPingSampleRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connection_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleRequest} message CMsgSteamDatagramClientPingSampleRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connection_id = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramClientPingSampleRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramClientPingSampleRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramClientPingSampleRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest
         */
        CMsgSteamDatagramClientPingSampleRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramClientPingSampleRequest)
                return object;
            var message = new $root.CMsgSteamDatagramClientPingSampleRequest();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramClientPingSampleRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {CMsgSteamDatagramClientPingSampleRequest} message CMsgSteamDatagramClientPingSampleRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramClientPingSampleRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.connection_id = 0;
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramClientPingSampleRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramClientPingSampleRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramClientPingSampleRequest;
    })();
    
    $root.CMsgSteamDatagramClientPingSampleReply = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramClientPingSampleReply.
         * @exports ICMsgSteamDatagramClientPingSampleReply
         * @interface ICMsgSteamDatagramClientPingSampleReply
         * @property {number|null} [connection_id] CMsgSteamDatagramClientPingSampleReply connection_id
         * @property {boolean|null} [override_active] CMsgSteamDatagramClientPingSampleReply override_active
         * @property {Array.<CMsgSteamDatagramClientPingSampleReply.IPOP>|null} [pops] CMsgSteamDatagramClientPingSampleReply pops
         * @property {Array.<CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter>|null} [legacy_data_centers] CMsgSteamDatagramClientPingSampleReply legacy_data_centers
         */
    
        /**
         * Constructs a new CMsgSteamDatagramClientPingSampleReply.
         * @exports CMsgSteamDatagramClientPingSampleReply
         * @classdesc Represents a CMsgSteamDatagramClientPingSampleReply.
         * @implements ICMsgSteamDatagramClientPingSampleReply
         * @constructor
         * @param {ICMsgSteamDatagramClientPingSampleReply=} [properties] Properties to set
         */
        function CMsgSteamDatagramClientPingSampleReply(properties) {
            this.pops = [];
            this.legacy_data_centers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramClientPingSampleReply connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramClientPingSampleReply override_active.
         * @member {boolean} override_active
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.override_active = false;
    
        /**
         * CMsgSteamDatagramClientPingSampleReply pops.
         * @member {Array.<CMsgSteamDatagramClientPingSampleReply.IPOP>} pops
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.pops = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramClientPingSampleReply legacy_data_centers.
         * @member {Array.<CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter>} legacy_data_centers
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.legacy_data_centers = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramClientPingSampleReply instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleReply=} [properties] Properties to set
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply instance
         */
        CMsgSteamDatagramClientPingSampleReply.create = function create(properties) {
            return new CMsgSteamDatagramClientPingSampleReply(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleReply message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleReply} message CMsgSteamDatagramClientPingSampleReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connection_id);
            if (message.pops != null && message.pops.length)
                for (var i = 0; i < message.pops.length; ++i)
                    $root.CMsgSteamDatagramClientPingSampleReply.POP.encode(message.pops[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.legacy_data_centers != null && message.legacy_data_centers.length)
                for (var i = 0; i < message.legacy_data_centers.length; ++i)
                    $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.encode(message.legacy_data_centers[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.override_active != null && Object.hasOwnProperty.call(message, "override_active"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.override_active);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleReply message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleReply} message CMsgSteamDatagramClientPingSampleReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleReply message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connection_id = reader.fixed32();
                    break;
                case 4:
                    message.override_active = reader.bool();
                    break;
                case 2:
                    if (!(message.pops && message.pops.length))
                        message.pops = [];
                    message.pops.push($root.CMsgSteamDatagramClientPingSampleReply.POP.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.legacy_data_centers && message.legacy_data_centers.length))
                        message.legacy_data_centers = [];
                    message.legacy_data_centers.push($root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramClientPingSampleReply message.
         * @function verify
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramClientPingSampleReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.override_active != null && message.hasOwnProperty("override_active"))
                if (typeof message.override_active !== "boolean")
                    return "override_active: boolean expected";
            if (message.pops != null && message.hasOwnProperty("pops")) {
                if (!Array.isArray(message.pops))
                    return "pops: array expected";
                for (var i = 0; i < message.pops.length; ++i) {
                    var error = $root.CMsgSteamDatagramClientPingSampleReply.POP.verify(message.pops[i]);
                    if (error)
                        return "pops." + error;
                }
            }
            if (message.legacy_data_centers != null && message.hasOwnProperty("legacy_data_centers")) {
                if (!Array.isArray(message.legacy_data_centers))
                    return "legacy_data_centers: array expected";
                for (var i = 0; i < message.legacy_data_centers.length; ++i) {
                    var error = $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.verify(message.legacy_data_centers[i]);
                    if (error)
                        return "legacy_data_centers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramClientPingSampleReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply
         */
        CMsgSteamDatagramClientPingSampleReply.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply)
                return object;
            var message = new $root.CMsgSteamDatagramClientPingSampleReply();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.override_active != null)
                message.override_active = Boolean(object.override_active);
            if (object.pops) {
                if (!Array.isArray(object.pops))
                    throw TypeError(".CMsgSteamDatagramClientPingSampleReply.pops: array expected");
                message.pops = [];
                for (var i = 0; i < object.pops.length; ++i) {
                    if (typeof object.pops[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramClientPingSampleReply.pops: object expected");
                    message.pops[i] = $root.CMsgSteamDatagramClientPingSampleReply.POP.fromObject(object.pops[i]);
                }
            }
            if (object.legacy_data_centers) {
                if (!Array.isArray(object.legacy_data_centers))
                    throw TypeError(".CMsgSteamDatagramClientPingSampleReply.legacy_data_centers: array expected");
                message.legacy_data_centers = [];
                for (var i = 0; i < object.legacy_data_centers.length; ++i) {
                    if (typeof object.legacy_data_centers[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramClientPingSampleReply.legacy_data_centers: object expected");
                    message.legacy_data_centers[i] = $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.fromObject(object.legacy_data_centers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramClientPingSampleReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {CMsgSteamDatagramClientPingSampleReply} message CMsgSteamDatagramClientPingSampleReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramClientPingSampleReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.pops = [];
                object.legacy_data_centers = [];
            }
            if (options.defaults) {
                object.connection_id = 0;
                object.override_active = false;
            }
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.pops && message.pops.length) {
                object.pops = [];
                for (var j = 0; j < message.pops.length; ++j)
                    object.pops[j] = $root.CMsgSteamDatagramClientPingSampleReply.POP.toObject(message.pops[j], options);
            }
            if (message.legacy_data_centers && message.legacy_data_centers.length) {
                object.legacy_data_centers = [];
                for (var j = 0; j < message.legacy_data_centers.length; ++j)
                    object.legacy_data_centers[j] = $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.toObject(message.legacy_data_centers[j], options);
            }
            if (message.override_active != null && message.hasOwnProperty("override_active"))
                object.override_active = message.override_active;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramClientPingSampleReply to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamDatagramClientPingSampleReply.POP = (function() {
    
            /**
             * Properties of a POP.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @interface IPOP
             * @property {number|null} [pop_id] POP pop_id
             * @property {number|null} [default_front_ping_ms] POP default_front_ping_ms
             * @property {number|null} [cluster_penalty] POP cluster_penalty
             * @property {Array.<CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress>|null} [alt_addresses] POP alt_addresses
             * @property {number|null} [default_e2e_ping_ms] POP default_e2e_ping_ms
             * @property {number|null} [default_e2e_score] POP default_e2e_score
             * @property {number|null} [p2p_via_peer_relay_pop_id] POP p2p_via_peer_relay_pop_id
             * @property {number|null} [best_dc_ping_ms] POP best_dc_ping_ms
             * @property {number|null} [best_dc_score] POP best_dc_score
             * @property {number|null} [best_dc_via_relay_pop_id] POP best_dc_via_relay_pop_id
             * @property {number|null} [default_dc_ping_ms] POP default_dc_ping_ms
             * @property {number|null} [default_dc_score] POP default_dc_score
             * @property {number|null} [default_dc_via_relay_pop_id] POP default_dc_via_relay_pop_id
             * @property {number|null} [test_dc_ping_ms] POP test_dc_ping_ms
             * @property {number|null} [test_dc_score] POP test_dc_score
             * @property {number|null} [test_dc_via_relay_pop_id] POP test_dc_via_relay_pop_id
             */
    
            /**
             * Constructs a new POP.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @classdesc Represents a POP.
             * @implements IPOP
             * @constructor
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP=} [properties] Properties to set
             */
            function POP(properties) {
                this.alt_addresses = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * POP pop_id.
             * @member {number} pop_id
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.pop_id = 0;
    
            /**
             * POP default_front_ping_ms.
             * @member {number} default_front_ping_ms
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.default_front_ping_ms = 0;
    
            /**
             * POP cluster_penalty.
             * @member {number} cluster_penalty
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.cluster_penalty = 0;
    
            /**
             * POP alt_addresses.
             * @member {Array.<CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress>} alt_addresses
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.alt_addresses = $util.emptyArray;
    
            /**
             * POP default_e2e_ping_ms.
             * @member {number} default_e2e_ping_ms
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.default_e2e_ping_ms = 0;
    
            /**
             * POP default_e2e_score.
             * @member {number} default_e2e_score
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.default_e2e_score = 0;
    
            /**
             * POP p2p_via_peer_relay_pop_id.
             * @member {number} p2p_via_peer_relay_pop_id
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.p2p_via_peer_relay_pop_id = 0;
    
            /**
             * POP best_dc_ping_ms.
             * @member {number} best_dc_ping_ms
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.best_dc_ping_ms = 0;
    
            /**
             * POP best_dc_score.
             * @member {number} best_dc_score
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.best_dc_score = 0;
    
            /**
             * POP best_dc_via_relay_pop_id.
             * @member {number} best_dc_via_relay_pop_id
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.best_dc_via_relay_pop_id = 0;
    
            /**
             * POP default_dc_ping_ms.
             * @member {number} default_dc_ping_ms
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.default_dc_ping_ms = 0;
    
            /**
             * POP default_dc_score.
             * @member {number} default_dc_score
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.default_dc_score = 0;
    
            /**
             * POP default_dc_via_relay_pop_id.
             * @member {number} default_dc_via_relay_pop_id
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.default_dc_via_relay_pop_id = 0;
    
            /**
             * POP test_dc_ping_ms.
             * @member {number} test_dc_ping_ms
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.test_dc_ping_ms = 0;
    
            /**
             * POP test_dc_score.
             * @member {number} test_dc_score
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.test_dc_score = 0;
    
            /**
             * POP test_dc_via_relay_pop_id.
             * @member {number} test_dc_via_relay_pop_id
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.test_dc_via_relay_pop_id = 0;
    
            /**
             * Creates a new POP instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP=} [properties] Properties to set
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP instance
             */
            POP.create = function create(properties) {
                return new POP(properties);
            };
    
            /**
             * Encodes the specified POP message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP} message POP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            POP.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pop_id != null && Object.hasOwnProperty.call(message, "pop_id"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.pop_id);
                if (message.default_front_ping_ms != null && Object.hasOwnProperty.call(message, "default_front_ping_ms"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.default_front_ping_ms);
                if (message.default_e2e_ping_ms != null && Object.hasOwnProperty.call(message, "default_e2e_ping_ms"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.default_e2e_ping_ms);
                if (message.cluster_penalty != null && Object.hasOwnProperty.call(message, "cluster_penalty"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cluster_penalty);
                if (message.default_e2e_score != null && Object.hasOwnProperty.call(message, "default_e2e_score"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.default_e2e_score);
                if (message.p2p_via_peer_relay_pop_id != null && Object.hasOwnProperty.call(message, "p2p_via_peer_relay_pop_id"))
                    writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.p2p_via_peer_relay_pop_id);
                if (message.alt_addresses != null && message.alt_addresses.length)
                    for (var i = 0; i < message.alt_addresses.length; ++i)
                        $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.encode(message.alt_addresses[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.best_dc_ping_ms != null && Object.hasOwnProperty.call(message, "best_dc_ping_ms"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.best_dc_ping_ms);
                if (message.best_dc_score != null && Object.hasOwnProperty.call(message, "best_dc_score"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.best_dc_score);
                if (message.best_dc_via_relay_pop_id != null && Object.hasOwnProperty.call(message, "best_dc_via_relay_pop_id"))
                    writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.best_dc_via_relay_pop_id);
                if (message.default_dc_ping_ms != null && Object.hasOwnProperty.call(message, "default_dc_ping_ms"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.default_dc_ping_ms);
                if (message.default_dc_score != null && Object.hasOwnProperty.call(message, "default_dc_score"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.default_dc_score);
                if (message.default_dc_via_relay_pop_id != null && Object.hasOwnProperty.call(message, "default_dc_via_relay_pop_id"))
                    writer.uint32(/* id 14, wireType 5 =*/117).fixed32(message.default_dc_via_relay_pop_id);
                if (message.test_dc_ping_ms != null && Object.hasOwnProperty.call(message, "test_dc_ping_ms"))
                    writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.test_dc_ping_ms);
                if (message.test_dc_score != null && Object.hasOwnProperty.call(message, "test_dc_score"))
                    writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.test_dc_score);
                if (message.test_dc_via_relay_pop_id != null && Object.hasOwnProperty.call(message, "test_dc_via_relay_pop_id"))
                    writer.uint32(/* id 17, wireType 5 =*/141).fixed32(message.test_dc_via_relay_pop_id);
                return writer;
            };
    
            /**
             * Encodes the specified POP message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP} message POP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            POP.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a POP message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            POP.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply.POP();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pop_id = reader.fixed32();
                        break;
                    case 2:
                        message.default_front_ping_ms = reader.uint32();
                        break;
                    case 4:
                        message.cluster_penalty = reader.uint32();
                        break;
                    case 7:
                        if (!(message.alt_addresses && message.alt_addresses.length))
                            message.alt_addresses = [];
                        message.alt_addresses.push($root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.default_e2e_ping_ms = reader.uint32();
                        break;
                    case 5:
                        message.default_e2e_score = reader.uint32();
                        break;
                    case 6:
                        message.p2p_via_peer_relay_pop_id = reader.fixed32();
                        break;
                    case 9:
                        message.best_dc_ping_ms = reader.uint32();
                        break;
                    case 10:
                        message.best_dc_score = reader.uint32();
                        break;
                    case 11:
                        message.best_dc_via_relay_pop_id = reader.fixed32();
                        break;
                    case 12:
                        message.default_dc_ping_ms = reader.uint32();
                        break;
                    case 13:
                        message.default_dc_score = reader.uint32();
                        break;
                    case 14:
                        message.default_dc_via_relay_pop_id = reader.fixed32();
                        break;
                    case 15:
                        message.test_dc_ping_ms = reader.uint32();
                        break;
                    case 16:
                        message.test_dc_score = reader.uint32();
                        break;
                    case 17:
                        message.test_dc_via_relay_pop_id = reader.fixed32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a POP message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            POP.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a POP message.
             * @function verify
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            POP.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pop_id != null && message.hasOwnProperty("pop_id"))
                    if (!$util.isInteger(message.pop_id))
                        return "pop_id: integer expected";
                if (message.default_front_ping_ms != null && message.hasOwnProperty("default_front_ping_ms"))
                    if (!$util.isInteger(message.default_front_ping_ms))
                        return "default_front_ping_ms: integer expected";
                if (message.cluster_penalty != null && message.hasOwnProperty("cluster_penalty"))
                    if (!$util.isInteger(message.cluster_penalty))
                        return "cluster_penalty: integer expected";
                if (message.alt_addresses != null && message.hasOwnProperty("alt_addresses")) {
                    if (!Array.isArray(message.alt_addresses))
                        return "alt_addresses: array expected";
                    for (var i = 0; i < message.alt_addresses.length; ++i) {
                        var error = $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.verify(message.alt_addresses[i]);
                        if (error)
                            return "alt_addresses." + error;
                    }
                }
                if (message.default_e2e_ping_ms != null && message.hasOwnProperty("default_e2e_ping_ms"))
                    if (!$util.isInteger(message.default_e2e_ping_ms))
                        return "default_e2e_ping_ms: integer expected";
                if (message.default_e2e_score != null && message.hasOwnProperty("default_e2e_score"))
                    if (!$util.isInteger(message.default_e2e_score))
                        return "default_e2e_score: integer expected";
                if (message.p2p_via_peer_relay_pop_id != null && message.hasOwnProperty("p2p_via_peer_relay_pop_id"))
                    if (!$util.isInteger(message.p2p_via_peer_relay_pop_id))
                        return "p2p_via_peer_relay_pop_id: integer expected";
                if (message.best_dc_ping_ms != null && message.hasOwnProperty("best_dc_ping_ms"))
                    if (!$util.isInteger(message.best_dc_ping_ms))
                        return "best_dc_ping_ms: integer expected";
                if (message.best_dc_score != null && message.hasOwnProperty("best_dc_score"))
                    if (!$util.isInteger(message.best_dc_score))
                        return "best_dc_score: integer expected";
                if (message.best_dc_via_relay_pop_id != null && message.hasOwnProperty("best_dc_via_relay_pop_id"))
                    if (!$util.isInteger(message.best_dc_via_relay_pop_id))
                        return "best_dc_via_relay_pop_id: integer expected";
                if (message.default_dc_ping_ms != null && message.hasOwnProperty("default_dc_ping_ms"))
                    if (!$util.isInteger(message.default_dc_ping_ms))
                        return "default_dc_ping_ms: integer expected";
                if (message.default_dc_score != null && message.hasOwnProperty("default_dc_score"))
                    if (!$util.isInteger(message.default_dc_score))
                        return "default_dc_score: integer expected";
                if (message.default_dc_via_relay_pop_id != null && message.hasOwnProperty("default_dc_via_relay_pop_id"))
                    if (!$util.isInteger(message.default_dc_via_relay_pop_id))
                        return "default_dc_via_relay_pop_id: integer expected";
                if (message.test_dc_ping_ms != null && message.hasOwnProperty("test_dc_ping_ms"))
                    if (!$util.isInteger(message.test_dc_ping_ms))
                        return "test_dc_ping_ms: integer expected";
                if (message.test_dc_score != null && message.hasOwnProperty("test_dc_score"))
                    if (!$util.isInteger(message.test_dc_score))
                        return "test_dc_score: integer expected";
                if (message.test_dc_via_relay_pop_id != null && message.hasOwnProperty("test_dc_via_relay_pop_id"))
                    if (!$util.isInteger(message.test_dc_via_relay_pop_id))
                        return "test_dc_via_relay_pop_id: integer expected";
                return null;
            };
    
            /**
             * Creates a POP message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP
             */
            POP.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply.POP)
                    return object;
                var message = new $root.CMsgSteamDatagramClientPingSampleReply.POP();
                if (object.pop_id != null)
                    message.pop_id = object.pop_id >>> 0;
                if (object.default_front_ping_ms != null)
                    message.default_front_ping_ms = object.default_front_ping_ms >>> 0;
                if (object.cluster_penalty != null)
                    message.cluster_penalty = object.cluster_penalty >>> 0;
                if (object.alt_addresses) {
                    if (!Array.isArray(object.alt_addresses))
                        throw TypeError(".CMsgSteamDatagramClientPingSampleReply.POP.alt_addresses: array expected");
                    message.alt_addresses = [];
                    for (var i = 0; i < object.alt_addresses.length; ++i) {
                        if (typeof object.alt_addresses[i] !== "object")
                            throw TypeError(".CMsgSteamDatagramClientPingSampleReply.POP.alt_addresses: object expected");
                        message.alt_addresses[i] = $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.fromObject(object.alt_addresses[i]);
                    }
                }
                if (object.default_e2e_ping_ms != null)
                    message.default_e2e_ping_ms = object.default_e2e_ping_ms >>> 0;
                if (object.default_e2e_score != null)
                    message.default_e2e_score = object.default_e2e_score >>> 0;
                if (object.p2p_via_peer_relay_pop_id != null)
                    message.p2p_via_peer_relay_pop_id = object.p2p_via_peer_relay_pop_id >>> 0;
                if (object.best_dc_ping_ms != null)
                    message.best_dc_ping_ms = object.best_dc_ping_ms >>> 0;
                if (object.best_dc_score != null)
                    message.best_dc_score = object.best_dc_score >>> 0;
                if (object.best_dc_via_relay_pop_id != null)
                    message.best_dc_via_relay_pop_id = object.best_dc_via_relay_pop_id >>> 0;
                if (object.default_dc_ping_ms != null)
                    message.default_dc_ping_ms = object.default_dc_ping_ms >>> 0;
                if (object.default_dc_score != null)
                    message.default_dc_score = object.default_dc_score >>> 0;
                if (object.default_dc_via_relay_pop_id != null)
                    message.default_dc_via_relay_pop_id = object.default_dc_via_relay_pop_id >>> 0;
                if (object.test_dc_ping_ms != null)
                    message.test_dc_ping_ms = object.test_dc_ping_ms >>> 0;
                if (object.test_dc_score != null)
                    message.test_dc_score = object.test_dc_score >>> 0;
                if (object.test_dc_via_relay_pop_id != null)
                    message.test_dc_via_relay_pop_id = object.test_dc_via_relay_pop_id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a POP message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.POP} message POP
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            POP.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.alt_addresses = [];
                if (options.defaults) {
                    object.pop_id = 0;
                    object.default_front_ping_ms = 0;
                    object.default_e2e_ping_ms = 0;
                    object.cluster_penalty = 0;
                    object.default_e2e_score = 0;
                    object.p2p_via_peer_relay_pop_id = 0;
                    object.best_dc_ping_ms = 0;
                    object.best_dc_score = 0;
                    object.best_dc_via_relay_pop_id = 0;
                    object.default_dc_ping_ms = 0;
                    object.default_dc_score = 0;
                    object.default_dc_via_relay_pop_id = 0;
                    object.test_dc_ping_ms = 0;
                    object.test_dc_score = 0;
                    object.test_dc_via_relay_pop_id = 0;
                }
                if (message.pop_id != null && message.hasOwnProperty("pop_id"))
                    object.pop_id = message.pop_id;
                if (message.default_front_ping_ms != null && message.hasOwnProperty("default_front_ping_ms"))
                    object.default_front_ping_ms = message.default_front_ping_ms;
                if (message.default_e2e_ping_ms != null && message.hasOwnProperty("default_e2e_ping_ms"))
                    object.default_e2e_ping_ms = message.default_e2e_ping_ms;
                if (message.cluster_penalty != null && message.hasOwnProperty("cluster_penalty"))
                    object.cluster_penalty = message.cluster_penalty;
                if (message.default_e2e_score != null && message.hasOwnProperty("default_e2e_score"))
                    object.default_e2e_score = message.default_e2e_score;
                if (message.p2p_via_peer_relay_pop_id != null && message.hasOwnProperty("p2p_via_peer_relay_pop_id"))
                    object.p2p_via_peer_relay_pop_id = message.p2p_via_peer_relay_pop_id;
                if (message.alt_addresses && message.alt_addresses.length) {
                    object.alt_addresses = [];
                    for (var j = 0; j < message.alt_addresses.length; ++j)
                        object.alt_addresses[j] = $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.toObject(message.alt_addresses[j], options);
                }
                if (message.best_dc_ping_ms != null && message.hasOwnProperty("best_dc_ping_ms"))
                    object.best_dc_ping_ms = message.best_dc_ping_ms;
                if (message.best_dc_score != null && message.hasOwnProperty("best_dc_score"))
                    object.best_dc_score = message.best_dc_score;
                if (message.best_dc_via_relay_pop_id != null && message.hasOwnProperty("best_dc_via_relay_pop_id"))
                    object.best_dc_via_relay_pop_id = message.best_dc_via_relay_pop_id;
                if (message.default_dc_ping_ms != null && message.hasOwnProperty("default_dc_ping_ms"))
                    object.default_dc_ping_ms = message.default_dc_ping_ms;
                if (message.default_dc_score != null && message.hasOwnProperty("default_dc_score"))
                    object.default_dc_score = message.default_dc_score;
                if (message.default_dc_via_relay_pop_id != null && message.hasOwnProperty("default_dc_via_relay_pop_id"))
                    object.default_dc_via_relay_pop_id = message.default_dc_via_relay_pop_id;
                if (message.test_dc_ping_ms != null && message.hasOwnProperty("test_dc_ping_ms"))
                    object.test_dc_ping_ms = message.test_dc_ping_ms;
                if (message.test_dc_score != null && message.hasOwnProperty("test_dc_score"))
                    object.test_dc_score = message.test_dc_score;
                if (message.test_dc_via_relay_pop_id != null && message.hasOwnProperty("test_dc_via_relay_pop_id"))
                    object.test_dc_via_relay_pop_id = message.test_dc_via_relay_pop_id;
                return object;
            };
    
            /**
             * Converts this POP to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            POP.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            POP.AltAddress = (function() {
    
                /**
                 * Properties of an AltAddress.
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP
                 * @interface IAltAddress
                 * @property {string|null} [id] AltAddress id
                 * @property {number|null} [front_ping_ms] AltAddress front_ping_ms
                 * @property {number|null} [penalty] AltAddress penalty
                 */
    
                /**
                 * Constructs a new AltAddress.
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP
                 * @classdesc Represents an AltAddress.
                 * @implements IAltAddress
                 * @constructor
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress=} [properties] Properties to set
                 */
                function AltAddress(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * AltAddress id.
                 * @member {string} id
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 */
                AltAddress.prototype.id = "";
    
                /**
                 * AltAddress front_ping_ms.
                 * @member {number} front_ping_ms
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 */
                AltAddress.prototype.front_ping_ms = 0;
    
                /**
                 * AltAddress penalty.
                 * @member {number} penalty
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 */
                AltAddress.prototype.penalty = 0;
    
                /**
                 * Creates a new AltAddress instance using the specified properties.
                 * @function create
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress=} [properties] Properties to set
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress instance
                 */
                AltAddress.create = function create(properties) {
                    return new AltAddress(properties);
                };
    
                /**
                 * Encodes the specified AltAddress message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress} message AltAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AltAddress.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.front_ping_ms != null && Object.hasOwnProperty.call(message, "front_ping_ms"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.front_ping_ms);
                    if (message.penalty != null && Object.hasOwnProperty.call(message, "penalty"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.penalty);
                    return writer;
                };
    
                /**
                 * Encodes the specified AltAddress message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress} message AltAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AltAddress.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an AltAddress message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AltAddress.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.front_ping_ms = reader.uint32();
                            break;
                        case 3:
                            message.penalty = reader.uint32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an AltAddress message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AltAddress.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an AltAddress message.
                 * @function verify
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AltAddress.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.front_ping_ms != null && message.hasOwnProperty("front_ping_ms"))
                        if (!$util.isInteger(message.front_ping_ms))
                            return "front_ping_ms: integer expected";
                    if (message.penalty != null && message.hasOwnProperty("penalty"))
                        if (!$util.isInteger(message.penalty))
                            return "penalty: integer expected";
                    return null;
                };
    
                /**
                 * Creates an AltAddress message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress
                 */
                AltAddress.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
                        return object;
                    var message = new $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.front_ping_ms != null)
                        message.front_ping_ms = object.front_ping_ms >>> 0;
                    if (object.penalty != null)
                        message.penalty = object.penalty >>> 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from an AltAddress message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} message AltAddress
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AltAddress.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.front_ping_ms = 0;
                        object.penalty = 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.front_ping_ms != null && message.hasOwnProperty("front_ping_ms"))
                        object.front_ping_ms = message.front_ping_ms;
                    if (message.penalty != null && message.hasOwnProperty("penalty"))
                        object.penalty = message.penalty;
                    return object;
                };
    
                /**
                 * Converts this AltAddress to JSON.
                 * @function toJSON
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AltAddress.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return AltAddress;
            })();
    
            return POP;
        })();
    
        CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter = (function() {
    
            /**
             * Properties of a LegacyDataCenter.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @interface ILegacyDataCenter
             * @property {number|null} [data_center_id] LegacyDataCenter data_center_id
             * @property {number|null} [best_dc_via_relay_pop_id] LegacyDataCenter best_dc_via_relay_pop_id
             * @property {number|null} [best_dc_ping_ms] LegacyDataCenter best_dc_ping_ms
             */
    
            /**
             * Constructs a new LegacyDataCenter.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @classdesc Represents a LegacyDataCenter.
             * @implements ILegacyDataCenter
             * @constructor
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter=} [properties] Properties to set
             */
            function LegacyDataCenter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LegacyDataCenter data_center_id.
             * @member {number} data_center_id
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             */
            LegacyDataCenter.prototype.data_center_id = 0;
    
            /**
             * LegacyDataCenter best_dc_via_relay_pop_id.
             * @member {number} best_dc_via_relay_pop_id
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             */
            LegacyDataCenter.prototype.best_dc_via_relay_pop_id = 0;
    
            /**
             * LegacyDataCenter best_dc_ping_ms.
             * @member {number} best_dc_ping_ms
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             */
            LegacyDataCenter.prototype.best_dc_ping_ms = 0;
    
            /**
             * Creates a new LegacyDataCenter instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter=} [properties] Properties to set
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter instance
             */
            LegacyDataCenter.create = function create(properties) {
                return new LegacyDataCenter(properties);
            };
    
            /**
             * Encodes the specified LegacyDataCenter message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter} message LegacyDataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LegacyDataCenter.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data_center_id != null && Object.hasOwnProperty.call(message, "data_center_id"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.data_center_id);
                if (message.best_dc_via_relay_pop_id != null && Object.hasOwnProperty.call(message, "best_dc_via_relay_pop_id"))
                    writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.best_dc_via_relay_pop_id);
                if (message.best_dc_ping_ms != null && Object.hasOwnProperty.call(message, "best_dc_ping_ms"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.best_dc_ping_ms);
                return writer;
            };
    
            /**
             * Encodes the specified LegacyDataCenter message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter} message LegacyDataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LegacyDataCenter.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LegacyDataCenter message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LegacyDataCenter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.data_center_id = reader.fixed32();
                        break;
                    case 2:
                        message.best_dc_via_relay_pop_id = reader.fixed32();
                        break;
                    case 3:
                        message.best_dc_ping_ms = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LegacyDataCenter message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LegacyDataCenter.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LegacyDataCenter message.
             * @function verify
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LegacyDataCenter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                    if (!$util.isInteger(message.data_center_id))
                        return "data_center_id: integer expected";
                if (message.best_dc_via_relay_pop_id != null && message.hasOwnProperty("best_dc_via_relay_pop_id"))
                    if (!$util.isInteger(message.best_dc_via_relay_pop_id))
                        return "best_dc_via_relay_pop_id: integer expected";
                if (message.best_dc_ping_ms != null && message.hasOwnProperty("best_dc_ping_ms"))
                    if (!$util.isInteger(message.best_dc_ping_ms))
                        return "best_dc_ping_ms: integer expected";
                return null;
            };
    
            /**
             * Creates a LegacyDataCenter message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter
             */
            LegacyDataCenter.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
                    return object;
                var message = new $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter();
                if (object.data_center_id != null)
                    message.data_center_id = object.data_center_id >>> 0;
                if (object.best_dc_via_relay_pop_id != null)
                    message.best_dc_via_relay_pop_id = object.best_dc_via_relay_pop_id >>> 0;
                if (object.best_dc_ping_ms != null)
                    message.best_dc_ping_ms = object.best_dc_ping_ms >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LegacyDataCenter message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} message LegacyDataCenter
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LegacyDataCenter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.data_center_id = 0;
                    object.best_dc_via_relay_pop_id = 0;
                    object.best_dc_ping_ms = 0;
                }
                if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                    object.data_center_id = message.data_center_id;
                if (message.best_dc_via_relay_pop_id != null && message.hasOwnProperty("best_dc_via_relay_pop_id"))
                    object.best_dc_via_relay_pop_id = message.best_dc_via_relay_pop_id;
                if (message.best_dc_ping_ms != null && message.hasOwnProperty("best_dc_ping_ms"))
                    object.best_dc_ping_ms = message.best_dc_ping_ms;
                return object;
            };
    
            /**
             * Converts this LegacyDataCenter to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LegacyDataCenter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return LegacyDataCenter;
        })();
    
        return CMsgSteamDatagramClientPingSampleReply;
    })();
    
    $root.CMsgSteamDatagramClientSwitchedPrimary = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramClientSwitchedPrimary.
         * @exports ICMsgSteamDatagramClientSwitchedPrimary
         * @interface ICMsgSteamDatagramClientSwitchedPrimary
         * @property {number|null} [connection_id] CMsgSteamDatagramClientSwitchedPrimary connection_id
         * @property {number|null} [from_ip] CMsgSteamDatagramClientSwitchedPrimary from_ip
         * @property {number|null} [from_port] CMsgSteamDatagramClientSwitchedPrimary from_port
         * @property {number|null} [from_router_cluster] CMsgSteamDatagramClientSwitchedPrimary from_router_cluster
         * @property {number|null} [from_active_time] CMsgSteamDatagramClientSwitchedPrimary from_active_time
         * @property {number|null} [from_active_packets_recv] CMsgSteamDatagramClientSwitchedPrimary from_active_packets_recv
         * @property {string|null} [from_dropped_reason] CMsgSteamDatagramClientSwitchedPrimary from_dropped_reason
         * @property {number|null} [gap_ms] CMsgSteamDatagramClientSwitchedPrimary gap_ms
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [from_quality_now] CMsgSteamDatagramClientSwitchedPrimary from_quality_now
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [to_quality_now] CMsgSteamDatagramClientSwitchedPrimary to_quality_now
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [from_quality_then] CMsgSteamDatagramClientSwitchedPrimary from_quality_then
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [to_quality_then] CMsgSteamDatagramClientSwitchedPrimary to_quality_then
         */
    
        /**
         * Constructs a new CMsgSteamDatagramClientSwitchedPrimary.
         * @exports CMsgSteamDatagramClientSwitchedPrimary
         * @classdesc Represents a CMsgSteamDatagramClientSwitchedPrimary.
         * @implements ICMsgSteamDatagramClientSwitchedPrimary
         * @constructor
         * @param {ICMsgSteamDatagramClientSwitchedPrimary=} [properties] Properties to set
         */
        function CMsgSteamDatagramClientSwitchedPrimary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_ip.
         * @member {number} from_ip
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_ip = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_port.
         * @member {number} from_port
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_port = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_router_cluster.
         * @member {number} from_router_cluster
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_router_cluster = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_active_time.
         * @member {number} from_active_time
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_active_time = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_active_packets_recv.
         * @member {number} from_active_packets_recv
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_active_packets_recv = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_dropped_reason.
         * @member {string} from_dropped_reason
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_dropped_reason = "";
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary gap_ms.
         * @member {number} gap_ms
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.gap_ms = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_quality_now.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} from_quality_now
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_quality_now = null;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary to_quality_now.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} to_quality_now
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.to_quality_now = null;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary from_quality_then.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} from_quality_then
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.from_quality_then = null;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary to_quality_then.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} to_quality_then
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.to_quality_then = null;
    
        /**
         * Creates a new CMsgSteamDatagramClientSwitchedPrimary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {ICMsgSteamDatagramClientSwitchedPrimary=} [properties] Properties to set
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.create = function create(properties) {
            return new CMsgSteamDatagramClientSwitchedPrimary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientSwitchedPrimary message. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {ICMsgSteamDatagramClientSwitchedPrimary} message CMsgSteamDatagramClientSwitchedPrimary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientSwitchedPrimary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connection_id);
            if (message.from_ip != null && Object.hasOwnProperty.call(message, "from_ip"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.from_ip);
            if (message.from_port != null && Object.hasOwnProperty.call(message, "from_port"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.from_port);
            if (message.from_router_cluster != null && Object.hasOwnProperty.call(message, "from_router_cluster"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.from_router_cluster);
            if (message.from_active_time != null && Object.hasOwnProperty.call(message, "from_active_time"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.from_active_time);
            if (message.from_active_packets_recv != null && Object.hasOwnProperty.call(message, "from_active_packets_recv"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.from_active_packets_recv);
            if (message.from_dropped_reason != null && Object.hasOwnProperty.call(message, "from_dropped_reason"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.from_dropped_reason);
            if (message.gap_ms != null && Object.hasOwnProperty.call(message, "gap_ms"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.gap_ms);
            if (message.from_quality_now != null && Object.hasOwnProperty.call(message, "from_quality_now"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.from_quality_now, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.to_quality_now != null && Object.hasOwnProperty.call(message, "to_quality_now"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.to_quality_now, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.from_quality_then != null && Object.hasOwnProperty.call(message, "from_quality_then"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.from_quality_then, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.to_quality_then != null && Object.hasOwnProperty.call(message, "to_quality_then"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.to_quality_then, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientSwitchedPrimary message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {ICMsgSteamDatagramClientSwitchedPrimary} message CMsgSteamDatagramClientSwitchedPrimary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientSwitchedPrimary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientSwitchedPrimary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientSwitchedPrimary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientSwitchedPrimary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connection_id = reader.fixed32();
                    break;
                case 2:
                    message.from_ip = reader.fixed32();
                    break;
                case 3:
                    message.from_port = reader.uint32();
                    break;
                case 4:
                    message.from_router_cluster = reader.fixed32();
                    break;
                case 5:
                    message.from_active_time = reader.uint32();
                    break;
                case 6:
                    message.from_active_packets_recv = reader.uint32();
                    break;
                case 7:
                    message.from_dropped_reason = reader.string();
                    break;
                case 8:
                    message.gap_ms = reader.uint32();
                    break;
                case 9:
                    message.from_quality_now = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.to_quality_now = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.from_quality_then = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.to_quality_then = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientSwitchedPrimary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientSwitchedPrimary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramClientSwitchedPrimary message.
         * @function verify
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramClientSwitchedPrimary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.from_ip != null && message.hasOwnProperty("from_ip"))
                if (!$util.isInteger(message.from_ip))
                    return "from_ip: integer expected";
            if (message.from_port != null && message.hasOwnProperty("from_port"))
                if (!$util.isInteger(message.from_port))
                    return "from_port: integer expected";
            if (message.from_router_cluster != null && message.hasOwnProperty("from_router_cluster"))
                if (!$util.isInteger(message.from_router_cluster))
                    return "from_router_cluster: integer expected";
            if (message.from_active_time != null && message.hasOwnProperty("from_active_time"))
                if (!$util.isInteger(message.from_active_time))
                    return "from_active_time: integer expected";
            if (message.from_active_packets_recv != null && message.hasOwnProperty("from_active_packets_recv"))
                if (!$util.isInteger(message.from_active_packets_recv))
                    return "from_active_packets_recv: integer expected";
            if (message.from_dropped_reason != null && message.hasOwnProperty("from_dropped_reason"))
                if (!$util.isString(message.from_dropped_reason))
                    return "from_dropped_reason: string expected";
            if (message.gap_ms != null && message.hasOwnProperty("gap_ms"))
                if (!$util.isInteger(message.gap_ms))
                    return "gap_ms: integer expected";
            if (message.from_quality_now != null && message.hasOwnProperty("from_quality_now")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.from_quality_now);
                if (error)
                    return "from_quality_now." + error;
            }
            if (message.to_quality_now != null && message.hasOwnProperty("to_quality_now")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.to_quality_now);
                if (error)
                    return "to_quality_now." + error;
            }
            if (message.from_quality_then != null && message.hasOwnProperty("from_quality_then")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.from_quality_then);
                if (error)
                    return "from_quality_then." + error;
            }
            if (message.to_quality_then != null && message.hasOwnProperty("to_quality_then")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.to_quality_then);
                if (error)
                    return "to_quality_then." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramClientSwitchedPrimary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary
         */
        CMsgSteamDatagramClientSwitchedPrimary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramClientSwitchedPrimary)
                return object;
            var message = new $root.CMsgSteamDatagramClientSwitchedPrimary();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.from_ip != null)
                message.from_ip = object.from_ip >>> 0;
            if (object.from_port != null)
                message.from_port = object.from_port >>> 0;
            if (object.from_router_cluster != null)
                message.from_router_cluster = object.from_router_cluster >>> 0;
            if (object.from_active_time != null)
                message.from_active_time = object.from_active_time >>> 0;
            if (object.from_active_packets_recv != null)
                message.from_active_packets_recv = object.from_active_packets_recv >>> 0;
            if (object.from_dropped_reason != null)
                message.from_dropped_reason = String(object.from_dropped_reason);
            if (object.gap_ms != null)
                message.gap_ms = object.gap_ms >>> 0;
            if (object.from_quality_now != null) {
                if (typeof object.from_quality_now !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.from_quality_now: object expected");
                message.from_quality_now = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.from_quality_now);
            }
            if (object.to_quality_now != null) {
                if (typeof object.to_quality_now !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.to_quality_now: object expected");
                message.to_quality_now = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.to_quality_now);
            }
            if (object.from_quality_then != null) {
                if (typeof object.from_quality_then !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.from_quality_then: object expected");
                message.from_quality_then = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.from_quality_then);
            }
            if (object.to_quality_then != null) {
                if (typeof object.to_quality_then !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.to_quality_then: object expected");
                message.to_quality_then = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.to_quality_then);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramClientSwitchedPrimary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {CMsgSteamDatagramClientSwitchedPrimary} message CMsgSteamDatagramClientSwitchedPrimary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramClientSwitchedPrimary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connection_id = 0;
                object.from_ip = 0;
                object.from_port = 0;
                object.from_router_cluster = 0;
                object.from_active_time = 0;
                object.from_active_packets_recv = 0;
                object.from_dropped_reason = "";
                object.gap_ms = 0;
                object.from_quality_now = null;
                object.to_quality_now = null;
                object.from_quality_then = null;
                object.to_quality_then = null;
            }
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.from_ip != null && message.hasOwnProperty("from_ip"))
                object.from_ip = message.from_ip;
            if (message.from_port != null && message.hasOwnProperty("from_port"))
                object.from_port = message.from_port;
            if (message.from_router_cluster != null && message.hasOwnProperty("from_router_cluster"))
                object.from_router_cluster = message.from_router_cluster;
            if (message.from_active_time != null && message.hasOwnProperty("from_active_time"))
                object.from_active_time = message.from_active_time;
            if (message.from_active_packets_recv != null && message.hasOwnProperty("from_active_packets_recv"))
                object.from_active_packets_recv = message.from_active_packets_recv;
            if (message.from_dropped_reason != null && message.hasOwnProperty("from_dropped_reason"))
                object.from_dropped_reason = message.from_dropped_reason;
            if (message.gap_ms != null && message.hasOwnProperty("gap_ms"))
                object.gap_ms = message.gap_ms;
            if (message.from_quality_now != null && message.hasOwnProperty("from_quality_now"))
                object.from_quality_now = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.from_quality_now, options);
            if (message.to_quality_now != null && message.hasOwnProperty("to_quality_now"))
                object.to_quality_now = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.to_quality_now, options);
            if (message.from_quality_then != null && message.hasOwnProperty("from_quality_then"))
                object.from_quality_then = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.from_quality_then, options);
            if (message.to_quality_then != null && message.hasOwnProperty("to_quality_then"))
                object.to_quality_then = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.to_quality_then, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramClientSwitchedPrimary to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamDatagramClientSwitchedPrimary.RouterQuality = (function() {
    
            /**
             * Properties of a RouterQuality.
             * @memberof CMsgSteamDatagramClientSwitchedPrimary
             * @interface IRouterQuality
             * @property {number|null} [score] RouterQuality score
             * @property {number|null} [front_ping] RouterQuality front_ping
             * @property {number|null} [back_ping] RouterQuality back_ping
             * @property {number|null} [seconds_until_down] RouterQuality seconds_until_down
             */
    
            /**
             * Constructs a new RouterQuality.
             * @memberof CMsgSteamDatagramClientSwitchedPrimary
             * @classdesc Represents a RouterQuality.
             * @implements IRouterQuality
             * @constructor
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality=} [properties] Properties to set
             */
            function RouterQuality(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RouterQuality score.
             * @member {number} score
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.score = 0;
    
            /**
             * RouterQuality front_ping.
             * @member {number} front_ping
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.front_ping = 0;
    
            /**
             * RouterQuality back_ping.
             * @member {number} back_ping
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.back_ping = 0;
    
            /**
             * RouterQuality seconds_until_down.
             * @member {number} seconds_until_down
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.seconds_until_down = 0;
    
            /**
             * Creates a new RouterQuality instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality=} [properties] Properties to set
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality instance
             */
            RouterQuality.create = function create(properties) {
                return new RouterQuality(properties);
            };
    
            /**
             * Encodes the specified RouterQuality message. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality} message RouterQuality message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouterQuality.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.score);
                if (message.front_ping != null && Object.hasOwnProperty.call(message, "front_ping"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.front_ping);
                if (message.back_ping != null && Object.hasOwnProperty.call(message, "back_ping"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.back_ping);
                if (message.seconds_until_down != null && Object.hasOwnProperty.call(message, "seconds_until_down"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.seconds_until_down);
                return writer;
            };
    
            /**
             * Encodes the specified RouterQuality message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality} message RouterQuality message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouterQuality.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RouterQuality message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouterQuality.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.score = reader.uint32();
                        break;
                    case 2:
                        message.front_ping = reader.uint32();
                        break;
                    case 3:
                        message.back_ping = reader.uint32();
                        break;
                    case 4:
                        message.seconds_until_down = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RouterQuality message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouterQuality.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RouterQuality message.
             * @function verify
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RouterQuality.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.score != null && message.hasOwnProperty("score"))
                    if (!$util.isInteger(message.score))
                        return "score: integer expected";
                if (message.front_ping != null && message.hasOwnProperty("front_ping"))
                    if (!$util.isInteger(message.front_ping))
                        return "front_ping: integer expected";
                if (message.back_ping != null && message.hasOwnProperty("back_ping"))
                    if (!$util.isInteger(message.back_ping))
                        return "back_ping: integer expected";
                if (message.seconds_until_down != null && message.hasOwnProperty("seconds_until_down"))
                    if (!$util.isInteger(message.seconds_until_down))
                        return "seconds_until_down: integer expected";
                return null;
            };
    
            /**
             * Creates a RouterQuality message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality
             */
            RouterQuality.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
                    return object;
                var message = new $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality();
                if (object.score != null)
                    message.score = object.score >>> 0;
                if (object.front_ping != null)
                    message.front_ping = object.front_ping >>> 0;
                if (object.back_ping != null)
                    message.back_ping = object.back_ping >>> 0;
                if (object.seconds_until_down != null)
                    message.seconds_until_down = object.seconds_until_down >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RouterQuality message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} message RouterQuality
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RouterQuality.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.score = 0;
                    object.front_ping = 0;
                    object.back_ping = 0;
                    object.seconds_until_down = 0;
                }
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                if (message.front_ping != null && message.hasOwnProperty("front_ping"))
                    object.front_ping = message.front_ping;
                if (message.back_ping != null && message.hasOwnProperty("back_ping"))
                    object.back_ping = message.back_ping;
                if (message.seconds_until_down != null && message.hasOwnProperty("seconds_until_down"))
                    object.seconds_until_down = message.seconds_until_down;
                return object;
            };
    
            /**
             * Converts this RouterQuality to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RouterQuality.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RouterQuality;
        })();
    
        return CMsgSteamDatagramClientSwitchedPrimary;
    })();
    
    $root.CMsgSteamDatagramConnectRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectRequest.
         * @exports ICMsgSteamDatagramConnectRequest
         * @interface ICMsgSteamDatagramConnectRequest
         * @property {number|null} [connection_id] CMsgSteamDatagramConnectRequest connection_id
         * @property {number|Long|null} [my_timestamp] CMsgSteamDatagramConnectRequest my_timestamp
         * @property {number|null} [ping_est_ms] CMsgSteamDatagramConnectRequest ping_est_ms
         * @property {number|null} [virtual_port] CMsgSteamDatagramConnectRequest virtual_port
         * @property {number|null} [gameserver_relay_session_id] CMsgSteamDatagramConnectRequest gameserver_relay_session_id
         * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] CMsgSteamDatagramConnectRequest crypt
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramConnectRequest cert
         * @property {number|Long|null} [routing_secret] CMsgSteamDatagramConnectRequest routing_secret
         * @property {number|Long|null} [legacy_client_steam_id] CMsgSteamDatagramConnectRequest legacy_client_steam_id
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectRequest.
         * @exports CMsgSteamDatagramConnectRequest
         * @classdesc Represents a CMsgSteamDatagramConnectRequest.
         * @implements ICMsgSteamDatagramConnectRequest
         * @constructor
         * @param {ICMsgSteamDatagramConnectRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectRequest connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest my_timestamp.
         * @member {number|Long} my_timestamp
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.my_timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectRequest ping_est_ms.
         * @member {number} ping_est_ms
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.ping_est_ms = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest virtual_port.
         * @member {number} virtual_port
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.virtual_port = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest gameserver_relay_session_id.
         * @member {number} gameserver_relay_session_id
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.gameserver_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest crypt.
         * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.crypt = null;
    
        /**
         * CMsgSteamDatagramConnectRequest cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.cert = null;
    
        /**
         * CMsgSteamDatagramConnectRequest routing_secret.
         * @member {number|Long} routing_secret
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.routing_secret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectRequest legacy_client_steam_id.
         * @member {number|Long} legacy_client_steam_id
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.legacy_client_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {ICMsgSteamDatagramConnectRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest instance
         */
        CMsgSteamDatagramConnectRequest.create = function create(properties) {
            return new CMsgSteamDatagramConnectRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectRequest message. Does not implicitly {@link CMsgSteamDatagramConnectRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {ICMsgSteamDatagramConnectRequest} message CMsgSteamDatagramConnectRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connection_id);
            if (message.gameserver_relay_session_id != null && Object.hasOwnProperty.call(message, "gameserver_relay_session_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameserver_relay_session_id);
            if (message.legacy_client_steam_id != null && Object.hasOwnProperty.call(message, "legacy_client_steam_id"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacy_client_steam_id);
            if (message.my_timestamp != null && Object.hasOwnProperty.call(message, "my_timestamp"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.my_timestamp);
            if (message.ping_est_ms != null && Object.hasOwnProperty.call(message, "ping_est_ms"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ping_est_ms);
            if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.virtual_port != null && Object.hasOwnProperty.call(message, "virtual_port"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.virtual_port);
            if (message.routing_secret != null && Object.hasOwnProperty.call(message, "routing_secret"))
                writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.routing_secret);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {ICMsgSteamDatagramConnectRequest} message CMsgSteamDatagramConnectRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connection_id = reader.fixed32();
                    break;
                case 4:
                    message.my_timestamp = reader.fixed64();
                    break;
                case 5:
                    message.ping_est_ms = reader.uint32();
                    break;
                case 9:
                    message.virtual_port = reader.uint32();
                    break;
                case 2:
                    message.gameserver_relay_session_id = reader.uint32();
                    break;
                case 6:
                    message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.routing_secret = reader.fixed64();
                    break;
                case 3:
                    message.legacy_client_steam_id = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.my_timestamp != null && message.hasOwnProperty("my_timestamp"))
                if (!$util.isInteger(message.my_timestamp) && !(message.my_timestamp && $util.isInteger(message.my_timestamp.low) && $util.isInteger(message.my_timestamp.high)))
                    return "my_timestamp: integer|Long expected";
            if (message.ping_est_ms != null && message.hasOwnProperty("ping_est_ms"))
                if (!$util.isInteger(message.ping_est_ms))
                    return "ping_est_ms: integer expected";
            if (message.virtual_port != null && message.hasOwnProperty("virtual_port"))
                if (!$util.isInteger(message.virtual_port))
                    return "virtual_port: integer expected";
            if (message.gameserver_relay_session_id != null && message.hasOwnProperty("gameserver_relay_session_id"))
                if (!$util.isInteger(message.gameserver_relay_session_id))
                    return "gameserver_relay_session_id: integer expected";
            if (message.crypt != null && message.hasOwnProperty("crypt")) {
                var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                if (error)
                    return "crypt." + error;
            }
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (!$util.isInteger(message.routing_secret) && !(message.routing_secret && $util.isInteger(message.routing_secret.low) && $util.isInteger(message.routing_secret.high)))
                    return "routing_secret: integer|Long expected";
            if (message.legacy_client_steam_id != null && message.hasOwnProperty("legacy_client_steam_id"))
                if (!$util.isInteger(message.legacy_client_steam_id) && !(message.legacy_client_steam_id && $util.isInteger(message.legacy_client_steam_id.low) && $util.isInteger(message.legacy_client_steam_id.high)))
                    return "legacy_client_steam_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest
         */
        CMsgSteamDatagramConnectRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectRequest)
                return object;
            var message = new $root.CMsgSteamDatagramConnectRequest();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.my_timestamp != null)
                if ($util.Long)
                    (message.my_timestamp = $util.Long.fromValue(object.my_timestamp)).unsigned = false;
                else if (typeof object.my_timestamp === "string")
                    message.my_timestamp = parseInt(object.my_timestamp, 10);
                else if (typeof object.my_timestamp === "number")
                    message.my_timestamp = object.my_timestamp;
                else if (typeof object.my_timestamp === "object")
                    message.my_timestamp = new $util.LongBits(object.my_timestamp.low >>> 0, object.my_timestamp.high >>> 0).toNumber();
            if (object.ping_est_ms != null)
                message.ping_est_ms = object.ping_est_ms >>> 0;
            if (object.virtual_port != null)
                message.virtual_port = object.virtual_port >>> 0;
            if (object.gameserver_relay_session_id != null)
                message.gameserver_relay_session_id = object.gameserver_relay_session_id >>> 0;
            if (object.crypt != null) {
                if (typeof object.crypt !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectRequest.crypt: object expected");
                message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
            }
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectRequest.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            if (object.routing_secret != null)
                if ($util.Long)
                    (message.routing_secret = $util.Long.fromValue(object.routing_secret)).unsigned = false;
                else if (typeof object.routing_secret === "string")
                    message.routing_secret = parseInt(object.routing_secret, 10);
                else if (typeof object.routing_secret === "number")
                    message.routing_secret = object.routing_secret;
                else if (typeof object.routing_secret === "object")
                    message.routing_secret = new $util.LongBits(object.routing_secret.low >>> 0, object.routing_secret.high >>> 0).toNumber();
            if (object.legacy_client_steam_id != null)
                if ($util.Long)
                    (message.legacy_client_steam_id = $util.Long.fromValue(object.legacy_client_steam_id)).unsigned = false;
                else if (typeof object.legacy_client_steam_id === "string")
                    message.legacy_client_steam_id = parseInt(object.legacy_client_steam_id, 10);
                else if (typeof object.legacy_client_steam_id === "number")
                    message.legacy_client_steam_id = object.legacy_client_steam_id;
                else if (typeof object.legacy_client_steam_id === "object")
                    message.legacy_client_steam_id = new $util.LongBits(object.legacy_client_steam_id.low >>> 0, object.legacy_client_steam_id.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {CMsgSteamDatagramConnectRequest} message CMsgSteamDatagramConnectRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connection_id = 0;
                object.gameserver_relay_session_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacy_client_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacy_client_steam_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.my_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.my_timestamp = options.longs === String ? "0" : 0;
                object.ping_est_ms = 0;
                object.crypt = null;
                object.cert = null;
                object.virtual_port = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routing_secret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routing_secret = options.longs === String ? "0" : 0;
            }
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.gameserver_relay_session_id != null && message.hasOwnProperty("gameserver_relay_session_id"))
                object.gameserver_relay_session_id = message.gameserver_relay_session_id;
            if (message.legacy_client_steam_id != null && message.hasOwnProperty("legacy_client_steam_id"))
                if (typeof message.legacy_client_steam_id === "number")
                    object.legacy_client_steam_id = options.longs === String ? String(message.legacy_client_steam_id) : message.legacy_client_steam_id;
                else
                    object.legacy_client_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.legacy_client_steam_id) : options.longs === Number ? new $util.LongBits(message.legacy_client_steam_id.low >>> 0, message.legacy_client_steam_id.high >>> 0).toNumber() : message.legacy_client_steam_id;
            if (message.my_timestamp != null && message.hasOwnProperty("my_timestamp"))
                if (typeof message.my_timestamp === "number")
                    object.my_timestamp = options.longs === String ? String(message.my_timestamp) : message.my_timestamp;
                else
                    object.my_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.my_timestamp) : options.longs === Number ? new $util.LongBits(message.my_timestamp.low >>> 0, message.my_timestamp.high >>> 0).toNumber() : message.my_timestamp;
            if (message.ping_est_ms != null && message.hasOwnProperty("ping_est_ms"))
                object.ping_est_ms = message.ping_est_ms;
            if (message.crypt != null && message.hasOwnProperty("crypt"))
                object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.virtual_port != null && message.hasOwnProperty("virtual_port"))
                object.virtual_port = message.virtual_port;
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (typeof message.routing_secret === "number")
                    object.routing_secret = options.longs === String ? String(message.routing_secret) : message.routing_secret;
                else
                    object.routing_secret = options.longs === String ? $util.Long.prototype.toString.call(message.routing_secret) : options.longs === Number ? new $util.LongBits(message.routing_secret.low >>> 0, message.routing_secret.high >>> 0).toNumber() : message.routing_secret;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramConnectRequest;
    })();
    
    $root.CMsgSteamDatagramConnectOK = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectOK.
         * @exports ICMsgSteamDatagramConnectOK
         * @interface ICMsgSteamDatagramConnectOK
         * @property {number|null} [client_connection_id] CMsgSteamDatagramConnectOK client_connection_id
         * @property {number|null} [server_connection_id] CMsgSteamDatagramConnectOK server_connection_id
         * @property {number|Long|null} [your_timestamp] CMsgSteamDatagramConnectOK your_timestamp
         * @property {number|null} [delay_time_usec] CMsgSteamDatagramConnectOK delay_time_usec
         * @property {number|null} [gameserver_relay_session_id] CMsgSteamDatagramConnectOK gameserver_relay_session_id
         * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] CMsgSteamDatagramConnectOK crypt
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramConnectOK cert
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectOK.
         * @exports CMsgSteamDatagramConnectOK
         * @classdesc Represents a CMsgSteamDatagramConnectOK.
         * @implements ICMsgSteamDatagramConnectOK
         * @constructor
         * @param {ICMsgSteamDatagramConnectOK=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectOK(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectOK client_connection_id.
         * @member {number} client_connection_id
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.client_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectOK server_connection_id.
         * @member {number} server_connection_id
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.server_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectOK your_timestamp.
         * @member {number|Long} your_timestamp
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.your_timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectOK delay_time_usec.
         * @member {number} delay_time_usec
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.delay_time_usec = 0;
    
        /**
         * CMsgSteamDatagramConnectOK gameserver_relay_session_id.
         * @member {number} gameserver_relay_session_id
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.gameserver_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectOK crypt.
         * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.crypt = null;
    
        /**
         * CMsgSteamDatagramConnectOK cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.cert = null;
    
        /**
         * Creates a new CMsgSteamDatagramConnectOK instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {ICMsgSteamDatagramConnectOK=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK instance
         */
        CMsgSteamDatagramConnectOK.create = function create(properties) {
            return new CMsgSteamDatagramConnectOK(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectOK message. Does not implicitly {@link CMsgSteamDatagramConnectOK.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {ICMsgSteamDatagramConnectOK} message CMsgSteamDatagramConnectOK message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectOK.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.client_connection_id != null && Object.hasOwnProperty.call(message, "client_connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.client_connection_id);
            if (message.gameserver_relay_session_id != null && Object.hasOwnProperty.call(message, "gameserver_relay_session_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameserver_relay_session_id);
            if (message.your_timestamp != null && Object.hasOwnProperty.call(message, "your_timestamp"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.your_timestamp);
            if (message.delay_time_usec != null && Object.hasOwnProperty.call(message, "delay_time_usec"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.delay_time_usec);
            if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.server_connection_id != null && Object.hasOwnProperty.call(message, "server_connection_id"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.server_connection_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectOK message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectOK.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {ICMsgSteamDatagramConnectOK} message CMsgSteamDatagramConnectOK message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectOK.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectOK message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectOK.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectOK();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.client_connection_id = reader.fixed32();
                    break;
                case 7:
                    message.server_connection_id = reader.fixed32();
                    break;
                case 3:
                    message.your_timestamp = reader.fixed64();
                    break;
                case 4:
                    message.delay_time_usec = reader.uint32();
                    break;
                case 2:
                    message.gameserver_relay_session_id = reader.uint32();
                    break;
                case 5:
                    message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectOK message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectOK.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectOK message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectOK.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                if (!$util.isInteger(message.client_connection_id))
                    return "client_connection_id: integer expected";
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                if (!$util.isInteger(message.server_connection_id))
                    return "server_connection_id: integer expected";
            if (message.your_timestamp != null && message.hasOwnProperty("your_timestamp"))
                if (!$util.isInteger(message.your_timestamp) && !(message.your_timestamp && $util.isInteger(message.your_timestamp.low) && $util.isInteger(message.your_timestamp.high)))
                    return "your_timestamp: integer|Long expected";
            if (message.delay_time_usec != null && message.hasOwnProperty("delay_time_usec"))
                if (!$util.isInteger(message.delay_time_usec))
                    return "delay_time_usec: integer expected";
            if (message.gameserver_relay_session_id != null && message.hasOwnProperty("gameserver_relay_session_id"))
                if (!$util.isInteger(message.gameserver_relay_session_id))
                    return "gameserver_relay_session_id: integer expected";
            if (message.crypt != null && message.hasOwnProperty("crypt")) {
                var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                if (error)
                    return "crypt." + error;
            }
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectOK message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK
         */
        CMsgSteamDatagramConnectOK.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectOK)
                return object;
            var message = new $root.CMsgSteamDatagramConnectOK();
            if (object.client_connection_id != null)
                message.client_connection_id = object.client_connection_id >>> 0;
            if (object.server_connection_id != null)
                message.server_connection_id = object.server_connection_id >>> 0;
            if (object.your_timestamp != null)
                if ($util.Long)
                    (message.your_timestamp = $util.Long.fromValue(object.your_timestamp)).unsigned = false;
                else if (typeof object.your_timestamp === "string")
                    message.your_timestamp = parseInt(object.your_timestamp, 10);
                else if (typeof object.your_timestamp === "number")
                    message.your_timestamp = object.your_timestamp;
                else if (typeof object.your_timestamp === "object")
                    message.your_timestamp = new $util.LongBits(object.your_timestamp.low >>> 0, object.your_timestamp.high >>> 0).toNumber();
            if (object.delay_time_usec != null)
                message.delay_time_usec = object.delay_time_usec >>> 0;
            if (object.gameserver_relay_session_id != null)
                message.gameserver_relay_session_id = object.gameserver_relay_session_id >>> 0;
            if (object.crypt != null) {
                if (typeof object.crypt !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectOK.crypt: object expected");
                message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
            }
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectOK.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectOK message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {CMsgSteamDatagramConnectOK} message CMsgSteamDatagramConnectOK
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectOK.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.client_connection_id = 0;
                object.gameserver_relay_session_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.your_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.your_timestamp = options.longs === String ? "0" : 0;
                object.delay_time_usec = 0;
                object.crypt = null;
                object.cert = null;
                object.server_connection_id = 0;
            }
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                object.client_connection_id = message.client_connection_id;
            if (message.gameserver_relay_session_id != null && message.hasOwnProperty("gameserver_relay_session_id"))
                object.gameserver_relay_session_id = message.gameserver_relay_session_id;
            if (message.your_timestamp != null && message.hasOwnProperty("your_timestamp"))
                if (typeof message.your_timestamp === "number")
                    object.your_timestamp = options.longs === String ? String(message.your_timestamp) : message.your_timestamp;
                else
                    object.your_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.your_timestamp) : options.longs === Number ? new $util.LongBits(message.your_timestamp.low >>> 0, message.your_timestamp.high >>> 0).toNumber() : message.your_timestamp;
            if (message.delay_time_usec != null && message.hasOwnProperty("delay_time_usec"))
                object.delay_time_usec = message.delay_time_usec;
            if (message.crypt != null && message.hasOwnProperty("crypt"))
                object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                object.server_connection_id = message.server_connection_id;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectOK to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectOK.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramConnectOK;
    })();
    
    $root.CMsgSteamNetworkingP2PSDRRoutingSummary = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingP2PSDRRoutingSummary.
         * @exports ICMsgSteamNetworkingP2PSDRRoutingSummary
         * @interface ICMsgSteamNetworkingP2PSDRRoutingSummary
         * @property {number|null} [initial_ping] CMsgSteamNetworkingP2PSDRRoutingSummary initial_ping
         * @property {number|null} [initial_ping_front_local] CMsgSteamNetworkingP2PSDRRoutingSummary initial_ping_front_local
         * @property {number|null} [initial_ping_front_remote] CMsgSteamNetworkingP2PSDRRoutingSummary initial_ping_front_remote
         * @property {number|null} [initial_score] CMsgSteamNetworkingP2PSDRRoutingSummary initial_score
         * @property {number|null} [initial_pop_local] CMsgSteamNetworkingP2PSDRRoutingSummary initial_pop_local
         * @property {number|null} [initial_pop_remote] CMsgSteamNetworkingP2PSDRRoutingSummary initial_pop_remote
         * @property {number|null} [negotiation_ms] CMsgSteamNetworkingP2PSDRRoutingSummary negotiation_ms
         * @property {number|null} [selected_seconds] CMsgSteamNetworkingP2PSDRRoutingSummary selected_seconds
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingP2PSDRRoutingSummary.
         * @exports CMsgSteamNetworkingP2PSDRRoutingSummary
         * @classdesc Represents a CMsgSteamNetworkingP2PSDRRoutingSummary.
         * @implements ICMsgSteamNetworkingP2PSDRRoutingSummary
         * @constructor
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary=} [properties] Properties to set
         */
        function CMsgSteamNetworkingP2PSDRRoutingSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initial_ping.
         * @member {number} initial_ping
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initial_ping = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initial_ping_front_local.
         * @member {number} initial_ping_front_local
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initial_ping_front_local = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initial_ping_front_remote.
         * @member {number} initial_ping_front_remote
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initial_ping_front_remote = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initial_score.
         * @member {number} initial_score
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initial_score = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initial_pop_local.
         * @member {number} initial_pop_local
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initial_pop_local = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initial_pop_remote.
         * @member {number} initial_pop_remote
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initial_pop_remote = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary negotiation_ms.
         * @member {number} negotiation_ms
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.negotiation_ms = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary selected_seconds.
         * @member {number} selected_seconds
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.selected_seconds = 0;
    
        /**
         * Creates a new CMsgSteamNetworkingP2PSDRRoutingSummary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.create = function create(properties) {
            return new CMsgSteamNetworkingP2PSDRRoutingSummary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PSDRRoutingSummary message. Does not implicitly {@link CMsgSteamNetworkingP2PSDRRoutingSummary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary} message CMsgSteamNetworkingP2PSDRRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.initial_ping != null && Object.hasOwnProperty.call(message, "initial_ping"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.initial_ping);
            if (message.initial_ping_front_local != null && Object.hasOwnProperty.call(message, "initial_ping_front_local"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.initial_ping_front_local);
            if (message.initial_ping_front_remote != null && Object.hasOwnProperty.call(message, "initial_ping_front_remote"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.initial_ping_front_remote);
            if (message.initial_score != null && Object.hasOwnProperty.call(message, "initial_score"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.initial_score);
            if (message.initial_pop_local != null && Object.hasOwnProperty.call(message, "initial_pop_local"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.initial_pop_local);
            if (message.initial_pop_remote != null && Object.hasOwnProperty.call(message, "initial_pop_remote"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.initial_pop_remote);
            if (message.negotiation_ms != null && Object.hasOwnProperty.call(message, "negotiation_ms"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.negotiation_ms);
            if (message.selected_seconds != null && Object.hasOwnProperty.call(message, "selected_seconds"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.selected_seconds);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PSDRRoutingSummary message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PSDRRoutingSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary} message CMsgSteamNetworkingP2PSDRRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PSDRRoutingSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PSDRRoutingSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.initial_ping = reader.uint32();
                    break;
                case 2:
                    message.initial_ping_front_local = reader.uint32();
                    break;
                case 3:
                    message.initial_ping_front_remote = reader.uint32();
                    break;
                case 4:
                    message.initial_score = reader.uint32();
                    break;
                case 5:
                    message.initial_pop_local = reader.fixed32();
                    break;
                case 6:
                    message.initial_pop_remote = reader.fixed32();
                    break;
                case 7:
                    message.negotiation_ms = reader.uint32();
                    break;
                case 8:
                    message.selected_seconds = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PSDRRoutingSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingP2PSDRRoutingSummary message.
         * @function verify
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.initial_ping != null && message.hasOwnProperty("initial_ping"))
                if (!$util.isInteger(message.initial_ping))
                    return "initial_ping: integer expected";
            if (message.initial_ping_front_local != null && message.hasOwnProperty("initial_ping_front_local"))
                if (!$util.isInteger(message.initial_ping_front_local))
                    return "initial_ping_front_local: integer expected";
            if (message.initial_ping_front_remote != null && message.hasOwnProperty("initial_ping_front_remote"))
                if (!$util.isInteger(message.initial_ping_front_remote))
                    return "initial_ping_front_remote: integer expected";
            if (message.initial_score != null && message.hasOwnProperty("initial_score"))
                if (!$util.isInteger(message.initial_score))
                    return "initial_score: integer expected";
            if (message.initial_pop_local != null && message.hasOwnProperty("initial_pop_local"))
                if (!$util.isInteger(message.initial_pop_local))
                    return "initial_pop_local: integer expected";
            if (message.initial_pop_remote != null && message.hasOwnProperty("initial_pop_remote"))
                if (!$util.isInteger(message.initial_pop_remote))
                    return "initial_pop_remote: integer expected";
            if (message.negotiation_ms != null && message.hasOwnProperty("negotiation_ms"))
                if (!$util.isInteger(message.negotiation_ms))
                    return "negotiation_ms: integer expected";
            if (message.selected_seconds != null && message.hasOwnProperty("selected_seconds"))
                if (!$util.isInteger(message.selected_seconds))
                    return "selected_seconds: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingP2PSDRRoutingSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingP2PSDRRoutingSummary)
                return object;
            var message = new $root.CMsgSteamNetworkingP2PSDRRoutingSummary();
            if (object.initial_ping != null)
                message.initial_ping = object.initial_ping >>> 0;
            if (object.initial_ping_front_local != null)
                message.initial_ping_front_local = object.initial_ping_front_local >>> 0;
            if (object.initial_ping_front_remote != null)
                message.initial_ping_front_remote = object.initial_ping_front_remote >>> 0;
            if (object.initial_score != null)
                message.initial_score = object.initial_score >>> 0;
            if (object.initial_pop_local != null)
                message.initial_pop_local = object.initial_pop_local >>> 0;
            if (object.initial_pop_remote != null)
                message.initial_pop_remote = object.initial_pop_remote >>> 0;
            if (object.negotiation_ms != null)
                message.negotiation_ms = object.negotiation_ms >>> 0;
            if (object.selected_seconds != null)
                message.selected_seconds = object.selected_seconds >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingP2PSDRRoutingSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {CMsgSteamNetworkingP2PSDRRoutingSummary} message CMsgSteamNetworkingP2PSDRRoutingSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.initial_ping = 0;
                object.initial_ping_front_local = 0;
                object.initial_ping_front_remote = 0;
                object.initial_score = 0;
                object.initial_pop_local = 0;
                object.initial_pop_remote = 0;
                object.negotiation_ms = 0;
                object.selected_seconds = 0;
            }
            if (message.initial_ping != null && message.hasOwnProperty("initial_ping"))
                object.initial_ping = message.initial_ping;
            if (message.initial_ping_front_local != null && message.hasOwnProperty("initial_ping_front_local"))
                object.initial_ping_front_local = message.initial_ping_front_local;
            if (message.initial_ping_front_remote != null && message.hasOwnProperty("initial_ping_front_remote"))
                object.initial_ping_front_remote = message.initial_ping_front_remote;
            if (message.initial_score != null && message.hasOwnProperty("initial_score"))
                object.initial_score = message.initial_score;
            if (message.initial_pop_local != null && message.hasOwnProperty("initial_pop_local"))
                object.initial_pop_local = message.initial_pop_local;
            if (message.initial_pop_remote != null && message.hasOwnProperty("initial_pop_remote"))
                object.initial_pop_remote = message.initial_pop_remote;
            if (message.negotiation_ms != null && message.hasOwnProperty("negotiation_ms"))
                object.negotiation_ms = message.negotiation_ms;
            if (message.selected_seconds != null && message.hasOwnProperty("selected_seconds"))
                object.selected_seconds = message.selected_seconds;
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingP2PSDRRoutingSummary to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamNetworkingP2PSDRRoutingSummary;
    })();
    
    $root.CMsgSteamDatagramP2PRoutingSummary = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PRoutingSummary.
         * @exports ICMsgSteamDatagramP2PRoutingSummary
         * @interface ICMsgSteamDatagramP2PRoutingSummary
         * @property {ICMsgSteamNetworkingICESessionSummary|null} [ice] CMsgSteamDatagramP2PRoutingSummary ice
         * @property {ICMsgSteamNetworkingP2PSDRRoutingSummary|null} [sdr] CMsgSteamDatagramP2PRoutingSummary sdr
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PRoutingSummary.
         * @exports CMsgSteamDatagramP2PRoutingSummary
         * @classdesc Represents a CMsgSteamDatagramP2PRoutingSummary.
         * @implements ICMsgSteamDatagramP2PRoutingSummary
         * @constructor
         * @param {ICMsgSteamDatagramP2PRoutingSummary=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PRoutingSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PRoutingSummary ice.
         * @member {ICMsgSteamNetworkingICESessionSummary|null|undefined} ice
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @instance
         */
        CMsgSteamDatagramP2PRoutingSummary.prototype.ice = null;
    
        /**
         * CMsgSteamDatagramP2PRoutingSummary sdr.
         * @member {ICMsgSteamNetworkingP2PSDRRoutingSummary|null|undefined} sdr
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @instance
         */
        CMsgSteamDatagramP2PRoutingSummary.prototype.sdr = null;
    
        /**
         * Creates a new CMsgSteamDatagramP2PRoutingSummary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {ICMsgSteamDatagramP2PRoutingSummary=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary instance
         */
        CMsgSteamDatagramP2PRoutingSummary.create = function create(properties) {
            return new CMsgSteamDatagramP2PRoutingSummary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutingSummary message. Does not implicitly {@link CMsgSteamDatagramP2PRoutingSummary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {ICMsgSteamDatagramP2PRoutingSummary} message CMsgSteamDatagramP2PRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutingSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ice != null && Object.hasOwnProperty.call(message, "ice"))
                $root.CMsgSteamNetworkingICESessionSummary.encode(message.ice, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.sdr != null && Object.hasOwnProperty.call(message, "sdr"))
                $root.CMsgSteamNetworkingP2PSDRRoutingSummary.encode(message.sdr, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutingSummary message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutingSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {ICMsgSteamDatagramP2PRoutingSummary} message CMsgSteamDatagramP2PRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutingSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutingSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutingSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutingSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.ice = $root.CMsgSteamNetworkingICESessionSummary.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.sdr = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutingSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutingSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PRoutingSummary message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PRoutingSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ice != null && message.hasOwnProperty("ice")) {
                var error = $root.CMsgSteamNetworkingICESessionSummary.verify(message.ice);
                if (error)
                    return "ice." + error;
            }
            if (message.sdr != null && message.hasOwnProperty("sdr")) {
                var error = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.verify(message.sdr);
                if (error)
                    return "sdr." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PRoutingSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary
         */
        CMsgSteamDatagramP2PRoutingSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PRoutingSummary)
                return object;
            var message = new $root.CMsgSteamDatagramP2PRoutingSummary();
            if (object.ice != null) {
                if (typeof object.ice !== "object")
                    throw TypeError(".CMsgSteamDatagramP2PRoutingSummary.ice: object expected");
                message.ice = $root.CMsgSteamNetworkingICESessionSummary.fromObject(object.ice);
            }
            if (object.sdr != null) {
                if (typeof object.sdr !== "object")
                    throw TypeError(".CMsgSteamDatagramP2PRoutingSummary.sdr: object expected");
                message.sdr = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.fromObject(object.sdr);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PRoutingSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {CMsgSteamDatagramP2PRoutingSummary} message CMsgSteamDatagramP2PRoutingSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PRoutingSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ice = null;
                object.sdr = null;
            }
            if (message.ice != null && message.hasOwnProperty("ice"))
                object.ice = $root.CMsgSteamNetworkingICESessionSummary.toObject(message.ice, options);
            if (message.sdr != null && message.hasOwnProperty("sdr"))
                object.sdr = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.toObject(message.sdr, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PRoutingSummary to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PRoutingSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramP2PRoutingSummary;
    })();
    
    $root.CMsgSteamDatagramConnectionClosed = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionClosed.
         * @exports ICMsgSteamDatagramConnectionClosed
         * @interface ICMsgSteamDatagramConnectionClosed
         * @property {number|null} [to_connection_id] CMsgSteamDatagramConnectionClosed to_connection_id
         * @property {number|null} [from_connection_id] CMsgSteamDatagramConnectionClosed from_connection_id
         * @property {string|null} [from_identity_string] CMsgSteamDatagramConnectionClosed from_identity_string
         * @property {ICMsgSteamNetworkingIdentityLegacyBinary|null} [legacy_from_identity_binary] CMsgSteamDatagramConnectionClosed legacy_from_identity_binary
         * @property {number|Long|null} [legacy_from_steam_id] CMsgSteamDatagramConnectionClosed legacy_from_steam_id
         * @property {number|null} [legacy_gameserver_relay_session_id] CMsgSteamDatagramConnectionClosed legacy_gameserver_relay_session_id
         * @property {number|null} [to_relay_session_id] CMsgSteamDatagramConnectionClosed to_relay_session_id
         * @property {number|null} [from_relay_session_id] CMsgSteamDatagramConnectionClosed from_relay_session_id
         * @property {Uint8Array|null} [forward_target_relay_routing_token] CMsgSteamDatagramConnectionClosed forward_target_relay_routing_token
         * @property {number|null} [forward_target_revision] CMsgSteamDatagramConnectionClosed forward_target_revision
         * @property {CMsgSteamDatagramConnectionClosed.ERelayMode|null} [relay_mode] CMsgSteamDatagramConnectionClosed relay_mode
         * @property {string|null} [debug] CMsgSteamDatagramConnectionClosed debug
         * @property {number|null} [reason_code] CMsgSteamDatagramConnectionClosed reason_code
         * @property {number|Long|null} [routing_secret] CMsgSteamDatagramConnectionClosed routing_secret
         * @property {boolean|null} [not_primary_session] CMsgSteamDatagramConnectionClosed not_primary_session
         * @property {boolean|null} [not_primary_transport] CMsgSteamDatagramConnectionClosed not_primary_transport
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionClosed quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionClosed quality_e2e
         * @property {ICMsgSteamDatagramP2PRoutingSummary|null} [p2p_routing_summary] CMsgSteamDatagramConnectionClosed p2p_routing_summary
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionClosed.
         * @exports CMsgSteamDatagramConnectionClosed
         * @classdesc Represents a CMsgSteamDatagramConnectionClosed.
         * @implements ICMsgSteamDatagramConnectionClosed
         * @constructor
         * @param {ICMsgSteamDatagramConnectionClosed=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionClosed(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionClosed to_connection_id.
         * @member {number} to_connection_id
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.to_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed from_connection_id.
         * @member {number} from_connection_id
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.from_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed from_identity_string.
         * @member {string} from_identity_string
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.from_identity_string = "";
    
        /**
         * CMsgSteamDatagramConnectionClosed legacy_from_identity_binary.
         * @member {ICMsgSteamNetworkingIdentityLegacyBinary|null|undefined} legacy_from_identity_binary
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.legacy_from_identity_binary = null;
    
        /**
         * CMsgSteamDatagramConnectionClosed legacy_from_steam_id.
         * @member {number|Long} legacy_from_steam_id
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.legacy_from_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed legacy_gameserver_relay_session_id.
         * @member {number} legacy_gameserver_relay_session_id
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.legacy_gameserver_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed to_relay_session_id.
         * @member {number} to_relay_session_id
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.to_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed from_relay_session_id.
         * @member {number} from_relay_session_id
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.from_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed forward_target_relay_routing_token.
         * @member {Uint8Array} forward_target_relay_routing_token
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.forward_target_relay_routing_token = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionClosed forward_target_revision.
         * @member {number} forward_target_revision
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.forward_target_revision = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed relay_mode.
         * @member {CMsgSteamDatagramConnectionClosed.ERelayMode} relay_mode
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.relay_mode = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed debug.
         * @member {string} debug
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.debug = "";
    
        /**
         * CMsgSteamDatagramConnectionClosed reason_code.
         * @member {number} reason_code
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.reason_code = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed routing_secret.
         * @member {number|Long} routing_secret
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.routing_secret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed not_primary_session.
         * @member {boolean} not_primary_session
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.not_primary_session = false;
    
        /**
         * CMsgSteamDatagramConnectionClosed not_primary_transport.
         * @member {boolean} not_primary_transport
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.not_primary_transport = false;
    
        /**
         * CMsgSteamDatagramConnectionClosed quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionClosed quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionClosed p2p_routing_summary.
         * @member {ICMsgSteamDatagramP2PRoutingSummary|null|undefined} p2p_routing_summary
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.p2p_routing_summary = null;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionClosed instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {ICMsgSteamDatagramConnectionClosed=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed instance
         */
        CMsgSteamDatagramConnectionClosed.create = function create(properties) {
            return new CMsgSteamDatagramConnectionClosed(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionClosed message. Does not implicitly {@link CMsgSteamDatagramConnectionClosed.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {ICMsgSteamDatagramConnectionClosed} message CMsgSteamDatagramConnectionClosed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionClosed.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.legacy_gameserver_relay_session_id != null && Object.hasOwnProperty.call(message, "legacy_gameserver_relay_session_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.legacy_gameserver_relay_session_id);
            if (message.legacy_from_steam_id != null && Object.hasOwnProperty.call(message, "legacy_from_steam_id"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacy_from_steam_id);
            if (message.relay_mode != null && Object.hasOwnProperty.call(message, "relay_mode"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relay_mode);
            if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.debug);
            if (message.reason_code != null && Object.hasOwnProperty.call(message, "reason_code"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.reason_code);
            if (message.to_connection_id != null && Object.hasOwnProperty.call(message, "to_connection_id"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.to_connection_id);
            if (message.from_connection_id != null && Object.hasOwnProperty.call(message, "from_connection_id"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.from_connection_id);
            if (message.to_relay_session_id != null && Object.hasOwnProperty.call(message, "to_relay_session_id"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.to_relay_session_id);
            if (message.from_relay_session_id != null && Object.hasOwnProperty.call(message, "from_relay_session_id"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.from_relay_session_id);
            if (message.forward_target_relay_routing_token != null && Object.hasOwnProperty.call(message, "forward_target_relay_routing_token"))
                writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.forward_target_relay_routing_token);
            if (message.forward_target_revision != null && Object.hasOwnProperty.call(message, "forward_target_revision"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.forward_target_revision);
            if (message.legacy_from_identity_binary != null && Object.hasOwnProperty.call(message, "legacy_from_identity_binary"))
                $root.CMsgSteamNetworkingIdentityLegacyBinary.encode(message.legacy_from_identity_binary, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.routing_secret != null && Object.hasOwnProperty.call(message, "routing_secret"))
                writer.uint32(/* id 14, wireType 1 =*/113).fixed64(message.routing_secret);
            if (message.from_identity_string != null && Object.hasOwnProperty.call(message, "from_identity_string"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.from_identity_string);
            if (message.not_primary_session != null && Object.hasOwnProperty.call(message, "not_primary_session"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.not_primary_session);
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            if (message.not_primary_transport != null && Object.hasOwnProperty.call(message, "not_primary_transport"))
                writer.uint32(/* id 19, wireType 0 =*/152).bool(message.not_primary_transport);
            if (message.p2p_routing_summary != null && Object.hasOwnProperty.call(message, "p2p_routing_summary"))
                $root.CMsgSteamDatagramP2PRoutingSummary.encode(message.p2p_routing_summary, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionClosed message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionClosed.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {ICMsgSteamDatagramConnectionClosed} message CMsgSteamDatagramConnectionClosed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionClosed.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionClosed message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionClosed.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionClosed();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7:
                    message.to_connection_id = reader.fixed32();
                    break;
                case 8:
                    message.from_connection_id = reader.fixed32();
                    break;
                case 15:
                    message.from_identity_string = reader.string();
                    break;
                case 13:
                    message.legacy_from_identity_binary = $root.CMsgSteamNetworkingIdentityLegacyBinary.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.legacy_from_steam_id = reader.fixed64();
                    break;
                case 2:
                    message.legacy_gameserver_relay_session_id = reader.uint32();
                    break;
                case 9:
                    message.to_relay_session_id = reader.fixed32();
                    break;
                case 10:
                    message.from_relay_session_id = reader.fixed32();
                    break;
                case 11:
                    message.forward_target_relay_routing_token = reader.bytes();
                    break;
                case 12:
                    message.forward_target_revision = reader.uint32();
                    break;
                case 4:
                    message.relay_mode = reader.int32();
                    break;
                case 5:
                    message.debug = reader.string();
                    break;
                case 6:
                    message.reason_code = reader.uint32();
                    break;
                case 14:
                    message.routing_secret = reader.fixed64();
                    break;
                case 16:
                    message.not_primary_session = reader.bool();
                    break;
                case 19:
                    message.not_primary_transport = reader.bool();
                    break;
                case 17:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 18:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 21:
                    message.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionClosed message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionClosed.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionClosed message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionClosed.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                if (!$util.isInteger(message.to_connection_id))
                    return "to_connection_id: integer expected";
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                if (!$util.isInteger(message.from_connection_id))
                    return "from_connection_id: integer expected";
            if (message.from_identity_string != null && message.hasOwnProperty("from_identity_string"))
                if (!$util.isString(message.from_identity_string))
                    return "from_identity_string: string expected";
            if (message.legacy_from_identity_binary != null && message.hasOwnProperty("legacy_from_identity_binary")) {
                var error = $root.CMsgSteamNetworkingIdentityLegacyBinary.verify(message.legacy_from_identity_binary);
                if (error)
                    return "legacy_from_identity_binary." + error;
            }
            if (message.legacy_from_steam_id != null && message.hasOwnProperty("legacy_from_steam_id"))
                if (!$util.isInteger(message.legacy_from_steam_id) && !(message.legacy_from_steam_id && $util.isInteger(message.legacy_from_steam_id.low) && $util.isInteger(message.legacy_from_steam_id.high)))
                    return "legacy_from_steam_id: integer|Long expected";
            if (message.legacy_gameserver_relay_session_id != null && message.hasOwnProperty("legacy_gameserver_relay_session_id"))
                if (!$util.isInteger(message.legacy_gameserver_relay_session_id))
                    return "legacy_gameserver_relay_session_id: integer expected";
            if (message.to_relay_session_id != null && message.hasOwnProperty("to_relay_session_id"))
                if (!$util.isInteger(message.to_relay_session_id))
                    return "to_relay_session_id: integer expected";
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                if (!$util.isInteger(message.from_relay_session_id))
                    return "from_relay_session_id: integer expected";
            if (message.forward_target_relay_routing_token != null && message.hasOwnProperty("forward_target_relay_routing_token"))
                if (!(message.forward_target_relay_routing_token && typeof message.forward_target_relay_routing_token.length === "number" || $util.isString(message.forward_target_relay_routing_token)))
                    return "forward_target_relay_routing_token: buffer expected";
            if (message.forward_target_revision != null && message.hasOwnProperty("forward_target_revision"))
                if (!$util.isInteger(message.forward_target_revision))
                    return "forward_target_revision: integer expected";
            if (message.relay_mode != null && message.hasOwnProperty("relay_mode"))
                switch (message.relay_mode) {
                default:
                    return "relay_mode: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.debug != null && message.hasOwnProperty("debug"))
                if (!$util.isString(message.debug))
                    return "debug: string expected";
            if (message.reason_code != null && message.hasOwnProperty("reason_code"))
                if (!$util.isInteger(message.reason_code))
                    return "reason_code: integer expected";
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (!$util.isInteger(message.routing_secret) && !(message.routing_secret && $util.isInteger(message.routing_secret.low) && $util.isInteger(message.routing_secret.high)))
                    return "routing_secret: integer|Long expected";
            if (message.not_primary_session != null && message.hasOwnProperty("not_primary_session"))
                if (typeof message.not_primary_session !== "boolean")
                    return "not_primary_session: boolean expected";
            if (message.not_primary_transport != null && message.hasOwnProperty("not_primary_transport"))
                if (typeof message.not_primary_transport !== "boolean")
                    return "not_primary_transport: boolean expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.p2p_routing_summary != null && message.hasOwnProperty("p2p_routing_summary")) {
                var error = $root.CMsgSteamDatagramP2PRoutingSummary.verify(message.p2p_routing_summary);
                if (error)
                    return "p2p_routing_summary." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionClosed message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed
         */
        CMsgSteamDatagramConnectionClosed.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionClosed)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionClosed();
            if (object.to_connection_id != null)
                message.to_connection_id = object.to_connection_id >>> 0;
            if (object.from_connection_id != null)
                message.from_connection_id = object.from_connection_id >>> 0;
            if (object.from_identity_string != null)
                message.from_identity_string = String(object.from_identity_string);
            if (object.legacy_from_identity_binary != null) {
                if (typeof object.legacy_from_identity_binary !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.legacy_from_identity_binary: object expected");
                message.legacy_from_identity_binary = $root.CMsgSteamNetworkingIdentityLegacyBinary.fromObject(object.legacy_from_identity_binary);
            }
            if (object.legacy_from_steam_id != null)
                if ($util.Long)
                    (message.legacy_from_steam_id = $util.Long.fromValue(object.legacy_from_steam_id)).unsigned = false;
                else if (typeof object.legacy_from_steam_id === "string")
                    message.legacy_from_steam_id = parseInt(object.legacy_from_steam_id, 10);
                else if (typeof object.legacy_from_steam_id === "number")
                    message.legacy_from_steam_id = object.legacy_from_steam_id;
                else if (typeof object.legacy_from_steam_id === "object")
                    message.legacy_from_steam_id = new $util.LongBits(object.legacy_from_steam_id.low >>> 0, object.legacy_from_steam_id.high >>> 0).toNumber();
            if (object.legacy_gameserver_relay_session_id != null)
                message.legacy_gameserver_relay_session_id = object.legacy_gameserver_relay_session_id >>> 0;
            if (object.to_relay_session_id != null)
                message.to_relay_session_id = object.to_relay_session_id >>> 0;
            if (object.from_relay_session_id != null)
                message.from_relay_session_id = object.from_relay_session_id >>> 0;
            if (object.forward_target_relay_routing_token != null)
                if (typeof object.forward_target_relay_routing_token === "string")
                    $util.base64.decode(object.forward_target_relay_routing_token, message.forward_target_relay_routing_token = $util.newBuffer($util.base64.length(object.forward_target_relay_routing_token)), 0);
                else if (object.forward_target_relay_routing_token.length)
                    message.forward_target_relay_routing_token = object.forward_target_relay_routing_token;
            if (object.forward_target_revision != null)
                message.forward_target_revision = object.forward_target_revision >>> 0;
            switch (object.relay_mode) {
            case "None":
            case 0:
                message.relay_mode = 0;
                break;
            case "EndToEnd":
            case 1:
                message.relay_mode = 1;
                break;
            case "ClosedByPeer":
            case 2:
                message.relay_mode = 2;
                break;
            }
            if (object.debug != null)
                message.debug = String(object.debug);
            if (object.reason_code != null)
                message.reason_code = object.reason_code >>> 0;
            if (object.routing_secret != null)
                if ($util.Long)
                    (message.routing_secret = $util.Long.fromValue(object.routing_secret)).unsigned = false;
                else if (typeof object.routing_secret === "string")
                    message.routing_secret = parseInt(object.routing_secret, 10);
                else if (typeof object.routing_secret === "number")
                    message.routing_secret = object.routing_secret;
                else if (typeof object.routing_secret === "object")
                    message.routing_secret = new $util.LongBits(object.routing_secret.low >>> 0, object.routing_secret.high >>> 0).toNumber();
            if (object.not_primary_session != null)
                message.not_primary_session = Boolean(object.not_primary_session);
            if (object.not_primary_transport != null)
                message.not_primary_transport = Boolean(object.not_primary_transport);
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.p2p_routing_summary != null) {
                if (typeof object.p2p_routing_summary !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.p2p_routing_summary: object expected");
                message.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.fromObject(object.p2p_routing_summary);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionClosed message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {CMsgSteamDatagramConnectionClosed} message CMsgSteamDatagramConnectionClosed
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionClosed.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.legacy_gameserver_relay_session_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacy_from_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacy_from_steam_id = options.longs === String ? "0" : 0;
                object.relay_mode = options.enums === String ? "None" : 0;
                object.debug = "";
                object.reason_code = 0;
                object.to_connection_id = 0;
                object.from_connection_id = 0;
                object.to_relay_session_id = 0;
                object.from_relay_session_id = 0;
                if (options.bytes === String)
                    object.forward_target_relay_routing_token = "";
                else {
                    object.forward_target_relay_routing_token = [];
                    if (options.bytes !== Array)
                        object.forward_target_relay_routing_token = $util.newBuffer(object.forward_target_relay_routing_token);
                }
                object.forward_target_revision = 0;
                object.legacy_from_identity_binary = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routing_secret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routing_secret = options.longs === String ? "0" : 0;
                object.from_identity_string = "";
                object.not_primary_session = false;
                object.quality_relay = null;
                object.quality_e2e = null;
                object.not_primary_transport = false;
                object.p2p_routing_summary = null;
            }
            if (message.legacy_gameserver_relay_session_id != null && message.hasOwnProperty("legacy_gameserver_relay_session_id"))
                object.legacy_gameserver_relay_session_id = message.legacy_gameserver_relay_session_id;
            if (message.legacy_from_steam_id != null && message.hasOwnProperty("legacy_from_steam_id"))
                if (typeof message.legacy_from_steam_id === "number")
                    object.legacy_from_steam_id = options.longs === String ? String(message.legacy_from_steam_id) : message.legacy_from_steam_id;
                else
                    object.legacy_from_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.legacy_from_steam_id) : options.longs === Number ? new $util.LongBits(message.legacy_from_steam_id.low >>> 0, message.legacy_from_steam_id.high >>> 0).toNumber() : message.legacy_from_steam_id;
            if (message.relay_mode != null && message.hasOwnProperty("relay_mode"))
                object.relay_mode = options.enums === String ? $root.CMsgSteamDatagramConnectionClosed.ERelayMode[message.relay_mode] : message.relay_mode;
            if (message.debug != null && message.hasOwnProperty("debug"))
                object.debug = message.debug;
            if (message.reason_code != null && message.hasOwnProperty("reason_code"))
                object.reason_code = message.reason_code;
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                object.to_connection_id = message.to_connection_id;
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                object.from_connection_id = message.from_connection_id;
            if (message.to_relay_session_id != null && message.hasOwnProperty("to_relay_session_id"))
                object.to_relay_session_id = message.to_relay_session_id;
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                object.from_relay_session_id = message.from_relay_session_id;
            if (message.forward_target_relay_routing_token != null && message.hasOwnProperty("forward_target_relay_routing_token"))
                object.forward_target_relay_routing_token = options.bytes === String ? $util.base64.encode(message.forward_target_relay_routing_token, 0, message.forward_target_relay_routing_token.length) : options.bytes === Array ? Array.prototype.slice.call(message.forward_target_relay_routing_token) : message.forward_target_relay_routing_token;
            if (message.forward_target_revision != null && message.hasOwnProperty("forward_target_revision"))
                object.forward_target_revision = message.forward_target_revision;
            if (message.legacy_from_identity_binary != null && message.hasOwnProperty("legacy_from_identity_binary"))
                object.legacy_from_identity_binary = $root.CMsgSteamNetworkingIdentityLegacyBinary.toObject(message.legacy_from_identity_binary, options);
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (typeof message.routing_secret === "number")
                    object.routing_secret = options.longs === String ? String(message.routing_secret) : message.routing_secret;
                else
                    object.routing_secret = options.longs === String ? $util.Long.prototype.toString.call(message.routing_secret) : options.longs === Number ? new $util.LongBits(message.routing_secret.low >>> 0, message.routing_secret.high >>> 0).toNumber() : message.routing_secret;
            if (message.from_identity_string != null && message.hasOwnProperty("from_identity_string"))
                object.from_identity_string = message.from_identity_string;
            if (message.not_primary_session != null && message.hasOwnProperty("not_primary_session"))
                object.not_primary_session = message.not_primary_session;
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.not_primary_transport != null && message.hasOwnProperty("not_primary_transport"))
                object.not_primary_transport = message.not_primary_transport;
            if (message.p2p_routing_summary != null && message.hasOwnProperty("p2p_routing_summary"))
                object.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.toObject(message.p2p_routing_summary, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionClosed to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionClosed.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * ERelayMode enum.
         * @name CMsgSteamDatagramConnectionClosed.ERelayMode
         * @enum {number}
         * @property {number} None=0 None value
         * @property {number} EndToEnd=1 EndToEnd value
         * @property {number} ClosedByPeer=2 ClosedByPeer value
         */
        CMsgSteamDatagramConnectionClosed.ERelayMode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "None"] = 0;
            values[valuesById[1] = "EndToEnd"] = 1;
            values[valuesById[2] = "ClosedByPeer"] = 2;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionClosed;
    })();
    
    $root.CMsgSteamDatagramNoConnection = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNoConnection.
         * @exports ICMsgSteamDatagramNoConnection
         * @interface ICMsgSteamDatagramNoConnection
         * @property {number|null} [to_connection_id] CMsgSteamDatagramNoConnection to_connection_id
         * @property {number|null} [from_connection_id] CMsgSteamDatagramNoConnection from_connection_id
         * @property {number|null} [legacy_gameserver_relay_session_id] CMsgSteamDatagramNoConnection legacy_gameserver_relay_session_id
         * @property {number|null} [to_relay_session_id] CMsgSteamDatagramNoConnection to_relay_session_id
         * @property {number|null} [from_relay_session_id] CMsgSteamDatagramNoConnection from_relay_session_id
         * @property {string|null} [from_identity_string] CMsgSteamDatagramNoConnection from_identity_string
         * @property {number|Long|null} [legacy_from_steam_id] CMsgSteamDatagramNoConnection legacy_from_steam_id
         * @property {boolean|null} [end_to_end] CMsgSteamDatagramNoConnection end_to_end
         * @property {boolean|null} [not_primary_session] CMsgSteamDatagramNoConnection not_primary_session
         * @property {boolean|null} [not_primary_transport] CMsgSteamDatagramNoConnection not_primary_transport
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramNoConnection quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramNoConnection quality_e2e
         * @property {ICMsgSteamDatagramP2PRoutingSummary|null} [p2p_routing_summary] CMsgSteamDatagramNoConnection p2p_routing_summary
         * @property {number|Long|null} [routing_secret] CMsgSteamDatagramNoConnection routing_secret
         * @property {number|null} [dummy_pad] CMsgSteamDatagramNoConnection dummy_pad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNoConnection.
         * @exports CMsgSteamDatagramNoConnection
         * @classdesc Represents a CMsgSteamDatagramNoConnection.
         * @implements ICMsgSteamDatagramNoConnection
         * @constructor
         * @param {ICMsgSteamDatagramNoConnection=} [properties] Properties to set
         */
        function CMsgSteamDatagramNoConnection(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramNoConnection to_connection_id.
         * @member {number} to_connection_id
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.to_connection_id = 0;
    
        /**
         * CMsgSteamDatagramNoConnection from_connection_id.
         * @member {number} from_connection_id
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.from_connection_id = 0;
    
        /**
         * CMsgSteamDatagramNoConnection legacy_gameserver_relay_session_id.
         * @member {number} legacy_gameserver_relay_session_id
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.legacy_gameserver_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramNoConnection to_relay_session_id.
         * @member {number} to_relay_session_id
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.to_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramNoConnection from_relay_session_id.
         * @member {number} from_relay_session_id
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.from_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramNoConnection from_identity_string.
         * @member {string} from_identity_string
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.from_identity_string = "";
    
        /**
         * CMsgSteamDatagramNoConnection legacy_from_steam_id.
         * @member {number|Long} legacy_from_steam_id
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.legacy_from_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramNoConnection end_to_end.
         * @member {boolean} end_to_end
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.end_to_end = false;
    
        /**
         * CMsgSteamDatagramNoConnection not_primary_session.
         * @member {boolean} not_primary_session
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.not_primary_session = false;
    
        /**
         * CMsgSteamDatagramNoConnection not_primary_transport.
         * @member {boolean} not_primary_transport
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.not_primary_transport = false;
    
        /**
         * CMsgSteamDatagramNoConnection quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramNoConnection quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramNoConnection p2p_routing_summary.
         * @member {ICMsgSteamDatagramP2PRoutingSummary|null|undefined} p2p_routing_summary
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.p2p_routing_summary = null;
    
        /**
         * CMsgSteamDatagramNoConnection routing_secret.
         * @member {number|Long} routing_secret
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.routing_secret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramNoConnection dummy_pad.
         * @member {number} dummy_pad
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.dummy_pad = 0;
    
        /**
         * Creates a new CMsgSteamDatagramNoConnection instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {ICMsgSteamDatagramNoConnection=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection instance
         */
        CMsgSteamDatagramNoConnection.create = function create(properties) {
            return new CMsgSteamDatagramNoConnection(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoConnection message. Does not implicitly {@link CMsgSteamDatagramNoConnection.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {ICMsgSteamDatagramNoConnection} message CMsgSteamDatagramNoConnection message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoConnection.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.legacy_gameserver_relay_session_id != null && Object.hasOwnProperty.call(message, "legacy_gameserver_relay_session_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.legacy_gameserver_relay_session_id);
            if (message.legacy_from_steam_id != null && Object.hasOwnProperty.call(message, "legacy_from_steam_id"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacy_from_steam_id);
            if (message.end_to_end != null && Object.hasOwnProperty.call(message, "end_to_end"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.end_to_end);
            if (message.to_connection_id != null && Object.hasOwnProperty.call(message, "to_connection_id"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.to_connection_id);
            if (message.from_connection_id != null && Object.hasOwnProperty.call(message, "from_connection_id"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.from_connection_id);
            if (message.from_identity_string != null && Object.hasOwnProperty.call(message, "from_identity_string"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.from_identity_string);
            if (message.to_relay_session_id != null && Object.hasOwnProperty.call(message, "to_relay_session_id"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.to_relay_session_id);
            if (message.from_relay_session_id != null && Object.hasOwnProperty.call(message, "from_relay_session_id"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.from_relay_session_id);
            if (message.routing_secret != null && Object.hasOwnProperty.call(message, "routing_secret"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.routing_secret);
            if (message.not_primary_session != null && Object.hasOwnProperty.call(message, "not_primary_session"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.not_primary_session);
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.not_primary_transport != null && Object.hasOwnProperty.call(message, "not_primary_transport"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.not_primary_transport);
            if (message.p2p_routing_summary != null && Object.hasOwnProperty.call(message, "p2p_routing_summary"))
                $root.CMsgSteamDatagramP2PRoutingSummary.encode(message.p2p_routing_summary, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.dummy_pad != null && Object.hasOwnProperty.call(message, "dummy_pad"))
                writer.uint32(/* id 1023, wireType 5 =*/8189).fixed32(message.dummy_pad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoConnection message, length delimited. Does not implicitly {@link CMsgSteamDatagramNoConnection.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {ICMsgSteamDatagramNoConnection} message CMsgSteamDatagramNoConnection message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoConnection.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoConnection message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoConnection.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNoConnection();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 5:
                    message.to_connection_id = reader.fixed32();
                    break;
                case 6:
                    message.from_connection_id = reader.fixed32();
                    break;
                case 2:
                    message.legacy_gameserver_relay_session_id = reader.uint32();
                    break;
                case 9:
                    message.to_relay_session_id = reader.fixed32();
                    break;
                case 10:
                    message.from_relay_session_id = reader.fixed32();
                    break;
                case 7:
                    message.from_identity_string = reader.string();
                    break;
                case 3:
                    message.legacy_from_steam_id = reader.fixed64();
                    break;
                case 4:
                    message.end_to_end = reader.bool();
                    break;
                case 12:
                    message.not_primary_session = reader.bool();
                    break;
                case 15:
                    message.not_primary_transport = reader.bool();
                    break;
                case 13:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.routing_secret = reader.fixed64();
                    break;
                case 1023:
                    message.dummy_pad = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoConnection message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoConnection.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNoConnection message.
         * @function verify
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNoConnection.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                if (!$util.isInteger(message.to_connection_id))
                    return "to_connection_id: integer expected";
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                if (!$util.isInteger(message.from_connection_id))
                    return "from_connection_id: integer expected";
            if (message.legacy_gameserver_relay_session_id != null && message.hasOwnProperty("legacy_gameserver_relay_session_id"))
                if (!$util.isInteger(message.legacy_gameserver_relay_session_id))
                    return "legacy_gameserver_relay_session_id: integer expected";
            if (message.to_relay_session_id != null && message.hasOwnProperty("to_relay_session_id"))
                if (!$util.isInteger(message.to_relay_session_id))
                    return "to_relay_session_id: integer expected";
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                if (!$util.isInteger(message.from_relay_session_id))
                    return "from_relay_session_id: integer expected";
            if (message.from_identity_string != null && message.hasOwnProperty("from_identity_string"))
                if (!$util.isString(message.from_identity_string))
                    return "from_identity_string: string expected";
            if (message.legacy_from_steam_id != null && message.hasOwnProperty("legacy_from_steam_id"))
                if (!$util.isInteger(message.legacy_from_steam_id) && !(message.legacy_from_steam_id && $util.isInteger(message.legacy_from_steam_id.low) && $util.isInteger(message.legacy_from_steam_id.high)))
                    return "legacy_from_steam_id: integer|Long expected";
            if (message.end_to_end != null && message.hasOwnProperty("end_to_end"))
                if (typeof message.end_to_end !== "boolean")
                    return "end_to_end: boolean expected";
            if (message.not_primary_session != null && message.hasOwnProperty("not_primary_session"))
                if (typeof message.not_primary_session !== "boolean")
                    return "not_primary_session: boolean expected";
            if (message.not_primary_transport != null && message.hasOwnProperty("not_primary_transport"))
                if (typeof message.not_primary_transport !== "boolean")
                    return "not_primary_transport: boolean expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.p2p_routing_summary != null && message.hasOwnProperty("p2p_routing_summary")) {
                var error = $root.CMsgSteamDatagramP2PRoutingSummary.verify(message.p2p_routing_summary);
                if (error)
                    return "p2p_routing_summary." + error;
            }
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (!$util.isInteger(message.routing_secret) && !(message.routing_secret && $util.isInteger(message.routing_secret.low) && $util.isInteger(message.routing_secret.high)))
                    return "routing_secret: integer|Long expected";
            if (message.dummy_pad != null && message.hasOwnProperty("dummy_pad"))
                if (!$util.isInteger(message.dummy_pad))
                    return "dummy_pad: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNoConnection message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection
         */
        CMsgSteamDatagramNoConnection.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNoConnection)
                return object;
            var message = new $root.CMsgSteamDatagramNoConnection();
            if (object.to_connection_id != null)
                message.to_connection_id = object.to_connection_id >>> 0;
            if (object.from_connection_id != null)
                message.from_connection_id = object.from_connection_id >>> 0;
            if (object.legacy_gameserver_relay_session_id != null)
                message.legacy_gameserver_relay_session_id = object.legacy_gameserver_relay_session_id >>> 0;
            if (object.to_relay_session_id != null)
                message.to_relay_session_id = object.to_relay_session_id >>> 0;
            if (object.from_relay_session_id != null)
                message.from_relay_session_id = object.from_relay_session_id >>> 0;
            if (object.from_identity_string != null)
                message.from_identity_string = String(object.from_identity_string);
            if (object.legacy_from_steam_id != null)
                if ($util.Long)
                    (message.legacy_from_steam_id = $util.Long.fromValue(object.legacy_from_steam_id)).unsigned = false;
                else if (typeof object.legacy_from_steam_id === "string")
                    message.legacy_from_steam_id = parseInt(object.legacy_from_steam_id, 10);
                else if (typeof object.legacy_from_steam_id === "number")
                    message.legacy_from_steam_id = object.legacy_from_steam_id;
                else if (typeof object.legacy_from_steam_id === "object")
                    message.legacy_from_steam_id = new $util.LongBits(object.legacy_from_steam_id.low >>> 0, object.legacy_from_steam_id.high >>> 0).toNumber();
            if (object.end_to_end != null)
                message.end_to_end = Boolean(object.end_to_end);
            if (object.not_primary_session != null)
                message.not_primary_session = Boolean(object.not_primary_session);
            if (object.not_primary_transport != null)
                message.not_primary_transport = Boolean(object.not_primary_transport);
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramNoConnection.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramNoConnection.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.p2p_routing_summary != null) {
                if (typeof object.p2p_routing_summary !== "object")
                    throw TypeError(".CMsgSteamDatagramNoConnection.p2p_routing_summary: object expected");
                message.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.fromObject(object.p2p_routing_summary);
            }
            if (object.routing_secret != null)
                if ($util.Long)
                    (message.routing_secret = $util.Long.fromValue(object.routing_secret)).unsigned = false;
                else if (typeof object.routing_secret === "string")
                    message.routing_secret = parseInt(object.routing_secret, 10);
                else if (typeof object.routing_secret === "number")
                    message.routing_secret = object.routing_secret;
                else if (typeof object.routing_secret === "object")
                    message.routing_secret = new $util.LongBits(object.routing_secret.low >>> 0, object.routing_secret.high >>> 0).toNumber();
            if (object.dummy_pad != null)
                message.dummy_pad = object.dummy_pad >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNoConnection message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {CMsgSteamDatagramNoConnection} message CMsgSteamDatagramNoConnection
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNoConnection.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.legacy_gameserver_relay_session_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacy_from_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacy_from_steam_id = options.longs === String ? "0" : 0;
                object.end_to_end = false;
                object.to_connection_id = 0;
                object.from_connection_id = 0;
                object.from_identity_string = "";
                object.to_relay_session_id = 0;
                object.from_relay_session_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routing_secret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routing_secret = options.longs === String ? "0" : 0;
                object.not_primary_session = false;
                object.quality_relay = null;
                object.quality_e2e = null;
                object.not_primary_transport = false;
                object.p2p_routing_summary = null;
                object.dummy_pad = 0;
            }
            if (message.legacy_gameserver_relay_session_id != null && message.hasOwnProperty("legacy_gameserver_relay_session_id"))
                object.legacy_gameserver_relay_session_id = message.legacy_gameserver_relay_session_id;
            if (message.legacy_from_steam_id != null && message.hasOwnProperty("legacy_from_steam_id"))
                if (typeof message.legacy_from_steam_id === "number")
                    object.legacy_from_steam_id = options.longs === String ? String(message.legacy_from_steam_id) : message.legacy_from_steam_id;
                else
                    object.legacy_from_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.legacy_from_steam_id) : options.longs === Number ? new $util.LongBits(message.legacy_from_steam_id.low >>> 0, message.legacy_from_steam_id.high >>> 0).toNumber() : message.legacy_from_steam_id;
            if (message.end_to_end != null && message.hasOwnProperty("end_to_end"))
                object.end_to_end = message.end_to_end;
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                object.to_connection_id = message.to_connection_id;
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                object.from_connection_id = message.from_connection_id;
            if (message.from_identity_string != null && message.hasOwnProperty("from_identity_string"))
                object.from_identity_string = message.from_identity_string;
            if (message.to_relay_session_id != null && message.hasOwnProperty("to_relay_session_id"))
                object.to_relay_session_id = message.to_relay_session_id;
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                object.from_relay_session_id = message.from_relay_session_id;
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (typeof message.routing_secret === "number")
                    object.routing_secret = options.longs === String ? String(message.routing_secret) : message.routing_secret;
                else
                    object.routing_secret = options.longs === String ? $util.Long.prototype.toString.call(message.routing_secret) : options.longs === Number ? new $util.LongBits(message.routing_secret.low >>> 0, message.routing_secret.high >>> 0).toNumber() : message.routing_secret;
            if (message.not_primary_session != null && message.hasOwnProperty("not_primary_session"))
                object.not_primary_session = message.not_primary_session;
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.not_primary_transport != null && message.hasOwnProperty("not_primary_transport"))
                object.not_primary_transport = message.not_primary_transport;
            if (message.p2p_routing_summary != null && message.hasOwnProperty("p2p_routing_summary"))
                object.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.toObject(message.p2p_routing_summary, options);
            if (message.dummy_pad != null && message.hasOwnProperty("dummy_pad"))
                object.dummy_pad = message.dummy_pad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramNoConnection to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNoConnection.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramNoConnection;
    })();
    
    $root.CMsgSteamDatagramGameserverSessionRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverSessionRequest.
         * @exports ICMsgSteamDatagramGameserverSessionRequest
         * @interface ICMsgSteamDatagramGameserverSessionRequest
         * @property {Uint8Array|null} [ticket] CMsgSteamDatagramGameserverSessionRequest ticket
         * @property {number|null} [challenge_time] CMsgSteamDatagramGameserverSessionRequest challenge_time
         * @property {number|Long|null} [challenge] CMsgSteamDatagramGameserverSessionRequest challenge
         * @property {number|null} [client_connection_id] CMsgSteamDatagramGameserverSessionRequest client_connection_id
         * @property {number|null} [server_connection_id] CMsgSteamDatagramGameserverSessionRequest server_connection_id
         * @property {number|null} [network_config_version] CMsgSteamDatagramGameserverSessionRequest network_config_version
         * @property {number|null} [protocol_version] CMsgSteamDatagramGameserverSessionRequest protocol_version
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverSessionRequest.
         * @exports CMsgSteamDatagramGameserverSessionRequest
         * @classdesc Represents a CMsgSteamDatagramGameserverSessionRequest.
         * @implements ICMsgSteamDatagramGameserverSessionRequest
         * @constructor
         * @param {ICMsgSteamDatagramGameserverSessionRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverSessionRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest ticket.
         * @member {Uint8Array} ticket
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.ticket = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest challenge_time.
         * @member {number} challenge_time
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.challenge_time = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest client_connection_id.
         * @member {number} client_connection_id
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.client_connection_id = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest server_connection_id.
         * @member {number} server_connection_id
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.server_connection_id = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest network_config_version.
         * @member {number} network_config_version
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.network_config_version = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest protocol_version.
         * @member {number} protocol_version
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.protocol_version = 0;
    
        /**
         * Creates a new CMsgSteamDatagramGameserverSessionRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest instance
         */
        CMsgSteamDatagramGameserverSessionRequest.create = function create(properties) {
            return new CMsgSteamDatagramGameserverSessionRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionRequest message. Does not implicitly {@link CMsgSteamDatagramGameserverSessionRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionRequest} message CMsgSteamDatagramGameserverSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ticket != null && Object.hasOwnProperty.call(message, "ticket"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ticket);
            if (message.challenge_time != null && Object.hasOwnProperty.call(message, "challenge_time"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.challenge_time);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.challenge);
            if (message.client_connection_id != null && Object.hasOwnProperty.call(message, "client_connection_id"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.client_connection_id);
            if (message.network_config_version != null && Object.hasOwnProperty.call(message, "network_config_version"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.network_config_version);
            if (message.protocol_version != null && Object.hasOwnProperty.call(message, "protocol_version"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.protocol_version);
            if (message.server_connection_id != null && Object.hasOwnProperty.call(message, "server_connection_id"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.server_connection_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverSessionRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionRequest} message CMsgSteamDatagramGameserverSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverSessionRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ticket = reader.bytes();
                    break;
                case 3:
                    message.challenge_time = reader.fixed32();
                    break;
                case 4:
                    message.challenge = reader.fixed64();
                    break;
                case 5:
                    message.client_connection_id = reader.fixed32();
                    break;
                case 8:
                    message.server_connection_id = reader.fixed32();
                    break;
                case 6:
                    message.network_config_version = reader.uint32();
                    break;
                case 7:
                    message.protocol_version = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverSessionRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverSessionRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (!(message.ticket && typeof message.ticket.length === "number" || $util.isString(message.ticket)))
                    return "ticket: buffer expected";
            if (message.challenge_time != null && message.hasOwnProperty("challenge_time"))
                if (!$util.isInteger(message.challenge_time))
                    return "challenge_time: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                if (!$util.isInteger(message.client_connection_id))
                    return "client_connection_id: integer expected";
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                if (!$util.isInteger(message.server_connection_id))
                    return "server_connection_id: integer expected";
            if (message.network_config_version != null && message.hasOwnProperty("network_config_version"))
                if (!$util.isInteger(message.network_config_version))
                    return "network_config_version: integer expected";
            if (message.protocol_version != null && message.hasOwnProperty("protocol_version"))
                if (!$util.isInteger(message.protocol_version))
                    return "protocol_version: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverSessionRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest
         */
        CMsgSteamDatagramGameserverSessionRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverSessionRequest)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverSessionRequest();
            if (object.ticket != null)
                if (typeof object.ticket === "string")
                    $util.base64.decode(object.ticket, message.ticket = $util.newBuffer($util.base64.length(object.ticket)), 0);
                else if (object.ticket.length)
                    message.ticket = object.ticket;
            if (object.challenge_time != null)
                message.challenge_time = object.challenge_time >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.client_connection_id != null)
                message.client_connection_id = object.client_connection_id >>> 0;
            if (object.server_connection_id != null)
                message.server_connection_id = object.server_connection_id >>> 0;
            if (object.network_config_version != null)
                message.network_config_version = object.network_config_version >>> 0;
            if (object.protocol_version != null)
                message.protocol_version = object.protocol_version >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverSessionRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {CMsgSteamDatagramGameserverSessionRequest} message CMsgSteamDatagramGameserverSessionRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverSessionRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.ticket = "";
                else {
                    object.ticket = [];
                    if (options.bytes !== Array)
                        object.ticket = $util.newBuffer(object.ticket);
                }
                object.challenge_time = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.client_connection_id = 0;
                object.network_config_version = 0;
                object.protocol_version = 0;
                object.server_connection_id = 0;
            }
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                object.ticket = options.bytes === String ? $util.base64.encode(message.ticket, 0, message.ticket.length) : options.bytes === Array ? Array.prototype.slice.call(message.ticket) : message.ticket;
            if (message.challenge_time != null && message.hasOwnProperty("challenge_time"))
                object.challenge_time = message.challenge_time;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                object.client_connection_id = message.client_connection_id;
            if (message.network_config_version != null && message.hasOwnProperty("network_config_version"))
                object.network_config_version = message.network_config_version;
            if (message.protocol_version != null && message.hasOwnProperty("protocol_version"))
                object.protocol_version = message.protocol_version;
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                object.server_connection_id = message.server_connection_id;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverSessionRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramGameserverSessionRequest;
    })();
    
    $root.CMsgSteamDatagramGameserverSessionEstablished = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverSessionEstablished.
         * @exports ICMsgSteamDatagramGameserverSessionEstablished
         * @interface ICMsgSteamDatagramGameserverSessionEstablished
         * @property {number|null} [connection_id] CMsgSteamDatagramGameserverSessionEstablished connection_id
         * @property {string|null} [gameserver_identity_string] CMsgSteamDatagramGameserverSessionEstablished gameserver_identity_string
         * @property {number|null} [seconds_until_shutdown] CMsgSteamDatagramGameserverSessionEstablished seconds_until_shutdown
         * @property {number|null} [seq_num_r2c] CMsgSteamDatagramGameserverSessionEstablished seq_num_r2c
         * @property {Uint8Array|null} [dummy_legacy_identity_binary] CMsgSteamDatagramGameserverSessionEstablished dummy_legacy_identity_binary
         * @property {number|Long|null} [legacy_gameserver_steamid] CMsgSteamDatagramGameserverSessionEstablished legacy_gameserver_steamid
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverSessionEstablished.
         * @exports CMsgSteamDatagramGameserverSessionEstablished
         * @classdesc Represents a CMsgSteamDatagramGameserverSessionEstablished.
         * @implements ICMsgSteamDatagramGameserverSessionEstablished
         * @constructor
         * @param {ICMsgSteamDatagramGameserverSessionEstablished=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverSessionEstablished(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished gameserver_identity_string.
         * @member {string} gameserver_identity_string
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.gameserver_identity_string = "";
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished seconds_until_shutdown.
         * @member {number} seconds_until_shutdown
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.seconds_until_shutdown = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished seq_num_r2c.
         * @member {number} seq_num_r2c
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.seq_num_r2c = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished dummy_legacy_identity_binary.
         * @member {Uint8Array} dummy_legacy_identity_binary
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.dummy_legacy_identity_binary = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished legacy_gameserver_steamid.
         * @member {number|Long} legacy_gameserver_steamid
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.legacy_gameserver_steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramGameserverSessionEstablished instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionEstablished=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.create = function create(properties) {
            return new CMsgSteamDatagramGameserverSessionEstablished(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionEstablished message. Does not implicitly {@link CMsgSteamDatagramGameserverSessionEstablished.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionEstablished} message CMsgSteamDatagramGameserverSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionEstablished.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connection_id);
            if (message.gameserver_identity_string != null && Object.hasOwnProperty.call(message, "gameserver_identity_string"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameserver_identity_string);
            if (message.legacy_gameserver_steamid != null && Object.hasOwnProperty.call(message, "legacy_gameserver_steamid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacy_gameserver_steamid);
            if (message.seconds_until_shutdown != null && Object.hasOwnProperty.call(message, "seconds_until_shutdown"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.seconds_until_shutdown);
            if (message.seq_num_r2c != null && Object.hasOwnProperty.call(message, "seq_num_r2c"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.seq_num_r2c);
            if (message.dummy_legacy_identity_binary != null && Object.hasOwnProperty.call(message, "dummy_legacy_identity_binary"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.dummy_legacy_identity_binary);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionEstablished message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverSessionEstablished.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionEstablished} message CMsgSteamDatagramGameserverSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionEstablished.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionEstablished message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionEstablished.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverSessionEstablished();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connection_id = reader.fixed32();
                    break;
                case 2:
                    message.gameserver_identity_string = reader.string();
                    break;
                case 4:
                    message.seconds_until_shutdown = reader.uint32();
                    break;
                case 6:
                    message.seq_num_r2c = reader.uint32();
                    break;
                case 7:
                    message.dummy_legacy_identity_binary = reader.bytes();
                    break;
                case 3:
                    message.legacy_gameserver_steamid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionEstablished message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionEstablished.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverSessionEstablished message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverSessionEstablished.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.gameserver_identity_string != null && message.hasOwnProperty("gameserver_identity_string"))
                if (!$util.isString(message.gameserver_identity_string))
                    return "gameserver_identity_string: string expected";
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                if (!$util.isInteger(message.seconds_until_shutdown))
                    return "seconds_until_shutdown: integer expected";
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                if (!$util.isInteger(message.seq_num_r2c))
                    return "seq_num_r2c: integer expected";
            if (message.dummy_legacy_identity_binary != null && message.hasOwnProperty("dummy_legacy_identity_binary"))
                if (!(message.dummy_legacy_identity_binary && typeof message.dummy_legacy_identity_binary.length === "number" || $util.isString(message.dummy_legacy_identity_binary)))
                    return "dummy_legacy_identity_binary: buffer expected";
            if (message.legacy_gameserver_steamid != null && message.hasOwnProperty("legacy_gameserver_steamid"))
                if (!$util.isInteger(message.legacy_gameserver_steamid) && !(message.legacy_gameserver_steamid && $util.isInteger(message.legacy_gameserver_steamid.low) && $util.isInteger(message.legacy_gameserver_steamid.high)))
                    return "legacy_gameserver_steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverSessionEstablished message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished
         */
        CMsgSteamDatagramGameserverSessionEstablished.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverSessionEstablished)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverSessionEstablished();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.gameserver_identity_string != null)
                message.gameserver_identity_string = String(object.gameserver_identity_string);
            if (object.seconds_until_shutdown != null)
                message.seconds_until_shutdown = object.seconds_until_shutdown >>> 0;
            if (object.seq_num_r2c != null)
                message.seq_num_r2c = object.seq_num_r2c >>> 0;
            if (object.dummy_legacy_identity_binary != null)
                if (typeof object.dummy_legacy_identity_binary === "string")
                    $util.base64.decode(object.dummy_legacy_identity_binary, message.dummy_legacy_identity_binary = $util.newBuffer($util.base64.length(object.dummy_legacy_identity_binary)), 0);
                else if (object.dummy_legacy_identity_binary.length)
                    message.dummy_legacy_identity_binary = object.dummy_legacy_identity_binary;
            if (object.legacy_gameserver_steamid != null)
                if ($util.Long)
                    (message.legacy_gameserver_steamid = $util.Long.fromValue(object.legacy_gameserver_steamid)).unsigned = false;
                else if (typeof object.legacy_gameserver_steamid === "string")
                    message.legacy_gameserver_steamid = parseInt(object.legacy_gameserver_steamid, 10);
                else if (typeof object.legacy_gameserver_steamid === "number")
                    message.legacy_gameserver_steamid = object.legacy_gameserver_steamid;
                else if (typeof object.legacy_gameserver_steamid === "object")
                    message.legacy_gameserver_steamid = new $util.LongBits(object.legacy_gameserver_steamid.low >>> 0, object.legacy_gameserver_steamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverSessionEstablished message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {CMsgSteamDatagramGameserverSessionEstablished} message CMsgSteamDatagramGameserverSessionEstablished
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverSessionEstablished.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connection_id = 0;
                object.gameserver_identity_string = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacy_gameserver_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacy_gameserver_steamid = options.longs === String ? "0" : 0;
                object.seconds_until_shutdown = 0;
                object.seq_num_r2c = 0;
                if (options.bytes === String)
                    object.dummy_legacy_identity_binary = "";
                else {
                    object.dummy_legacy_identity_binary = [];
                    if (options.bytes !== Array)
                        object.dummy_legacy_identity_binary = $util.newBuffer(object.dummy_legacy_identity_binary);
                }
            }
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.gameserver_identity_string != null && message.hasOwnProperty("gameserver_identity_string"))
                object.gameserver_identity_string = message.gameserver_identity_string;
            if (message.legacy_gameserver_steamid != null && message.hasOwnProperty("legacy_gameserver_steamid"))
                if (typeof message.legacy_gameserver_steamid === "number")
                    object.legacy_gameserver_steamid = options.longs === String ? String(message.legacy_gameserver_steamid) : message.legacy_gameserver_steamid;
                else
                    object.legacy_gameserver_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.legacy_gameserver_steamid) : options.longs === Number ? new $util.LongBits(message.legacy_gameserver_steamid.low >>> 0, message.legacy_gameserver_steamid.high >>> 0).toNumber() : message.legacy_gameserver_steamid;
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                object.seconds_until_shutdown = message.seconds_until_shutdown;
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                object.seq_num_r2c = message.seq_num_r2c;
            if (message.dummy_legacy_identity_binary != null && message.hasOwnProperty("dummy_legacy_identity_binary"))
                object.dummy_legacy_identity_binary = options.bytes === String ? $util.base64.encode(message.dummy_legacy_identity_binary, 0, message.dummy_legacy_identity_binary.length) : options.bytes === Array ? Array.prototype.slice.call(message.dummy_legacy_identity_binary) : message.dummy_legacy_identity_binary;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverSessionEstablished to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramGameserverSessionEstablished;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsClientToRouter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsClientToRouter.
         * @exports ICMsgSteamDatagramConnectionStatsClientToRouter
         * @interface ICMsgSteamDatagramConnectionStatsClientToRouter
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionStatsClientToRouter quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionStatsClientToRouter quality_e2e
         * @property {Array.<number>|null} [ack_relay] CMsgSteamDatagramConnectionStatsClientToRouter ack_relay
         * @property {Array.<number>|null} [legacy_ack_e2e] CMsgSteamDatagramConnectionStatsClientToRouter legacy_ack_e2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsClientToRouter flags
         * @property {number|null} [client_connection_id] CMsgSteamDatagramConnectionStatsClientToRouter client_connection_id
         * @property {number|null} [seq_num_c2r] CMsgSteamDatagramConnectionStatsClientToRouter seq_num_c2r
         * @property {number|null} [seq_num_e2e] CMsgSteamDatagramConnectionStatsClientToRouter seq_num_e2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsClientToRouter.
         * @exports CMsgSteamDatagramConnectionStatsClientToRouter
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsClientToRouter.
         * @implements ICMsgSteamDatagramConnectionStatsClientToRouter
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsClientToRouter(properties) {
            this.ack_relay = [];
            this.legacy_ack_e2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter ack_relay.
         * @member {Array.<number>} ack_relay
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.ack_relay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter legacy_ack_e2e.
         * @member {Array.<number>} legacy_ack_e2e
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.legacy_ack_e2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter client_connection_id.
         * @member {number} client_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.client_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter seq_num_c2r.
         * @member {number} seq_num_c2r
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.seq_num_c2r = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter seq_num_e2e.
         * @member {number} seq_num_e2e
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.seq_num_e2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsClientToRouter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsClientToRouter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsClientToRouter message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsClientToRouter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter} message CMsgSteamDatagramConnectionStatsClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ack_relay != null && message.ack_relay.length)
                for (var i = 0; i < message.ack_relay.length; ++i)
                    writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.ack_relay[i]);
            if (message.legacy_ack_e2e != null && message.legacy_ack_e2e.length)
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.legacy_ack_e2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.flags);
            if (message.client_connection_id != null && Object.hasOwnProperty.call(message, "client_connection_id"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.client_connection_id);
            if (message.seq_num_c2r != null && Object.hasOwnProperty.call(message, "seq_num_c2r"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.seq_num_c2r);
            if (message.seq_num_e2e != null && Object.hasOwnProperty.call(message, "seq_num_e2e"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.seq_num_e2e);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsClientToRouter message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsClientToRouter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter} message CMsgSteamDatagramConnectionStatsClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsClientToRouter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsClientToRouter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.ack_relay && message.ack_relay.length))
                        message.ack_relay = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ack_relay.push(reader.fixed32());
                    } else
                        message.ack_relay.push(reader.fixed32());
                    break;
                case 5:
                    if (!(message.legacy_ack_e2e && message.legacy_ack_e2e.length))
                        message.legacy_ack_e2e = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_ack_e2e.push(reader.fixed32());
                    } else
                        message.legacy_ack_e2e.push(reader.fixed32());
                    break;
                case 6:
                    message.flags = reader.uint32();
                    break;
                case 8:
                    message.client_connection_id = reader.fixed32();
                    break;
                case 9:
                    message.seq_num_c2r = reader.uint32();
                    break;
                case 10:
                    message.seq_num_e2e = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsClientToRouter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsClientToRouter message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.ack_relay != null && message.hasOwnProperty("ack_relay")) {
                if (!Array.isArray(message.ack_relay))
                    return "ack_relay: array expected";
                for (var i = 0; i < message.ack_relay.length; ++i)
                    if (!$util.isInteger(message.ack_relay[i]))
                        return "ack_relay: integer[] expected";
            }
            if (message.legacy_ack_e2e != null && message.hasOwnProperty("legacy_ack_e2e")) {
                if (!Array.isArray(message.legacy_ack_e2e))
                    return "legacy_ack_e2e: array expected";
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    if (!$util.isInteger(message.legacy_ack_e2e[i]))
                        return "legacy_ack_e2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                if (!$util.isInteger(message.client_connection_id))
                    return "client_connection_id: integer expected";
            if (message.seq_num_c2r != null && message.hasOwnProperty("seq_num_c2r"))
                if (!$util.isInteger(message.seq_num_c2r))
                    return "seq_num_c2r: integer expected";
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                if (!$util.isInteger(message.seq_num_e2e))
                    return "seq_num_e2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsClientToRouter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsClientToRouter)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsClientToRouter();
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.ack_relay) {
                if (!Array.isArray(object.ack_relay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.ack_relay: array expected");
                message.ack_relay = [];
                for (var i = 0; i < object.ack_relay.length; ++i)
                    message.ack_relay[i] = object.ack_relay[i] >>> 0;
            }
            if (object.legacy_ack_e2e) {
                if (!Array.isArray(object.legacy_ack_e2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.legacy_ack_e2e: array expected");
                message.legacy_ack_e2e = [];
                for (var i = 0; i < object.legacy_ack_e2e.length; ++i)
                    message.legacy_ack_e2e[i] = object.legacy_ack_e2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.client_connection_id != null)
                message.client_connection_id = object.client_connection_id >>> 0;
            if (object.seq_num_c2r != null)
                message.seq_num_c2r = object.seq_num_c2r >>> 0;
            if (object.seq_num_e2e != null)
                message.seq_num_e2e = object.seq_num_e2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsClientToRouter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {CMsgSteamDatagramConnectionStatsClientToRouter} message CMsgSteamDatagramConnectionStatsClientToRouter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ack_relay = [];
                object.legacy_ack_e2e = [];
            }
            if (options.defaults) {
                object.quality_relay = null;
                object.quality_e2e = null;
                object.flags = 0;
                object.client_connection_id = 0;
                object.seq_num_c2r = 0;
                object.seq_num_e2e = 0;
            }
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.ack_relay && message.ack_relay.length) {
                object.ack_relay = [];
                for (var j = 0; j < message.ack_relay.length; ++j)
                    object.ack_relay[j] = message.ack_relay[j];
            }
            if (message.legacy_ack_e2e && message.legacy_ack_e2e.length) {
                object.legacy_ack_e2e = [];
                for (var j = 0; j < message.legacy_ack_e2e.length; ++j)
                    object.legacy_ack_e2e[j] = message.legacy_ack_e2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                object.client_connection_id = message.client_connection_id;
            if (message.seq_num_c2r != null && message.hasOwnProperty("seq_num_c2r"))
                object.seq_num_c2r = message.seq_num_c2r;
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                object.seq_num_e2e = message.seq_num_e2e;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsClientToRouter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsClientToRouter.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         * @property {number} NOT_PRIMARY_SESSION=8 NOT_PRIMARY_SESSION value
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            values[valuesById[8] = "NOT_PRIMARY_SESSION"] = 8;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsClientToRouter;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsRouterToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsRouterToClient.
         * @exports ICMsgSteamDatagramConnectionStatsRouterToClient
         * @interface ICMsgSteamDatagramConnectionStatsRouterToClient
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionStatsRouterToClient quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionStatsRouterToClient quality_e2e
         * @property {number|null} [seconds_until_shutdown] CMsgSteamDatagramConnectionStatsRouterToClient seconds_until_shutdown
         * @property {number|null} [migrate_request_ip] CMsgSteamDatagramConnectionStatsRouterToClient migrate_request_ip
         * @property {number|null} [migrate_request_port] CMsgSteamDatagramConnectionStatsRouterToClient migrate_request_port
         * @property {number|null} [scoring_penalty_relay_cluster] CMsgSteamDatagramConnectionStatsRouterToClient scoring_penalty_relay_cluster
         * @property {Array.<number>|null} [ack_relay] CMsgSteamDatagramConnectionStatsRouterToClient ack_relay
         * @property {Array.<number>|null} [legacy_ack_e2e] CMsgSteamDatagramConnectionStatsRouterToClient legacy_ack_e2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsRouterToClient flags
         * @property {number|null} [client_connection_id] CMsgSteamDatagramConnectionStatsRouterToClient client_connection_id
         * @property {number|null} [seq_num_r2c] CMsgSteamDatagramConnectionStatsRouterToClient seq_num_r2c
         * @property {number|null} [seq_num_e2e] CMsgSteamDatagramConnectionStatsRouterToClient seq_num_e2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsRouterToClient.
         * @exports CMsgSteamDatagramConnectionStatsRouterToClient
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsRouterToClient.
         * @implements ICMsgSteamDatagramConnectionStatsRouterToClient
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsRouterToClient(properties) {
            this.ack_relay = [];
            this.legacy_ack_e2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient seconds_until_shutdown.
         * @member {number} seconds_until_shutdown
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.seconds_until_shutdown = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient migrate_request_ip.
         * @member {number} migrate_request_ip
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.migrate_request_ip = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient migrate_request_port.
         * @member {number} migrate_request_port
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.migrate_request_port = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient scoring_penalty_relay_cluster.
         * @member {number} scoring_penalty_relay_cluster
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.scoring_penalty_relay_cluster = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient ack_relay.
         * @member {Array.<number>} ack_relay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.ack_relay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient legacy_ack_e2e.
         * @member {Array.<number>} legacy_ack_e2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.legacy_ack_e2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient client_connection_id.
         * @member {number} client_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.client_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient seq_num_r2c.
         * @member {number} seq_num_r2c
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.seq_num_r2c = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient seq_num_e2e.
         * @member {number} seq_num_e2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.seq_num_e2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsRouterToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsRouterToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToClient message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient} message CMsgSteamDatagramConnectionStatsRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.seconds_until_shutdown != null && Object.hasOwnProperty.call(message, "seconds_until_shutdown"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.seconds_until_shutdown);
            if (message.client_connection_id != null && Object.hasOwnProperty.call(message, "client_connection_id"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.client_connection_id);
            if (message.seq_num_r2c != null && Object.hasOwnProperty.call(message, "seq_num_r2c"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.seq_num_r2c);
            if (message.seq_num_e2e != null && Object.hasOwnProperty.call(message, "seq_num_e2e"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.seq_num_e2e);
            if (message.migrate_request_ip != null && Object.hasOwnProperty.call(message, "migrate_request_ip"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.migrate_request_ip);
            if (message.migrate_request_port != null && Object.hasOwnProperty.call(message, "migrate_request_port"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.migrate_request_port);
            if (message.scoring_penalty_relay_cluster != null && Object.hasOwnProperty.call(message, "scoring_penalty_relay_cluster"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.scoring_penalty_relay_cluster);
            if (message.ack_relay != null && message.ack_relay.length)
                for (var i = 0; i < message.ack_relay.length; ++i)
                    writer.uint32(/* id 13, wireType 5 =*/109).fixed32(message.ack_relay[i]);
            if (message.legacy_ack_e2e != null && message.legacy_ack_e2e.length)
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    writer.uint32(/* id 14, wireType 5 =*/117).fixed32(message.legacy_ack_e2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.flags);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient} message CMsgSteamDatagramConnectionStatsRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsRouterToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.seconds_until_shutdown = reader.uint32();
                    break;
                case 10:
                    message.migrate_request_ip = reader.fixed32();
                    break;
                case 11:
                    message.migrate_request_port = reader.uint32();
                    break;
                case 12:
                    message.scoring_penalty_relay_cluster = reader.uint32();
                    break;
                case 13:
                    if (!(message.ack_relay && message.ack_relay.length))
                        message.ack_relay = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ack_relay.push(reader.fixed32());
                    } else
                        message.ack_relay.push(reader.fixed32());
                    break;
                case 14:
                    if (!(message.legacy_ack_e2e && message.legacy_ack_e2e.length))
                        message.legacy_ack_e2e = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_ack_e2e.push(reader.fixed32());
                    } else
                        message.legacy_ack_e2e.push(reader.fixed32());
                    break;
                case 15:
                    message.flags = reader.uint32();
                    break;
                case 7:
                    message.client_connection_id = reader.fixed32();
                    break;
                case 8:
                    message.seq_num_r2c = reader.uint32();
                    break;
                case 9:
                    message.seq_num_e2e = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsRouterToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                if (!$util.isInteger(message.seconds_until_shutdown))
                    return "seconds_until_shutdown: integer expected";
            if (message.migrate_request_ip != null && message.hasOwnProperty("migrate_request_ip"))
                if (!$util.isInteger(message.migrate_request_ip))
                    return "migrate_request_ip: integer expected";
            if (message.migrate_request_port != null && message.hasOwnProperty("migrate_request_port"))
                if (!$util.isInteger(message.migrate_request_port))
                    return "migrate_request_port: integer expected";
            if (message.scoring_penalty_relay_cluster != null && message.hasOwnProperty("scoring_penalty_relay_cluster"))
                if (!$util.isInteger(message.scoring_penalty_relay_cluster))
                    return "scoring_penalty_relay_cluster: integer expected";
            if (message.ack_relay != null && message.hasOwnProperty("ack_relay")) {
                if (!Array.isArray(message.ack_relay))
                    return "ack_relay: array expected";
                for (var i = 0; i < message.ack_relay.length; ++i)
                    if (!$util.isInteger(message.ack_relay[i]))
                        return "ack_relay: integer[] expected";
            }
            if (message.legacy_ack_e2e != null && message.hasOwnProperty("legacy_ack_e2e")) {
                if (!Array.isArray(message.legacy_ack_e2e))
                    return "legacy_ack_e2e: array expected";
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    if (!$util.isInteger(message.legacy_ack_e2e[i]))
                        return "legacy_ack_e2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                if (!$util.isInteger(message.client_connection_id))
                    return "client_connection_id: integer expected";
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                if (!$util.isInteger(message.seq_num_r2c))
                    return "seq_num_r2c: integer expected";
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                if (!$util.isInteger(message.seq_num_e2e))
                    return "seq_num_e2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsRouterToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsRouterToClient)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsRouterToClient();
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.seconds_until_shutdown != null)
                message.seconds_until_shutdown = object.seconds_until_shutdown >>> 0;
            if (object.migrate_request_ip != null)
                message.migrate_request_ip = object.migrate_request_ip >>> 0;
            if (object.migrate_request_port != null)
                message.migrate_request_port = object.migrate_request_port >>> 0;
            if (object.scoring_penalty_relay_cluster != null)
                message.scoring_penalty_relay_cluster = object.scoring_penalty_relay_cluster >>> 0;
            if (object.ack_relay) {
                if (!Array.isArray(object.ack_relay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.ack_relay: array expected");
                message.ack_relay = [];
                for (var i = 0; i < object.ack_relay.length; ++i)
                    message.ack_relay[i] = object.ack_relay[i] >>> 0;
            }
            if (object.legacy_ack_e2e) {
                if (!Array.isArray(object.legacy_ack_e2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.legacy_ack_e2e: array expected");
                message.legacy_ack_e2e = [];
                for (var i = 0; i < object.legacy_ack_e2e.length; ++i)
                    message.legacy_ack_e2e[i] = object.legacy_ack_e2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.client_connection_id != null)
                message.client_connection_id = object.client_connection_id >>> 0;
            if (object.seq_num_r2c != null)
                message.seq_num_r2c = object.seq_num_r2c >>> 0;
            if (object.seq_num_e2e != null)
                message.seq_num_e2e = object.seq_num_e2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsRouterToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {CMsgSteamDatagramConnectionStatsRouterToClient} message CMsgSteamDatagramConnectionStatsRouterToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ack_relay = [];
                object.legacy_ack_e2e = [];
            }
            if (options.defaults) {
                object.quality_relay = null;
                object.quality_e2e = null;
                object.seconds_until_shutdown = 0;
                object.client_connection_id = 0;
                object.seq_num_r2c = 0;
                object.seq_num_e2e = 0;
                object.migrate_request_ip = 0;
                object.migrate_request_port = 0;
                object.scoring_penalty_relay_cluster = 0;
                object.flags = 0;
            }
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                object.seconds_until_shutdown = message.seconds_until_shutdown;
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                object.client_connection_id = message.client_connection_id;
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                object.seq_num_r2c = message.seq_num_r2c;
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                object.seq_num_e2e = message.seq_num_e2e;
            if (message.migrate_request_ip != null && message.hasOwnProperty("migrate_request_ip"))
                object.migrate_request_ip = message.migrate_request_ip;
            if (message.migrate_request_port != null && message.hasOwnProperty("migrate_request_port"))
                object.migrate_request_port = message.migrate_request_port;
            if (message.scoring_penalty_relay_cluster != null && message.hasOwnProperty("scoring_penalty_relay_cluster"))
                object.scoring_penalty_relay_cluster = message.scoring_penalty_relay_cluster;
            if (message.ack_relay && message.ack_relay.length) {
                object.ack_relay = [];
                for (var j = 0; j < message.ack_relay.length; ++j)
                    object.ack_relay[j] = message.ack_relay[j];
            }
            if (message.legacy_ack_e2e && message.legacy_ack_e2e.length) {
                object.legacy_ack_e2e = [];
                for (var j = 0; j < message.legacy_ack_e2e.length; ++j)
                    object.legacy_ack_e2e[j] = message.legacy_ack_e2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsRouterToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsRouterToClient.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsRouterToClient;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsRouterToServer = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsRouterToServer.
         * @exports ICMsgSteamDatagramConnectionStatsRouterToServer
         * @interface ICMsgSteamDatagramConnectionStatsRouterToServer
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionStatsRouterToServer quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionStatsRouterToServer quality_e2e
         * @property {Array.<number>|null} [ack_relay] CMsgSteamDatagramConnectionStatsRouterToServer ack_relay
         * @property {Array.<number>|null} [legacy_ack_e2e] CMsgSteamDatagramConnectionStatsRouterToServer legacy_ack_e2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsRouterToServer flags
         * @property {number|null} [seq_num_r2s] CMsgSteamDatagramConnectionStatsRouterToServer seq_num_r2s
         * @property {number|null} [seq_num_e2e] CMsgSteamDatagramConnectionStatsRouterToServer seq_num_e2e
         * @property {string|null} [client_identity_string] CMsgSteamDatagramConnectionStatsRouterToServer client_identity_string
         * @property {number|Long|null} [legacy_client_steam_id] CMsgSteamDatagramConnectionStatsRouterToServer legacy_client_steam_id
         * @property {number|null} [relay_session_id] CMsgSteamDatagramConnectionStatsRouterToServer relay_session_id
         * @property {number|null} [client_connection_id] CMsgSteamDatagramConnectionStatsRouterToServer client_connection_id
         * @property {number|null} [server_connection_id] CMsgSteamDatagramConnectionStatsRouterToServer server_connection_id
         * @property {number|Long|null} [routing_secret] CMsgSteamDatagramConnectionStatsRouterToServer routing_secret
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsRouterToServer.
         * @exports CMsgSteamDatagramConnectionStatsRouterToServer
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsRouterToServer.
         * @implements ICMsgSteamDatagramConnectionStatsRouterToServer
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsRouterToServer(properties) {
            this.ack_relay = [];
            this.legacy_ack_e2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer ack_relay.
         * @member {Array.<number>} ack_relay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.ack_relay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer legacy_ack_e2e.
         * @member {Array.<number>} legacy_ack_e2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.legacy_ack_e2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer seq_num_r2s.
         * @member {number} seq_num_r2s
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.seq_num_r2s = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer seq_num_e2e.
         * @member {number} seq_num_e2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.seq_num_e2e = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer client_identity_string.
         * @member {string} client_identity_string
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.client_identity_string = "";
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer legacy_client_steam_id.
         * @member {number|Long} legacy_client_steam_id
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.legacy_client_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer relay_session_id.
         * @member {number} relay_session_id
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer client_connection_id.
         * @member {number} client_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.client_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer server_connection_id.
         * @member {number} server_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.server_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer routing_secret.
         * @member {number|Long} routing_secret
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.routing_secret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsRouterToServer instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsRouterToServer(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToServer message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToServer.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer} message CMsgSteamDatagramConnectionStatsRouterToServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.seq_num_r2s != null && Object.hasOwnProperty.call(message, "seq_num_r2s"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seq_num_r2s);
            if (message.seq_num_e2e != null && Object.hasOwnProperty.call(message, "seq_num_e2e"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.seq_num_e2e);
            if (message.legacy_client_steam_id != null && Object.hasOwnProperty.call(message, "legacy_client_steam_id"))
                writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.legacy_client_steam_id);
            if (message.relay_session_id != null && Object.hasOwnProperty.call(message, "relay_session_id"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.relay_session_id);
            if (message.client_connection_id != null && Object.hasOwnProperty.call(message, "client_connection_id"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.client_connection_id);
            if (message.ack_relay != null && message.ack_relay.length)
                for (var i = 0; i < message.ack_relay.length; ++i)
                    writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.ack_relay[i]);
            if (message.legacy_ack_e2e != null && message.legacy_ack_e2e.length)
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.legacy_ack_e2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.flags);
            if (message.server_connection_id != null && Object.hasOwnProperty.call(message, "server_connection_id"))
                writer.uint32(/* id 13, wireType 5 =*/109).fixed32(message.server_connection_id);
            if (message.routing_secret != null && Object.hasOwnProperty.call(message, "routing_secret"))
                writer.uint32(/* id 14, wireType 1 =*/113).fixed64(message.routing_secret);
            if (message.client_identity_string != null && Object.hasOwnProperty.call(message, "client_identity_string"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.client_identity_string);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToServer message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToServer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer} message CMsgSteamDatagramConnectionStatsRouterToServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToServer message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsRouterToServer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 10:
                    if (!(message.ack_relay && message.ack_relay.length))
                        message.ack_relay = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ack_relay.push(reader.fixed32());
                    } else
                        message.ack_relay.push(reader.fixed32());
                    break;
                case 11:
                    if (!(message.legacy_ack_e2e && message.legacy_ack_e2e.length))
                        message.legacy_ack_e2e = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_ack_e2e.push(reader.fixed32());
                    } else
                        message.legacy_ack_e2e.push(reader.fixed32());
                    break;
                case 12:
                    message.flags = reader.uint32();
                    break;
                case 5:
                    message.seq_num_r2s = reader.uint32();
                    break;
                case 6:
                    message.seq_num_e2e = reader.uint32();
                    break;
                case 15:
                    message.client_identity_string = reader.string();
                    break;
                case 7:
                    message.legacy_client_steam_id = reader.fixed64();
                    break;
                case 8:
                    message.relay_session_id = reader.uint32();
                    break;
                case 9:
                    message.client_connection_id = reader.fixed32();
                    break;
                case 13:
                    message.server_connection_id = reader.fixed32();
                    break;
                case 14:
                    message.routing_secret = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToServer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsRouterToServer message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.ack_relay != null && message.hasOwnProperty("ack_relay")) {
                if (!Array.isArray(message.ack_relay))
                    return "ack_relay: array expected";
                for (var i = 0; i < message.ack_relay.length; ++i)
                    if (!$util.isInteger(message.ack_relay[i]))
                        return "ack_relay: integer[] expected";
            }
            if (message.legacy_ack_e2e != null && message.hasOwnProperty("legacy_ack_e2e")) {
                if (!Array.isArray(message.legacy_ack_e2e))
                    return "legacy_ack_e2e: array expected";
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    if (!$util.isInteger(message.legacy_ack_e2e[i]))
                        return "legacy_ack_e2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.seq_num_r2s != null && message.hasOwnProperty("seq_num_r2s"))
                if (!$util.isInteger(message.seq_num_r2s))
                    return "seq_num_r2s: integer expected";
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                if (!$util.isInteger(message.seq_num_e2e))
                    return "seq_num_e2e: integer expected";
            if (message.client_identity_string != null && message.hasOwnProperty("client_identity_string"))
                if (!$util.isString(message.client_identity_string))
                    return "client_identity_string: string expected";
            if (message.legacy_client_steam_id != null && message.hasOwnProperty("legacy_client_steam_id"))
                if (!$util.isInteger(message.legacy_client_steam_id) && !(message.legacy_client_steam_id && $util.isInteger(message.legacy_client_steam_id.low) && $util.isInteger(message.legacy_client_steam_id.high)))
                    return "legacy_client_steam_id: integer|Long expected";
            if (message.relay_session_id != null && message.hasOwnProperty("relay_session_id"))
                if (!$util.isInteger(message.relay_session_id))
                    return "relay_session_id: integer expected";
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                if (!$util.isInteger(message.client_connection_id))
                    return "client_connection_id: integer expected";
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                if (!$util.isInteger(message.server_connection_id))
                    return "server_connection_id: integer expected";
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (!$util.isInteger(message.routing_secret) && !(message.routing_secret && $util.isInteger(message.routing_secret.low) && $util.isInteger(message.routing_secret.high)))
                    return "routing_secret: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsRouterToServer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsRouterToServer)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsRouterToServer();
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.ack_relay) {
                if (!Array.isArray(object.ack_relay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.ack_relay: array expected");
                message.ack_relay = [];
                for (var i = 0; i < object.ack_relay.length; ++i)
                    message.ack_relay[i] = object.ack_relay[i] >>> 0;
            }
            if (object.legacy_ack_e2e) {
                if (!Array.isArray(object.legacy_ack_e2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.legacy_ack_e2e: array expected");
                message.legacy_ack_e2e = [];
                for (var i = 0; i < object.legacy_ack_e2e.length; ++i)
                    message.legacy_ack_e2e[i] = object.legacy_ack_e2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.seq_num_r2s != null)
                message.seq_num_r2s = object.seq_num_r2s >>> 0;
            if (object.seq_num_e2e != null)
                message.seq_num_e2e = object.seq_num_e2e >>> 0;
            if (object.client_identity_string != null)
                message.client_identity_string = String(object.client_identity_string);
            if (object.legacy_client_steam_id != null)
                if ($util.Long)
                    (message.legacy_client_steam_id = $util.Long.fromValue(object.legacy_client_steam_id)).unsigned = false;
                else if (typeof object.legacy_client_steam_id === "string")
                    message.legacy_client_steam_id = parseInt(object.legacy_client_steam_id, 10);
                else if (typeof object.legacy_client_steam_id === "number")
                    message.legacy_client_steam_id = object.legacy_client_steam_id;
                else if (typeof object.legacy_client_steam_id === "object")
                    message.legacy_client_steam_id = new $util.LongBits(object.legacy_client_steam_id.low >>> 0, object.legacy_client_steam_id.high >>> 0).toNumber();
            if (object.relay_session_id != null)
                message.relay_session_id = object.relay_session_id >>> 0;
            if (object.client_connection_id != null)
                message.client_connection_id = object.client_connection_id >>> 0;
            if (object.server_connection_id != null)
                message.server_connection_id = object.server_connection_id >>> 0;
            if (object.routing_secret != null)
                if ($util.Long)
                    (message.routing_secret = $util.Long.fromValue(object.routing_secret)).unsigned = false;
                else if (typeof object.routing_secret === "string")
                    message.routing_secret = parseInt(object.routing_secret, 10);
                else if (typeof object.routing_secret === "number")
                    message.routing_secret = object.routing_secret;
                else if (typeof object.routing_secret === "object")
                    message.routing_secret = new $util.LongBits(object.routing_secret.low >>> 0, object.routing_secret.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsRouterToServer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {CMsgSteamDatagramConnectionStatsRouterToServer} message CMsgSteamDatagramConnectionStatsRouterToServer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ack_relay = [];
                object.legacy_ack_e2e = [];
            }
            if (options.defaults) {
                object.quality_relay = null;
                object.quality_e2e = null;
                object.seq_num_r2s = 0;
                object.seq_num_e2e = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacy_client_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacy_client_steam_id = options.longs === String ? "0" : 0;
                object.relay_session_id = 0;
                object.client_connection_id = 0;
                object.flags = 0;
                object.server_connection_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routing_secret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routing_secret = options.longs === String ? "0" : 0;
                object.client_identity_string = "";
            }
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.seq_num_r2s != null && message.hasOwnProperty("seq_num_r2s"))
                object.seq_num_r2s = message.seq_num_r2s;
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                object.seq_num_e2e = message.seq_num_e2e;
            if (message.legacy_client_steam_id != null && message.hasOwnProperty("legacy_client_steam_id"))
                if (typeof message.legacy_client_steam_id === "number")
                    object.legacy_client_steam_id = options.longs === String ? String(message.legacy_client_steam_id) : message.legacy_client_steam_id;
                else
                    object.legacy_client_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.legacy_client_steam_id) : options.longs === Number ? new $util.LongBits(message.legacy_client_steam_id.low >>> 0, message.legacy_client_steam_id.high >>> 0).toNumber() : message.legacy_client_steam_id;
            if (message.relay_session_id != null && message.hasOwnProperty("relay_session_id"))
                object.relay_session_id = message.relay_session_id;
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                object.client_connection_id = message.client_connection_id;
            if (message.ack_relay && message.ack_relay.length) {
                object.ack_relay = [];
                for (var j = 0; j < message.ack_relay.length; ++j)
                    object.ack_relay[j] = message.ack_relay[j];
            }
            if (message.legacy_ack_e2e && message.legacy_ack_e2e.length) {
                object.legacy_ack_e2e = [];
                for (var j = 0; j < message.legacy_ack_e2e.length; ++j)
                    object.legacy_ack_e2e[j] = message.legacy_ack_e2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                object.server_connection_id = message.server_connection_id;
            if (message.routing_secret != null && message.hasOwnProperty("routing_secret"))
                if (typeof message.routing_secret === "number")
                    object.routing_secret = options.longs === String ? String(message.routing_secret) : message.routing_secret;
                else
                    object.routing_secret = options.longs === String ? $util.Long.prototype.toString.call(message.routing_secret) : options.longs === Number ? new $util.LongBits(message.routing_secret.low >>> 0, message.routing_secret.high >>> 0).toNumber() : message.routing_secret;
            if (message.client_identity_string != null && message.hasOwnProperty("client_identity_string"))
                object.client_identity_string = message.client_identity_string;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsRouterToServer to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsRouterToServer.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsRouterToServer;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsServerToRouter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsServerToRouter.
         * @exports ICMsgSteamDatagramConnectionStatsServerToRouter
         * @interface ICMsgSteamDatagramConnectionStatsServerToRouter
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionStatsServerToRouter quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionStatsServerToRouter quality_e2e
         * @property {Array.<number>|null} [ack_relay] CMsgSteamDatagramConnectionStatsServerToRouter ack_relay
         * @property {Array.<number>|null} [legacy_ack_e2e] CMsgSteamDatagramConnectionStatsServerToRouter legacy_ack_e2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsServerToRouter flags
         * @property {number|null} [seq_num_s2r] CMsgSteamDatagramConnectionStatsServerToRouter seq_num_s2r
         * @property {number|null} [seq_num_e2e] CMsgSteamDatagramConnectionStatsServerToRouter seq_num_e2e
         * @property {number|null} [relay_session_id] CMsgSteamDatagramConnectionStatsServerToRouter relay_session_id
         * @property {number|null} [client_connection_id] CMsgSteamDatagramConnectionStatsServerToRouter client_connection_id
         * @property {number|null} [server_connection_id] CMsgSteamDatagramConnectionStatsServerToRouter server_connection_id
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsServerToRouter.
         * @exports CMsgSteamDatagramConnectionStatsServerToRouter
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsServerToRouter.
         * @implements ICMsgSteamDatagramConnectionStatsServerToRouter
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsServerToRouter(properties) {
            this.ack_relay = [];
            this.legacy_ack_e2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter ack_relay.
         * @member {Array.<number>} ack_relay
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.ack_relay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter legacy_ack_e2e.
         * @member {Array.<number>} legacy_ack_e2e
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.legacy_ack_e2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter seq_num_s2r.
         * @member {number} seq_num_s2r
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.seq_num_s2r = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter seq_num_e2e.
         * @member {number} seq_num_e2e
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.seq_num_e2e = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter relay_session_id.
         * @member {number} relay_session_id
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter client_connection_id.
         * @member {number} client_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.client_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter server_connection_id.
         * @member {number} server_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.server_connection_id = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsServerToRouter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsServerToRouter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsServerToRouter message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsServerToRouter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter} message CMsgSteamDatagramConnectionStatsServerToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.seq_num_s2r != null && Object.hasOwnProperty.call(message, "seq_num_s2r"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.seq_num_s2r);
            if (message.seq_num_e2e != null && Object.hasOwnProperty.call(message, "seq_num_e2e"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.seq_num_e2e);
            if (message.relay_session_id != null && Object.hasOwnProperty.call(message, "relay_session_id"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.relay_session_id);
            if (message.client_connection_id != null && Object.hasOwnProperty.call(message, "client_connection_id"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.client_connection_id);
            if (message.ack_relay != null && message.ack_relay.length)
                for (var i = 0; i < message.ack_relay.length; ++i)
                    writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.ack_relay[i]);
            if (message.legacy_ack_e2e != null && message.legacy_ack_e2e.length)
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.legacy_ack_e2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);
            if (message.server_connection_id != null && Object.hasOwnProperty.call(message, "server_connection_id"))
                writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.server_connection_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsServerToRouter message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsServerToRouter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter} message CMsgSteamDatagramConnectionStatsServerToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsServerToRouter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsServerToRouter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 8:
                    if (!(message.ack_relay && message.ack_relay.length))
                        message.ack_relay = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ack_relay.push(reader.fixed32());
                    } else
                        message.ack_relay.push(reader.fixed32());
                    break;
                case 9:
                    if (!(message.legacy_ack_e2e && message.legacy_ack_e2e.length))
                        message.legacy_ack_e2e = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_ack_e2e.push(reader.fixed32());
                    } else
                        message.legacy_ack_e2e.push(reader.fixed32());
                    break;
                case 10:
                    message.flags = reader.uint32();
                    break;
                case 3:
                    message.seq_num_s2r = reader.uint32();
                    break;
                case 4:
                    message.seq_num_e2e = reader.uint32();
                    break;
                case 6:
                    message.relay_session_id = reader.uint32();
                    break;
                case 7:
                    message.client_connection_id = reader.fixed32();
                    break;
                case 11:
                    message.server_connection_id = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsServerToRouter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsServerToRouter message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.ack_relay != null && message.hasOwnProperty("ack_relay")) {
                if (!Array.isArray(message.ack_relay))
                    return "ack_relay: array expected";
                for (var i = 0; i < message.ack_relay.length; ++i)
                    if (!$util.isInteger(message.ack_relay[i]))
                        return "ack_relay: integer[] expected";
            }
            if (message.legacy_ack_e2e != null && message.hasOwnProperty("legacy_ack_e2e")) {
                if (!Array.isArray(message.legacy_ack_e2e))
                    return "legacy_ack_e2e: array expected";
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    if (!$util.isInteger(message.legacy_ack_e2e[i]))
                        return "legacy_ack_e2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.seq_num_s2r != null && message.hasOwnProperty("seq_num_s2r"))
                if (!$util.isInteger(message.seq_num_s2r))
                    return "seq_num_s2r: integer expected";
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                if (!$util.isInteger(message.seq_num_e2e))
                    return "seq_num_e2e: integer expected";
            if (message.relay_session_id != null && message.hasOwnProperty("relay_session_id"))
                if (!$util.isInteger(message.relay_session_id))
                    return "relay_session_id: integer expected";
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                if (!$util.isInteger(message.client_connection_id))
                    return "client_connection_id: integer expected";
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                if (!$util.isInteger(message.server_connection_id))
                    return "server_connection_id: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsServerToRouter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsServerToRouter)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsServerToRouter();
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.ack_relay) {
                if (!Array.isArray(object.ack_relay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.ack_relay: array expected");
                message.ack_relay = [];
                for (var i = 0; i < object.ack_relay.length; ++i)
                    message.ack_relay[i] = object.ack_relay[i] >>> 0;
            }
            if (object.legacy_ack_e2e) {
                if (!Array.isArray(object.legacy_ack_e2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.legacy_ack_e2e: array expected");
                message.legacy_ack_e2e = [];
                for (var i = 0; i < object.legacy_ack_e2e.length; ++i)
                    message.legacy_ack_e2e[i] = object.legacy_ack_e2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.seq_num_s2r != null)
                message.seq_num_s2r = object.seq_num_s2r >>> 0;
            if (object.seq_num_e2e != null)
                message.seq_num_e2e = object.seq_num_e2e >>> 0;
            if (object.relay_session_id != null)
                message.relay_session_id = object.relay_session_id >>> 0;
            if (object.client_connection_id != null)
                message.client_connection_id = object.client_connection_id >>> 0;
            if (object.server_connection_id != null)
                message.server_connection_id = object.server_connection_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsServerToRouter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {CMsgSteamDatagramConnectionStatsServerToRouter} message CMsgSteamDatagramConnectionStatsServerToRouter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ack_relay = [];
                object.legacy_ack_e2e = [];
            }
            if (options.defaults) {
                object.quality_relay = null;
                object.quality_e2e = null;
                object.seq_num_s2r = 0;
                object.seq_num_e2e = 0;
                object.relay_session_id = 0;
                object.client_connection_id = 0;
                object.flags = 0;
                object.server_connection_id = 0;
            }
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.seq_num_s2r != null && message.hasOwnProperty("seq_num_s2r"))
                object.seq_num_s2r = message.seq_num_s2r;
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                object.seq_num_e2e = message.seq_num_e2e;
            if (message.relay_session_id != null && message.hasOwnProperty("relay_session_id"))
                object.relay_session_id = message.relay_session_id;
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                object.client_connection_id = message.client_connection_id;
            if (message.ack_relay && message.ack_relay.length) {
                object.ack_relay = [];
                for (var j = 0; j < message.ack_relay.length; ++j)
                    object.ack_relay[j] = message.ack_relay[j];
            }
            if (message.legacy_ack_e2e && message.legacy_ack_e2e.length) {
                object.legacy_ack_e2e = [];
                for (var j = 0; j < message.legacy_ack_e2e.length; ++j)
                    object.legacy_ack_e2e[j] = message.legacy_ack_e2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.server_connection_id != null && message.hasOwnProperty("server_connection_id"))
                object.server_connection_id = message.server_connection_id;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsServerToRouter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsServerToRouter.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsServerToRouter;
    })();
    
    $root.CMsgSteamDatagramP2PSessionRequestBody = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PSessionRequestBody.
         * @exports ICMsgSteamDatagramP2PSessionRequestBody
         * @interface ICMsgSteamDatagramP2PSessionRequestBody
         * @property {number|null} [challenge_time] CMsgSteamDatagramP2PSessionRequestBody challenge_time
         * @property {number|Long|null} [challenge] CMsgSteamDatagramP2PSessionRequestBody challenge
         * @property {number|null} [client_connection_id] CMsgSteamDatagramP2PSessionRequestBody client_connection_id
         * @property {number|Long|null} [legacy_peer_steam_id] CMsgSteamDatagramP2PSessionRequestBody legacy_peer_steam_id
         * @property {string|null} [peer_identity_string] CMsgSteamDatagramP2PSessionRequestBody peer_identity_string
         * @property {number|null} [peer_connection_id] CMsgSteamDatagramP2PSessionRequestBody peer_connection_id
         * @property {number|null} [protocol_version] CMsgSteamDatagramP2PSessionRequestBody protocol_version
         * @property {number|null} [network_config_version] CMsgSteamDatagramP2PSessionRequestBody network_config_version
         * @property {number|null} [unused_public_ip] CMsgSteamDatagramP2PSessionRequestBody unused_public_ip
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PSessionRequestBody.
         * @exports CMsgSteamDatagramP2PSessionRequestBody
         * @classdesc Represents a CMsgSteamDatagramP2PSessionRequestBody.
         * @implements ICMsgSteamDatagramP2PSessionRequestBody
         * @constructor
         * @param {ICMsgSteamDatagramP2PSessionRequestBody=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PSessionRequestBody(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody challenge_time.
         * @member {number} challenge_time
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.challenge_time = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody client_connection_id.
         * @member {number} client_connection_id
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.client_connection_id = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody legacy_peer_steam_id.
         * @member {number|Long} legacy_peer_steam_id
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.legacy_peer_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody peer_identity_string.
         * @member {string} peer_identity_string
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.peer_identity_string = "";
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody peer_connection_id.
         * @member {number} peer_connection_id
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.peer_connection_id = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody protocol_version.
         * @member {number} protocol_version
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.protocol_version = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody network_config_version.
         * @member {number} network_config_version
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.network_config_version = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody unused_public_ip.
         * @member {number} unused_public_ip
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.unused_public_ip = 0;
    
        /**
         * Creates a new CMsgSteamDatagramP2PSessionRequestBody instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequestBody=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.create = function create(properties) {
            return new CMsgSteamDatagramP2PSessionRequestBody(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequestBody message. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequestBody.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequestBody} message CMsgSteamDatagramP2PSessionRequestBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequestBody.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.challenge_time != null && Object.hasOwnProperty.call(message, "challenge_time"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.challenge_time);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.challenge);
            if (message.client_connection_id != null && Object.hasOwnProperty.call(message, "client_connection_id"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.client_connection_id);
            if (message.legacy_peer_steam_id != null && Object.hasOwnProperty.call(message, "legacy_peer_steam_id"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.legacy_peer_steam_id);
            if (message.peer_connection_id != null && Object.hasOwnProperty.call(message, "peer_connection_id"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.peer_connection_id);
            if (message.protocol_version != null && Object.hasOwnProperty.call(message, "protocol_version"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.protocol_version);
            if (message.network_config_version != null && Object.hasOwnProperty.call(message, "network_config_version"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.network_config_version);
            if (message.unused_public_ip != null && Object.hasOwnProperty.call(message, "unused_public_ip"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.unused_public_ip);
            if (message.peer_identity_string != null && Object.hasOwnProperty.call(message, "peer_identity_string"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.peer_identity_string);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequestBody message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequestBody.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequestBody} message CMsgSteamDatagramP2PSessionRequestBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequestBody.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequestBody message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequestBody.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PSessionRequestBody();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.challenge_time = reader.fixed32();
                    break;
                case 2:
                    message.challenge = reader.fixed64();
                    break;
                case 3:
                    message.client_connection_id = reader.fixed32();
                    break;
                case 4:
                    message.legacy_peer_steam_id = reader.fixed64();
                    break;
                case 11:
                    message.peer_identity_string = reader.string();
                    break;
                case 5:
                    message.peer_connection_id = reader.fixed32();
                    break;
                case 8:
                    message.protocol_version = reader.uint32();
                    break;
                case 9:
                    message.network_config_version = reader.uint32();
                    break;
                case 10:
                    message.unused_public_ip = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequestBody message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequestBody.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PSessionRequestBody message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PSessionRequestBody.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.challenge_time != null && message.hasOwnProperty("challenge_time"))
                if (!$util.isInteger(message.challenge_time))
                    return "challenge_time: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                if (!$util.isInteger(message.client_connection_id))
                    return "client_connection_id: integer expected";
            if (message.legacy_peer_steam_id != null && message.hasOwnProperty("legacy_peer_steam_id"))
                if (!$util.isInteger(message.legacy_peer_steam_id) && !(message.legacy_peer_steam_id && $util.isInteger(message.legacy_peer_steam_id.low) && $util.isInteger(message.legacy_peer_steam_id.high)))
                    return "legacy_peer_steam_id: integer|Long expected";
            if (message.peer_identity_string != null && message.hasOwnProperty("peer_identity_string"))
                if (!$util.isString(message.peer_identity_string))
                    return "peer_identity_string: string expected";
            if (message.peer_connection_id != null && message.hasOwnProperty("peer_connection_id"))
                if (!$util.isInteger(message.peer_connection_id))
                    return "peer_connection_id: integer expected";
            if (message.protocol_version != null && message.hasOwnProperty("protocol_version"))
                if (!$util.isInteger(message.protocol_version))
                    return "protocol_version: integer expected";
            if (message.network_config_version != null && message.hasOwnProperty("network_config_version"))
                if (!$util.isInteger(message.network_config_version))
                    return "network_config_version: integer expected";
            if (message.unused_public_ip != null && message.hasOwnProperty("unused_public_ip"))
                if (!$util.isInteger(message.unused_public_ip))
                    return "unused_public_ip: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PSessionRequestBody message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody
         */
        CMsgSteamDatagramP2PSessionRequestBody.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PSessionRequestBody)
                return object;
            var message = new $root.CMsgSteamDatagramP2PSessionRequestBody();
            if (object.challenge_time != null)
                message.challenge_time = object.challenge_time >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.client_connection_id != null)
                message.client_connection_id = object.client_connection_id >>> 0;
            if (object.legacy_peer_steam_id != null)
                if ($util.Long)
                    (message.legacy_peer_steam_id = $util.Long.fromValue(object.legacy_peer_steam_id)).unsigned = false;
                else if (typeof object.legacy_peer_steam_id === "string")
                    message.legacy_peer_steam_id = parseInt(object.legacy_peer_steam_id, 10);
                else if (typeof object.legacy_peer_steam_id === "number")
                    message.legacy_peer_steam_id = object.legacy_peer_steam_id;
                else if (typeof object.legacy_peer_steam_id === "object")
                    message.legacy_peer_steam_id = new $util.LongBits(object.legacy_peer_steam_id.low >>> 0, object.legacy_peer_steam_id.high >>> 0).toNumber();
            if (object.peer_identity_string != null)
                message.peer_identity_string = String(object.peer_identity_string);
            if (object.peer_connection_id != null)
                message.peer_connection_id = object.peer_connection_id >>> 0;
            if (object.protocol_version != null)
                message.protocol_version = object.protocol_version >>> 0;
            if (object.network_config_version != null)
                message.network_config_version = object.network_config_version >>> 0;
            if (object.unused_public_ip != null)
                message.unused_public_ip = object.unused_public_ip >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PSessionRequestBody message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {CMsgSteamDatagramP2PSessionRequestBody} message CMsgSteamDatagramP2PSessionRequestBody
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PSessionRequestBody.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.challenge_time = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.client_connection_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacy_peer_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacy_peer_steam_id = options.longs === String ? "0" : 0;
                object.peer_connection_id = 0;
                object.protocol_version = 0;
                object.network_config_version = 0;
                object.unused_public_ip = 0;
                object.peer_identity_string = "";
            }
            if (message.challenge_time != null && message.hasOwnProperty("challenge_time"))
                object.challenge_time = message.challenge_time;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.client_connection_id != null && message.hasOwnProperty("client_connection_id"))
                object.client_connection_id = message.client_connection_id;
            if (message.legacy_peer_steam_id != null && message.hasOwnProperty("legacy_peer_steam_id"))
                if (typeof message.legacy_peer_steam_id === "number")
                    object.legacy_peer_steam_id = options.longs === String ? String(message.legacy_peer_steam_id) : message.legacy_peer_steam_id;
                else
                    object.legacy_peer_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.legacy_peer_steam_id) : options.longs === Number ? new $util.LongBits(message.legacy_peer_steam_id.low >>> 0, message.legacy_peer_steam_id.high >>> 0).toNumber() : message.legacy_peer_steam_id;
            if (message.peer_connection_id != null && message.hasOwnProperty("peer_connection_id"))
                object.peer_connection_id = message.peer_connection_id;
            if (message.protocol_version != null && message.hasOwnProperty("protocol_version"))
                object.protocol_version = message.protocol_version;
            if (message.network_config_version != null && message.hasOwnProperty("network_config_version"))
                object.network_config_version = message.network_config_version;
            if (message.unused_public_ip != null && message.hasOwnProperty("unused_public_ip"))
                object.unused_public_ip = message.unused_public_ip;
            if (message.peer_identity_string != null && message.hasOwnProperty("peer_identity_string"))
                object.peer_identity_string = message.peer_identity_string;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PSessionRequestBody to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramP2PSessionRequestBody;
    })();
    
    $root.CMsgSteamDatagramP2PSessionRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PSessionRequest.
         * @exports ICMsgSteamDatagramP2PSessionRequest
         * @interface ICMsgSteamDatagramP2PSessionRequest
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramP2PSessionRequest cert
         * @property {Uint8Array|null} [body] CMsgSteamDatagramP2PSessionRequest body
         * @property {Uint8Array|null} [signature] CMsgSteamDatagramP2PSessionRequest signature
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PSessionRequest.
         * @exports CMsgSteamDatagramP2PSessionRequest
         * @classdesc Represents a CMsgSteamDatagramP2PSessionRequest.
         * @implements ICMsgSteamDatagramP2PSessionRequest
         * @constructor
         * @param {ICMsgSteamDatagramP2PSessionRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PSessionRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PSessionRequest cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.cert = null;
    
        /**
         * CMsgSteamDatagramP2PSessionRequest body.
         * @member {Uint8Array} body
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.body = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PSessionRequest signature.
         * @member {Uint8Array} signature
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.signature = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramP2PSessionRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest instance
         */
        CMsgSteamDatagramP2PSessionRequest.create = function create(properties) {
            return new CMsgSteamDatagramP2PSessionRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequest message. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequest} message CMsgSteamDatagramP2PSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.body);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequest} message CMsgSteamDatagramP2PSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PSessionRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.body = reader.bytes();
                    break;
                case 3:
                    message.signature = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PSessionRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PSessionRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            if (message.body != null && message.hasOwnProperty("body"))
                if (!(message.body && typeof message.body.length === "number" || $util.isString(message.body)))
                    return "body: buffer expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PSessionRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest
         */
        CMsgSteamDatagramP2PSessionRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PSessionRequest)
                return object;
            var message = new $root.CMsgSteamDatagramP2PSessionRequest();
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramP2PSessionRequest.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            if (object.body != null)
                if (typeof object.body === "string")
                    $util.base64.decode(object.body, message.body = $util.newBuffer($util.base64.length(object.body)), 0);
                else if (object.body.length)
                    message.body = object.body;
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length)
                    message.signature = object.signature;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PSessionRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {CMsgSteamDatagramP2PSessionRequest} message CMsgSteamDatagramP2PSessionRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PSessionRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cert = null;
                if (options.bytes === String)
                    object.body = "";
                else {
                    object.body = [];
                    if (options.bytes !== Array)
                        object.body = $util.newBuffer(object.body);
                }
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
            }
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = options.bytes === String ? $util.base64.encode(message.body, 0, message.body.length) : options.bytes === Array ? Array.prototype.slice.call(message.body) : message.body;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PSessionRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramP2PSessionRequest;
    })();
    
    $root.CMsgSteamDatagramP2PSessionEstablished = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PSessionEstablished.
         * @exports ICMsgSteamDatagramP2PSessionEstablished
         * @interface ICMsgSteamDatagramP2PSessionEstablished
         * @property {number|null} [connection_id] CMsgSteamDatagramP2PSessionEstablished connection_id
         * @property {number|null} [seconds_until_shutdown] CMsgSteamDatagramP2PSessionEstablished seconds_until_shutdown
         * @property {Uint8Array|null} [relay_routing_token] CMsgSteamDatagramP2PSessionEstablished relay_routing_token
         * @property {number|null} [seq_num_r2c] CMsgSteamDatagramP2PSessionEstablished seq_num_r2c
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PSessionEstablished.
         * @exports CMsgSteamDatagramP2PSessionEstablished
         * @classdesc Represents a CMsgSteamDatagramP2PSessionEstablished.
         * @implements ICMsgSteamDatagramP2PSessionEstablished
         * @constructor
         * @param {ICMsgSteamDatagramP2PSessionEstablished=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PSessionEstablished(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished seconds_until_shutdown.
         * @member {number} seconds_until_shutdown
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.seconds_until_shutdown = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished relay_routing_token.
         * @member {Uint8Array} relay_routing_token
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.relay_routing_token = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished seq_num_r2c.
         * @member {number} seq_num_r2c
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.seq_num_r2c = 0;
    
        /**
         * Creates a new CMsgSteamDatagramP2PSessionEstablished instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramP2PSessionEstablished=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished instance
         */
        CMsgSteamDatagramP2PSessionEstablished.create = function create(properties) {
            return new CMsgSteamDatagramP2PSessionEstablished(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionEstablished message. Does not implicitly {@link CMsgSteamDatagramP2PSessionEstablished.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramP2PSessionEstablished} message CMsgSteamDatagramP2PSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionEstablished.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connection_id);
            if (message.seconds_until_shutdown != null && Object.hasOwnProperty.call(message, "seconds_until_shutdown"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.seconds_until_shutdown);
            if (message.relay_routing_token != null && Object.hasOwnProperty.call(message, "relay_routing_token"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.relay_routing_token);
            if (message.seq_num_r2c != null && Object.hasOwnProperty.call(message, "seq_num_r2c"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seq_num_r2c);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionEstablished message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PSessionEstablished.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramP2PSessionEstablished} message CMsgSteamDatagramP2PSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionEstablished.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionEstablished message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionEstablished.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PSessionEstablished();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connection_id = reader.fixed32();
                    break;
                case 3:
                    message.seconds_until_shutdown = reader.uint32();
                    break;
                case 4:
                    message.relay_routing_token = reader.bytes();
                    break;
                case 5:
                    message.seq_num_r2c = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionEstablished message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionEstablished.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PSessionEstablished message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PSessionEstablished.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                if (!$util.isInteger(message.seconds_until_shutdown))
                    return "seconds_until_shutdown: integer expected";
            if (message.relay_routing_token != null && message.hasOwnProperty("relay_routing_token"))
                if (!(message.relay_routing_token && typeof message.relay_routing_token.length === "number" || $util.isString(message.relay_routing_token)))
                    return "relay_routing_token: buffer expected";
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                if (!$util.isInteger(message.seq_num_r2c))
                    return "seq_num_r2c: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PSessionEstablished message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished
         */
        CMsgSteamDatagramP2PSessionEstablished.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PSessionEstablished)
                return object;
            var message = new $root.CMsgSteamDatagramP2PSessionEstablished();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.seconds_until_shutdown != null)
                message.seconds_until_shutdown = object.seconds_until_shutdown >>> 0;
            if (object.relay_routing_token != null)
                if (typeof object.relay_routing_token === "string")
                    $util.base64.decode(object.relay_routing_token, message.relay_routing_token = $util.newBuffer($util.base64.length(object.relay_routing_token)), 0);
                else if (object.relay_routing_token.length)
                    message.relay_routing_token = object.relay_routing_token;
            if (object.seq_num_r2c != null)
                message.seq_num_r2c = object.seq_num_r2c >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PSessionEstablished message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {CMsgSteamDatagramP2PSessionEstablished} message CMsgSteamDatagramP2PSessionEstablished
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PSessionEstablished.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connection_id = 0;
                object.seconds_until_shutdown = 0;
                if (options.bytes === String)
                    object.relay_routing_token = "";
                else {
                    object.relay_routing_token = [];
                    if (options.bytes !== Array)
                        object.relay_routing_token = $util.newBuffer(object.relay_routing_token);
                }
                object.seq_num_r2c = 0;
            }
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                object.seconds_until_shutdown = message.seconds_until_shutdown;
            if (message.relay_routing_token != null && message.hasOwnProperty("relay_routing_token"))
                object.relay_routing_token = options.bytes === String ? $util.base64.encode(message.relay_routing_token, 0, message.relay_routing_token.length) : options.bytes === Array ? Array.prototype.slice.call(message.relay_routing_token) : message.relay_routing_token;
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                object.seq_num_r2c = message.seq_num_r2c;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PSessionEstablished to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramP2PSessionEstablished;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsP2PClientToRouter.
         * @exports ICMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @interface ICMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionStatsP2PClientToRouter quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionStatsP2PClientToRouter quality_e2e
         * @property {ICMsgSteamDatagramP2PRoutingSummary|null} [p2p_routing_summary] CMsgSteamDatagramConnectionStatsP2PClientToRouter p2p_routing_summary
         * @property {Array.<number>|null} [ack_relay] CMsgSteamDatagramConnectionStatsP2PClientToRouter ack_relay
         * @property {Array.<number>|null} [legacy_ack_e2e] CMsgSteamDatagramConnectionStatsP2PClientToRouter legacy_ack_e2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsP2PClientToRouter flags
         * @property {Uint8Array|null} [forward_target_relay_routing_token] CMsgSteamDatagramConnectionStatsP2PClientToRouter forward_target_relay_routing_token
         * @property {number|null} [forward_target_revision] CMsgSteamDatagramConnectionStatsP2PClientToRouter forward_target_revision
         * @property {Uint8Array|null} [routes] CMsgSteamDatagramConnectionStatsP2PClientToRouter routes
         * @property {number|null} [ack_peer_routes_revision] CMsgSteamDatagramConnectionStatsP2PClientToRouter ack_peer_routes_revision
         * @property {number|null} [connection_id] CMsgSteamDatagramConnectionStatsP2PClientToRouter connection_id
         * @property {number|null} [seq_num_c2r] CMsgSteamDatagramConnectionStatsP2PClientToRouter seq_num_c2r
         * @property {number|null} [seq_num_e2e] CMsgSteamDatagramConnectionStatsP2PClientToRouter seq_num_e2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsP2PClientToRouter.
         * @exports CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsP2PClientToRouter.
         * @implements ICMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsP2PClientToRouter(properties) {
            this.ack_relay = [];
            this.legacy_ack_e2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter p2p_routing_summary.
         * @member {ICMsgSteamDatagramP2PRoutingSummary|null|undefined} p2p_routing_summary
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.p2p_routing_summary = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter ack_relay.
         * @member {Array.<number>} ack_relay
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.ack_relay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter legacy_ack_e2e.
         * @member {Array.<number>} legacy_ack_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.legacy_ack_e2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter forward_target_relay_routing_token.
         * @member {Uint8Array} forward_target_relay_routing_token
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.forward_target_relay_routing_token = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter forward_target_revision.
         * @member {number} forward_target_revision
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.forward_target_revision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter routes.
         * @member {Uint8Array} routes
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.routes = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter ack_peer_routes_revision.
         * @member {number} ack_peer_routes_revision
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.ack_peer_routes_revision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter seq_num_c2r.
         * @member {number} seq_num_c2r
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.seq_num_c2r = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter seq_num_e2e.
         * @member {number} seq_num_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.seq_num_e2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsP2PClientToRouter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsP2PClientToRouter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PClientToRouter message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PClientToRouter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter} message CMsgSteamDatagramConnectionStatsP2PClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ack_relay != null && message.ack_relay.length)
                for (var i = 0; i < message.ack_relay.length; ++i)
                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.ack_relay[i]);
            if (message.legacy_ack_e2e != null && message.legacy_ack_e2e.length)
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.legacy_ack_e2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.flags);
            if (message.forward_target_relay_routing_token != null && Object.hasOwnProperty.call(message, "forward_target_relay_routing_token"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.forward_target_relay_routing_token);
            if (message.forward_target_revision != null && Object.hasOwnProperty.call(message, "forward_target_revision"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.forward_target_revision);
            if (message.routes != null && Object.hasOwnProperty.call(message, "routes"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.routes);
            if (message.ack_peer_routes_revision != null && Object.hasOwnProperty.call(message, "ack_peer_routes_revision"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.ack_peer_routes_revision);
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.connection_id);
            if (message.seq_num_c2r != null && Object.hasOwnProperty.call(message, "seq_num_c2r"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.seq_num_c2r);
            if (message.seq_num_e2e != null && Object.hasOwnProperty.call(message, "seq_num_e2e"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.seq_num_e2e);
            if (message.p2p_routing_summary != null && Object.hasOwnProperty.call(message, "p2p_routing_summary"))
                $root.CMsgSteamDatagramP2PRoutingSummary.encode(message.p2p_routing_summary, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PClientToRouter message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PClientToRouter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter} message CMsgSteamDatagramConnectionStatsP2PClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PClientToRouter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.ack_relay && message.ack_relay.length))
                        message.ack_relay = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ack_relay.push(reader.fixed32());
                    } else
                        message.ack_relay.push(reader.fixed32());
                    break;
                case 4:
                    if (!(message.legacy_ack_e2e && message.legacy_ack_e2e.length))
                        message.legacy_ack_e2e = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_ack_e2e.push(reader.fixed32());
                    } else
                        message.legacy_ack_e2e.push(reader.fixed32());
                    break;
                case 5:
                    message.flags = reader.uint32();
                    break;
                case 6:
                    message.forward_target_relay_routing_token = reader.bytes();
                    break;
                case 7:
                    message.forward_target_revision = reader.uint32();
                    break;
                case 8:
                    message.routes = reader.bytes();
                    break;
                case 9:
                    message.ack_peer_routes_revision = reader.uint32();
                    break;
                case 10:
                    message.connection_id = reader.fixed32();
                    break;
                case 11:
                    message.seq_num_c2r = reader.uint32();
                    break;
                case 12:
                    message.seq_num_e2e = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PClientToRouter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsP2PClientToRouter message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.p2p_routing_summary != null && message.hasOwnProperty("p2p_routing_summary")) {
                var error = $root.CMsgSteamDatagramP2PRoutingSummary.verify(message.p2p_routing_summary);
                if (error)
                    return "p2p_routing_summary." + error;
            }
            if (message.ack_relay != null && message.hasOwnProperty("ack_relay")) {
                if (!Array.isArray(message.ack_relay))
                    return "ack_relay: array expected";
                for (var i = 0; i < message.ack_relay.length; ++i)
                    if (!$util.isInteger(message.ack_relay[i]))
                        return "ack_relay: integer[] expected";
            }
            if (message.legacy_ack_e2e != null && message.hasOwnProperty("legacy_ack_e2e")) {
                if (!Array.isArray(message.legacy_ack_e2e))
                    return "legacy_ack_e2e: array expected";
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    if (!$util.isInteger(message.legacy_ack_e2e[i]))
                        return "legacy_ack_e2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.forward_target_relay_routing_token != null && message.hasOwnProperty("forward_target_relay_routing_token"))
                if (!(message.forward_target_relay_routing_token && typeof message.forward_target_relay_routing_token.length === "number" || $util.isString(message.forward_target_relay_routing_token)))
                    return "forward_target_relay_routing_token: buffer expected";
            if (message.forward_target_revision != null && message.hasOwnProperty("forward_target_revision"))
                if (!$util.isInteger(message.forward_target_revision))
                    return "forward_target_revision: integer expected";
            if (message.routes != null && message.hasOwnProperty("routes"))
                if (!(message.routes && typeof message.routes.length === "number" || $util.isString(message.routes)))
                    return "routes: buffer expected";
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                if (!$util.isInteger(message.ack_peer_routes_revision))
                    return "ack_peer_routes_revision: integer expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.seq_num_c2r != null && message.hasOwnProperty("seq_num_c2r"))
                if (!$util.isInteger(message.seq_num_c2r))
                    return "seq_num_c2r: integer expected";
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                if (!$util.isInteger(message.seq_num_e2e))
                    return "seq_num_e2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsP2PClientToRouter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter();
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.p2p_routing_summary != null) {
                if (typeof object.p2p_routing_summary !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.p2p_routing_summary: object expected");
                message.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.fromObject(object.p2p_routing_summary);
            }
            if (object.ack_relay) {
                if (!Array.isArray(object.ack_relay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_relay: array expected");
                message.ack_relay = [];
                for (var i = 0; i < object.ack_relay.length; ++i)
                    message.ack_relay[i] = object.ack_relay[i] >>> 0;
            }
            if (object.legacy_ack_e2e) {
                if (!Array.isArray(object.legacy_ack_e2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.legacy_ack_e2e: array expected");
                message.legacy_ack_e2e = [];
                for (var i = 0; i < object.legacy_ack_e2e.length; ++i)
                    message.legacy_ack_e2e[i] = object.legacy_ack_e2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.forward_target_relay_routing_token != null)
                if (typeof object.forward_target_relay_routing_token === "string")
                    $util.base64.decode(object.forward_target_relay_routing_token, message.forward_target_relay_routing_token = $util.newBuffer($util.base64.length(object.forward_target_relay_routing_token)), 0);
                else if (object.forward_target_relay_routing_token.length)
                    message.forward_target_relay_routing_token = object.forward_target_relay_routing_token;
            if (object.forward_target_revision != null)
                message.forward_target_revision = object.forward_target_revision >>> 0;
            if (object.routes != null)
                if (typeof object.routes === "string")
                    $util.base64.decode(object.routes, message.routes = $util.newBuffer($util.base64.length(object.routes)), 0);
                else if (object.routes.length)
                    message.routes = object.routes;
            if (object.ack_peer_routes_revision != null)
                message.ack_peer_routes_revision = object.ack_peer_routes_revision >>> 0;
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.seq_num_c2r != null)
                message.seq_num_c2r = object.seq_num_c2r >>> 0;
            if (object.seq_num_e2e != null)
                message.seq_num_e2e = object.seq_num_e2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsP2PClientToRouter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {CMsgSteamDatagramConnectionStatsP2PClientToRouter} message CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ack_relay = [];
                object.legacy_ack_e2e = [];
            }
            if (options.defaults) {
                object.quality_relay = null;
                object.quality_e2e = null;
                object.flags = 0;
                if (options.bytes === String)
                    object.forward_target_relay_routing_token = "";
                else {
                    object.forward_target_relay_routing_token = [];
                    if (options.bytes !== Array)
                        object.forward_target_relay_routing_token = $util.newBuffer(object.forward_target_relay_routing_token);
                }
                object.forward_target_revision = 0;
                if (options.bytes === String)
                    object.routes = "";
                else {
                    object.routes = [];
                    if (options.bytes !== Array)
                        object.routes = $util.newBuffer(object.routes);
                }
                object.ack_peer_routes_revision = 0;
                object.connection_id = 0;
                object.seq_num_c2r = 0;
                object.seq_num_e2e = 0;
                object.p2p_routing_summary = null;
            }
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.ack_relay && message.ack_relay.length) {
                object.ack_relay = [];
                for (var j = 0; j < message.ack_relay.length; ++j)
                    object.ack_relay[j] = message.ack_relay[j];
            }
            if (message.legacy_ack_e2e && message.legacy_ack_e2e.length) {
                object.legacy_ack_e2e = [];
                for (var j = 0; j < message.legacy_ack_e2e.length; ++j)
                    object.legacy_ack_e2e[j] = message.legacy_ack_e2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.forward_target_relay_routing_token != null && message.hasOwnProperty("forward_target_relay_routing_token"))
                object.forward_target_relay_routing_token = options.bytes === String ? $util.base64.encode(message.forward_target_relay_routing_token, 0, message.forward_target_relay_routing_token.length) : options.bytes === Array ? Array.prototype.slice.call(message.forward_target_relay_routing_token) : message.forward_target_relay_routing_token;
            if (message.forward_target_revision != null && message.hasOwnProperty("forward_target_revision"))
                object.forward_target_revision = message.forward_target_revision;
            if (message.routes != null && message.hasOwnProperty("routes"))
                object.routes = options.bytes === String ? $util.base64.encode(message.routes, 0, message.routes.length) : options.bytes === Array ? Array.prototype.slice.call(message.routes) : message.routes;
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                object.ack_peer_routes_revision = message.ack_peer_routes_revision;
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.seq_num_c2r != null && message.hasOwnProperty("seq_num_c2r"))
                object.seq_num_c2r = message.seq_num_c2r;
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                object.seq_num_e2e = message.seq_num_e2e;
            if (message.p2p_routing_summary != null && message.hasOwnProperty("p2p_routing_summary"))
                object.p2p_routing_summary = $root.CMsgSteamDatagramP2PRoutingSummary.toObject(message.p2p_routing_summary, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsP2PClientToRouter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         * @property {number} NOT_PRIMARY_SESSION=8 NOT_PRIMARY_SESSION value
         * @property {number} NOT_PRIMARY_TRANSPORT_E2E=16 NOT_PRIMARY_TRANSPORT_E2E value
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            values[valuesById[8] = "NOT_PRIMARY_SESSION"] = 8;
            values[valuesById[16] = "NOT_PRIMARY_TRANSPORT_E2E"] = 16;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsP2PClientToRouter;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsP2PRouterToClient.
         * @exports ICMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @interface ICMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionStatsP2PRouterToClient quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionStatsP2PRouterToClient quality_e2e
         * @property {number|null} [seconds_until_shutdown] CMsgSteamDatagramConnectionStatsP2PRouterToClient seconds_until_shutdown
         * @property {number|null} [migrate_request_ip] CMsgSteamDatagramConnectionStatsP2PRouterToClient migrate_request_ip
         * @property {number|null} [migrate_request_port] CMsgSteamDatagramConnectionStatsP2PRouterToClient migrate_request_port
         * @property {number|null} [scoring_penalty_relay_cluster] CMsgSteamDatagramConnectionStatsP2PRouterToClient scoring_penalty_relay_cluster
         * @property {Array.<number>|null} [ack_relay] CMsgSteamDatagramConnectionStatsP2PRouterToClient ack_relay
         * @property {Array.<number>|null} [legacy_ack_e2e] CMsgSteamDatagramConnectionStatsP2PRouterToClient legacy_ack_e2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsP2PRouterToClient flags
         * @property {number|null} [ack_forward_target_revision] CMsgSteamDatagramConnectionStatsP2PRouterToClient ack_forward_target_revision
         * @property {Uint8Array|null} [routes] CMsgSteamDatagramConnectionStatsP2PRouterToClient routes
         * @property {number|null} [ack_peer_routes_revision] CMsgSteamDatagramConnectionStatsP2PRouterToClient ack_peer_routes_revision
         * @property {number|null} [connection_id] CMsgSteamDatagramConnectionStatsP2PRouterToClient connection_id
         * @property {number|null} [seq_num_r2c] CMsgSteamDatagramConnectionStatsP2PRouterToClient seq_num_r2c
         * @property {number|null} [seq_num_e2e] CMsgSteamDatagramConnectionStatsP2PRouterToClient seq_num_e2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsP2PRouterToClient.
         * @exports CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsP2PRouterToClient.
         * @implements ICMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsP2PRouterToClient(properties) {
            this.ack_relay = [];
            this.legacy_ack_e2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient seconds_until_shutdown.
         * @member {number} seconds_until_shutdown
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.seconds_until_shutdown = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient migrate_request_ip.
         * @member {number} migrate_request_ip
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.migrate_request_ip = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient migrate_request_port.
         * @member {number} migrate_request_port
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.migrate_request_port = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient scoring_penalty_relay_cluster.
         * @member {number} scoring_penalty_relay_cluster
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.scoring_penalty_relay_cluster = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient ack_relay.
         * @member {Array.<number>} ack_relay
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.ack_relay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient legacy_ack_e2e.
         * @member {Array.<number>} legacy_ack_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.legacy_ack_e2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient ack_forward_target_revision.
         * @member {number} ack_forward_target_revision
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.ack_forward_target_revision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient routes.
         * @member {Uint8Array} routes
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.routes = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient ack_peer_routes_revision.
         * @member {number} ack_peer_routes_revision
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.ack_peer_routes_revision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient seq_num_r2c.
         * @member {number} seq_num_r2c
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.seq_num_r2c = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient seq_num_e2e.
         * @member {number} seq_num_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.seq_num_e2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsP2PRouterToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsP2PRouterToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PRouterToClient message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PRouterToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient} message CMsgSteamDatagramConnectionStatsP2PRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.seconds_until_shutdown != null && Object.hasOwnProperty.call(message, "seconds_until_shutdown"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.seconds_until_shutdown);
            if (message.migrate_request_ip != null && Object.hasOwnProperty.call(message, "migrate_request_ip"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.migrate_request_ip);
            if (message.migrate_request_port != null && Object.hasOwnProperty.call(message, "migrate_request_port"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.migrate_request_port);
            if (message.scoring_penalty_relay_cluster != null && Object.hasOwnProperty.call(message, "scoring_penalty_relay_cluster"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.scoring_penalty_relay_cluster);
            if (message.ack_relay != null && message.ack_relay.length)
                for (var i = 0; i < message.ack_relay.length; ++i)
                    writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.ack_relay[i]);
            if (message.legacy_ack_e2e != null && message.legacy_ack_e2e.length)
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.legacy_ack_e2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.flags);
            if (message.ack_forward_target_revision != null && Object.hasOwnProperty.call(message, "ack_forward_target_revision"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.ack_forward_target_revision);
            if (message.routes != null && Object.hasOwnProperty.call(message, "routes"))
                writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.routes);
            if (message.ack_peer_routes_revision != null && Object.hasOwnProperty.call(message, "ack_peer_routes_revision"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.ack_peer_routes_revision);
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 13, wireType 5 =*/109).fixed32(message.connection_id);
            if (message.seq_num_r2c != null && Object.hasOwnProperty.call(message, "seq_num_r2c"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.seq_num_r2c);
            if (message.seq_num_e2e != null && Object.hasOwnProperty.call(message, "seq_num_e2e"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.seq_num_e2e);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PRouterToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PRouterToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient} message CMsgSteamDatagramConnectionStatsP2PRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PRouterToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.seconds_until_shutdown = reader.uint32();
                    break;
                case 4:
                    message.migrate_request_ip = reader.fixed32();
                    break;
                case 5:
                    message.migrate_request_port = reader.uint32();
                    break;
                case 6:
                    message.scoring_penalty_relay_cluster = reader.uint32();
                    break;
                case 7:
                    if (!(message.ack_relay && message.ack_relay.length))
                        message.ack_relay = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ack_relay.push(reader.fixed32());
                    } else
                        message.ack_relay.push(reader.fixed32());
                    break;
                case 8:
                    if (!(message.legacy_ack_e2e && message.legacy_ack_e2e.length))
                        message.legacy_ack_e2e = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_ack_e2e.push(reader.fixed32());
                    } else
                        message.legacy_ack_e2e.push(reader.fixed32());
                    break;
                case 9:
                    message.flags = reader.uint32();
                    break;
                case 10:
                    message.ack_forward_target_revision = reader.uint32();
                    break;
                case 11:
                    message.routes = reader.bytes();
                    break;
                case 12:
                    message.ack_peer_routes_revision = reader.uint32();
                    break;
                case 13:
                    message.connection_id = reader.fixed32();
                    break;
                case 14:
                    message.seq_num_r2c = reader.uint32();
                    break;
                case 15:
                    message.seq_num_e2e = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PRouterToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsP2PRouterToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                if (!$util.isInteger(message.seconds_until_shutdown))
                    return "seconds_until_shutdown: integer expected";
            if (message.migrate_request_ip != null && message.hasOwnProperty("migrate_request_ip"))
                if (!$util.isInteger(message.migrate_request_ip))
                    return "migrate_request_ip: integer expected";
            if (message.migrate_request_port != null && message.hasOwnProperty("migrate_request_port"))
                if (!$util.isInteger(message.migrate_request_port))
                    return "migrate_request_port: integer expected";
            if (message.scoring_penalty_relay_cluster != null && message.hasOwnProperty("scoring_penalty_relay_cluster"))
                if (!$util.isInteger(message.scoring_penalty_relay_cluster))
                    return "scoring_penalty_relay_cluster: integer expected";
            if (message.ack_relay != null && message.hasOwnProperty("ack_relay")) {
                if (!Array.isArray(message.ack_relay))
                    return "ack_relay: array expected";
                for (var i = 0; i < message.ack_relay.length; ++i)
                    if (!$util.isInteger(message.ack_relay[i]))
                        return "ack_relay: integer[] expected";
            }
            if (message.legacy_ack_e2e != null && message.hasOwnProperty("legacy_ack_e2e")) {
                if (!Array.isArray(message.legacy_ack_e2e))
                    return "legacy_ack_e2e: array expected";
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    if (!$util.isInteger(message.legacy_ack_e2e[i]))
                        return "legacy_ack_e2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.ack_forward_target_revision != null && message.hasOwnProperty("ack_forward_target_revision"))
                if (!$util.isInteger(message.ack_forward_target_revision))
                    return "ack_forward_target_revision: integer expected";
            if (message.routes != null && message.hasOwnProperty("routes"))
                if (!(message.routes && typeof message.routes.length === "number" || $util.isString(message.routes)))
                    return "routes: buffer expected";
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                if (!$util.isInteger(message.ack_peer_routes_revision))
                    return "ack_peer_routes_revision: integer expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                if (!$util.isInteger(message.seq_num_r2c))
                    return "seq_num_r2c: integer expected";
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                if (!$util.isInteger(message.seq_num_e2e))
                    return "seq_num_e2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsP2PRouterToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient();
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.seconds_until_shutdown != null)
                message.seconds_until_shutdown = object.seconds_until_shutdown >>> 0;
            if (object.migrate_request_ip != null)
                message.migrate_request_ip = object.migrate_request_ip >>> 0;
            if (object.migrate_request_port != null)
                message.migrate_request_port = object.migrate_request_port >>> 0;
            if (object.scoring_penalty_relay_cluster != null)
                message.scoring_penalty_relay_cluster = object.scoring_penalty_relay_cluster >>> 0;
            if (object.ack_relay) {
                if (!Array.isArray(object.ack_relay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_relay: array expected");
                message.ack_relay = [];
                for (var i = 0; i < object.ack_relay.length; ++i)
                    message.ack_relay[i] = object.ack_relay[i] >>> 0;
            }
            if (object.legacy_ack_e2e) {
                if (!Array.isArray(object.legacy_ack_e2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.legacy_ack_e2e: array expected");
                message.legacy_ack_e2e = [];
                for (var i = 0; i < object.legacy_ack_e2e.length; ++i)
                    message.legacy_ack_e2e[i] = object.legacy_ack_e2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.ack_forward_target_revision != null)
                message.ack_forward_target_revision = object.ack_forward_target_revision >>> 0;
            if (object.routes != null)
                if (typeof object.routes === "string")
                    $util.base64.decode(object.routes, message.routes = $util.newBuffer($util.base64.length(object.routes)), 0);
                else if (object.routes.length)
                    message.routes = object.routes;
            if (object.ack_peer_routes_revision != null)
                message.ack_peer_routes_revision = object.ack_peer_routes_revision >>> 0;
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.seq_num_r2c != null)
                message.seq_num_r2c = object.seq_num_r2c >>> 0;
            if (object.seq_num_e2e != null)
                message.seq_num_e2e = object.seq_num_e2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsP2PRouterToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {CMsgSteamDatagramConnectionStatsP2PRouterToClient} message CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ack_relay = [];
                object.legacy_ack_e2e = [];
            }
            if (options.defaults) {
                object.quality_relay = null;
                object.quality_e2e = null;
                object.seconds_until_shutdown = 0;
                object.migrate_request_ip = 0;
                object.migrate_request_port = 0;
                object.scoring_penalty_relay_cluster = 0;
                object.flags = 0;
                object.ack_forward_target_revision = 0;
                if (options.bytes === String)
                    object.routes = "";
                else {
                    object.routes = [];
                    if (options.bytes !== Array)
                        object.routes = $util.newBuffer(object.routes);
                }
                object.ack_peer_routes_revision = 0;
                object.connection_id = 0;
                object.seq_num_r2c = 0;
                object.seq_num_e2e = 0;
            }
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                object.seconds_until_shutdown = message.seconds_until_shutdown;
            if (message.migrate_request_ip != null && message.hasOwnProperty("migrate_request_ip"))
                object.migrate_request_ip = message.migrate_request_ip;
            if (message.migrate_request_port != null && message.hasOwnProperty("migrate_request_port"))
                object.migrate_request_port = message.migrate_request_port;
            if (message.scoring_penalty_relay_cluster != null && message.hasOwnProperty("scoring_penalty_relay_cluster"))
                object.scoring_penalty_relay_cluster = message.scoring_penalty_relay_cluster;
            if (message.ack_relay && message.ack_relay.length) {
                object.ack_relay = [];
                for (var j = 0; j < message.ack_relay.length; ++j)
                    object.ack_relay[j] = message.ack_relay[j];
            }
            if (message.legacy_ack_e2e && message.legacy_ack_e2e.length) {
                object.legacy_ack_e2e = [];
                for (var j = 0; j < message.legacy_ack_e2e.length; ++j)
                    object.legacy_ack_e2e[j] = message.legacy_ack_e2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.ack_forward_target_revision != null && message.hasOwnProperty("ack_forward_target_revision"))
                object.ack_forward_target_revision = message.ack_forward_target_revision;
            if (message.routes != null && message.hasOwnProperty("routes"))
                object.routes = options.bytes === String ? $util.base64.encode(message.routes, 0, message.routes.length) : options.bytes === Array ? Array.prototype.slice.call(message.routes) : message.routes;
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                object.ack_peer_routes_revision = message.ack_peer_routes_revision;
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.seq_num_r2c != null && message.hasOwnProperty("seq_num_r2c"))
                object.seq_num_r2c = message.seq_num_r2c;
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                object.seq_num_e2e = message.seq_num_e2e;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsP2PRouterToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         * @property {number} NOT_PRIMARY_TRANSPORT_E2E=16 NOT_PRIMARY_TRANSPORT_E2E value
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            values[valuesById[16] = "NOT_PRIMARY_TRANSPORT_E2E"] = 16;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsP2PRouterToClient;
    })();
    
    $root.CMsgSteamDatagramP2PBadRouteRouterToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PBadRouteRouterToClient.
         * @exports ICMsgSteamDatagramP2PBadRouteRouterToClient
         * @interface ICMsgSteamDatagramP2PBadRouteRouterToClient
         * @property {number|null} [connection_id] CMsgSteamDatagramP2PBadRouteRouterToClient connection_id
         * @property {Uint8Array|null} [failed_relay_routing_token] CMsgSteamDatagramP2PBadRouteRouterToClient failed_relay_routing_token
         * @property {number|null} [ack_forward_target_revision] CMsgSteamDatagramP2PBadRouteRouterToClient ack_forward_target_revision
         * @property {number|Long|null} [kludge_pad] CMsgSteamDatagramP2PBadRouteRouterToClient kludge_pad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PBadRouteRouterToClient.
         * @exports CMsgSteamDatagramP2PBadRouteRouterToClient
         * @classdesc Represents a CMsgSteamDatagramP2PBadRouteRouterToClient.
         * @implements ICMsgSteamDatagramP2PBadRouteRouterToClient
         * @constructor
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PBadRouteRouterToClient(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient connection_id.
         * @member {number} connection_id
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.connection_id = 0;
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient failed_relay_routing_token.
         * @member {Uint8Array} failed_relay_routing_token
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.failed_relay_routing_token = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient ack_forward_target_revision.
         * @member {number} ack_forward_target_revision
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.ack_forward_target_revision = 0;
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient kludge_pad.
         * @member {number|Long} kludge_pad
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.kludge_pad = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramP2PBadRouteRouterToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.create = function create(properties) {
            return new CMsgSteamDatagramP2PBadRouteRouterToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PBadRouteRouterToClient message. Does not implicitly {@link CMsgSteamDatagramP2PBadRouteRouterToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient} message CMsgSteamDatagramP2PBadRouteRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connection_id);
            if (message.failed_relay_routing_token != null && Object.hasOwnProperty.call(message, "failed_relay_routing_token"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.failed_relay_routing_token);
            if (message.ack_forward_target_revision != null && Object.hasOwnProperty.call(message, "ack_forward_target_revision"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ack_forward_target_revision);
            if (message.kludge_pad != null && Object.hasOwnProperty.call(message, "kludge_pad"))
                writer.uint32(/* id 99, wireType 1 =*/793).fixed64(message.kludge_pad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PBadRouteRouterToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PBadRouteRouterToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient} message CMsgSteamDatagramP2PBadRouteRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PBadRouteRouterToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PBadRouteRouterToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connection_id = reader.fixed32();
                    break;
                case 2:
                    message.failed_relay_routing_token = reader.bytes();
                    break;
                case 3:
                    message.ack_forward_target_revision = reader.uint32();
                    break;
                case 99:
                    message.kludge_pad = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PBadRouteRouterToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PBadRouteRouterToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                if (!$util.isInteger(message.connection_id))
                    return "connection_id: integer expected";
            if (message.failed_relay_routing_token != null && message.hasOwnProperty("failed_relay_routing_token"))
                if (!(message.failed_relay_routing_token && typeof message.failed_relay_routing_token.length === "number" || $util.isString(message.failed_relay_routing_token)))
                    return "failed_relay_routing_token: buffer expected";
            if (message.ack_forward_target_revision != null && message.hasOwnProperty("ack_forward_target_revision"))
                if (!$util.isInteger(message.ack_forward_target_revision))
                    return "ack_forward_target_revision: integer expected";
            if (message.kludge_pad != null && message.hasOwnProperty("kludge_pad"))
                if (!$util.isInteger(message.kludge_pad) && !(message.kludge_pad && $util.isInteger(message.kludge_pad.low) && $util.isInteger(message.kludge_pad.high)))
                    return "kludge_pad: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PBadRouteRouterToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PBadRouteRouterToClient)
                return object;
            var message = new $root.CMsgSteamDatagramP2PBadRouteRouterToClient();
            if (object.connection_id != null)
                message.connection_id = object.connection_id >>> 0;
            if (object.failed_relay_routing_token != null)
                if (typeof object.failed_relay_routing_token === "string")
                    $util.base64.decode(object.failed_relay_routing_token, message.failed_relay_routing_token = $util.newBuffer($util.base64.length(object.failed_relay_routing_token)), 0);
                else if (object.failed_relay_routing_token.length)
                    message.failed_relay_routing_token = object.failed_relay_routing_token;
            if (object.ack_forward_target_revision != null)
                message.ack_forward_target_revision = object.ack_forward_target_revision >>> 0;
            if (object.kludge_pad != null)
                if ($util.Long)
                    (message.kludge_pad = $util.Long.fromValue(object.kludge_pad)).unsigned = false;
                else if (typeof object.kludge_pad === "string")
                    message.kludge_pad = parseInt(object.kludge_pad, 10);
                else if (typeof object.kludge_pad === "number")
                    message.kludge_pad = object.kludge_pad;
                else if (typeof object.kludge_pad === "object")
                    message.kludge_pad = new $util.LongBits(object.kludge_pad.low >>> 0, object.kludge_pad.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PBadRouteRouterToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {CMsgSteamDatagramP2PBadRouteRouterToClient} message CMsgSteamDatagramP2PBadRouteRouterToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connection_id = 0;
                if (options.bytes === String)
                    object.failed_relay_routing_token = "";
                else {
                    object.failed_relay_routing_token = [];
                    if (options.bytes !== Array)
                        object.failed_relay_routing_token = $util.newBuffer(object.failed_relay_routing_token);
                }
                object.ack_forward_target_revision = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kludge_pad = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kludge_pad = options.longs === String ? "0" : 0;
            }
            if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                object.connection_id = message.connection_id;
            if (message.failed_relay_routing_token != null && message.hasOwnProperty("failed_relay_routing_token"))
                object.failed_relay_routing_token = options.bytes === String ? $util.base64.encode(message.failed_relay_routing_token, 0, message.failed_relay_routing_token.length) : options.bytes === Array ? Array.prototype.slice.call(message.failed_relay_routing_token) : message.failed_relay_routing_token;
            if (message.ack_forward_target_revision != null && message.hasOwnProperty("ack_forward_target_revision"))
                object.ack_forward_target_revision = message.ack_forward_target_revision;
            if (message.kludge_pad != null && message.hasOwnProperty("kludge_pad"))
                if (typeof message.kludge_pad === "number")
                    object.kludge_pad = options.longs === String ? String(message.kludge_pad) : message.kludge_pad;
                else
                    object.kludge_pad = options.longs === String ? $util.Long.prototype.toString.call(message.kludge_pad) : options.longs === Number ? new $util.LongBits(message.kludge_pad.low >>> 0, message.kludge_pad.high >>> 0).toNumber() : message.kludge_pad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PBadRouteRouterToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramP2PBadRouteRouterToClient;
    })();
    
    $root.CMsgSteamDatagramP2PRoutes = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PRoutes.
         * @exports ICMsgSteamDatagramP2PRoutes
         * @interface ICMsgSteamDatagramP2PRoutes
         * @property {Array.<CMsgSteamDatagramP2PRoutes.IRelayCluster>|null} [relay_clusters] CMsgSteamDatagramP2PRoutes relay_clusters
         * @property {Array.<CMsgSteamDatagramP2PRoutes.IRoute>|null} [routes] CMsgSteamDatagramP2PRoutes routes
         * @property {number|null} [revision] CMsgSteamDatagramP2PRoutes revision
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PRoutes.
         * @exports CMsgSteamDatagramP2PRoutes
         * @classdesc Represents a CMsgSteamDatagramP2PRoutes.
         * @implements ICMsgSteamDatagramP2PRoutes
         * @constructor
         * @param {ICMsgSteamDatagramP2PRoutes=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PRoutes(properties) {
            this.relay_clusters = [];
            this.routes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PRoutes relay_clusters.
         * @member {Array.<CMsgSteamDatagramP2PRoutes.IRelayCluster>} relay_clusters
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         */
        CMsgSteamDatagramP2PRoutes.prototype.relay_clusters = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramP2PRoutes routes.
         * @member {Array.<CMsgSteamDatagramP2PRoutes.IRoute>} routes
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         */
        CMsgSteamDatagramP2PRoutes.prototype.routes = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramP2PRoutes revision.
         * @member {number} revision
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         */
        CMsgSteamDatagramP2PRoutes.prototype.revision = 0;
    
        /**
         * Creates a new CMsgSteamDatagramP2PRoutes instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {ICMsgSteamDatagramP2PRoutes=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes instance
         */
        CMsgSteamDatagramP2PRoutes.create = function create(properties) {
            return new CMsgSteamDatagramP2PRoutes(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutes message. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {ICMsgSteamDatagramP2PRoutes} message CMsgSteamDatagramP2PRoutes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.relay_clusters != null && message.relay_clusters.length)
                for (var i = 0; i < message.relay_clusters.length; ++i)
                    $root.CMsgSteamDatagramP2PRoutes.RelayCluster.encode(message.relay_clusters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.routes != null && message.routes.length)
                for (var i = 0; i < message.routes.length; ++i)
                    $root.CMsgSteamDatagramP2PRoutes.Route.encode(message.routes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.revision != null && Object.hasOwnProperty.call(message, "revision"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.revision);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutes message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {ICMsgSteamDatagramP2PRoutes} message CMsgSteamDatagramP2PRoutes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutes message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.relay_clusters && message.relay_clusters.length))
                        message.relay_clusters = [];
                    message.relay_clusters.push($root.CMsgSteamDatagramP2PRoutes.RelayCluster.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.routes && message.routes.length))
                        message.routes = [];
                    message.routes.push($root.CMsgSteamDatagramP2PRoutes.Route.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.revision = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PRoutes message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PRoutes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.relay_clusters != null && message.hasOwnProperty("relay_clusters")) {
                if (!Array.isArray(message.relay_clusters))
                    return "relay_clusters: array expected";
                for (var i = 0; i < message.relay_clusters.length; ++i) {
                    var error = $root.CMsgSteamDatagramP2PRoutes.RelayCluster.verify(message.relay_clusters[i]);
                    if (error)
                        return "relay_clusters." + error;
                }
            }
            if (message.routes != null && message.hasOwnProperty("routes")) {
                if (!Array.isArray(message.routes))
                    return "routes: array expected";
                for (var i = 0; i < message.routes.length; ++i) {
                    var error = $root.CMsgSteamDatagramP2PRoutes.Route.verify(message.routes[i]);
                    if (error)
                        return "routes." + error;
                }
            }
            if (message.revision != null && message.hasOwnProperty("revision"))
                if (!$util.isInteger(message.revision))
                    return "revision: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PRoutes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes
         */
        CMsgSteamDatagramP2PRoutes.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PRoutes)
                return object;
            var message = new $root.CMsgSteamDatagramP2PRoutes();
            if (object.relay_clusters) {
                if (!Array.isArray(object.relay_clusters))
                    throw TypeError(".CMsgSteamDatagramP2PRoutes.relay_clusters: array expected");
                message.relay_clusters = [];
                for (var i = 0; i < object.relay_clusters.length; ++i) {
                    if (typeof object.relay_clusters[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramP2PRoutes.relay_clusters: object expected");
                    message.relay_clusters[i] = $root.CMsgSteamDatagramP2PRoutes.RelayCluster.fromObject(object.relay_clusters[i]);
                }
            }
            if (object.routes) {
                if (!Array.isArray(object.routes))
                    throw TypeError(".CMsgSteamDatagramP2PRoutes.routes: array expected");
                message.routes = [];
                for (var i = 0; i < object.routes.length; ++i) {
                    if (typeof object.routes[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramP2PRoutes.routes: object expected");
                    message.routes[i] = $root.CMsgSteamDatagramP2PRoutes.Route.fromObject(object.routes[i]);
                }
            }
            if (object.revision != null)
                message.revision = object.revision >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PRoutes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {CMsgSteamDatagramP2PRoutes} message CMsgSteamDatagramP2PRoutes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PRoutes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.relay_clusters = [];
                object.routes = [];
            }
            if (options.defaults)
                object.revision = 0;
            if (message.relay_clusters && message.relay_clusters.length) {
                object.relay_clusters = [];
                for (var j = 0; j < message.relay_clusters.length; ++j)
                    object.relay_clusters[j] = $root.CMsgSteamDatagramP2PRoutes.RelayCluster.toObject(message.relay_clusters[j], options);
            }
            if (message.routes && message.routes.length) {
                object.routes = [];
                for (var j = 0; j < message.routes.length; ++j)
                    object.routes[j] = $root.CMsgSteamDatagramP2PRoutes.Route.toObject(message.routes[j], options);
            }
            if (message.revision != null && message.hasOwnProperty("revision"))
                object.revision = message.revision;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PRoutes to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PRoutes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamDatagramP2PRoutes.RelayCluster = (function() {
    
            /**
             * Properties of a RelayCluster.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @interface IRelayCluster
             * @property {number|null} [pop_id] RelayCluster pop_id
             * @property {number|null} [ping_ms] RelayCluster ping_ms
             * @property {number|null} [score_penalty] RelayCluster score_penalty
             * @property {Uint8Array|null} [session_relay_routing_token] RelayCluster session_relay_routing_token
             */
    
            /**
             * Constructs a new RelayCluster.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @classdesc Represents a RelayCluster.
             * @implements IRelayCluster
             * @constructor
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster=} [properties] Properties to set
             */
            function RelayCluster(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RelayCluster pop_id.
             * @member {number} pop_id
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.pop_id = 0;
    
            /**
             * RelayCluster ping_ms.
             * @member {number} ping_ms
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.ping_ms = 0;
    
            /**
             * RelayCluster score_penalty.
             * @member {number} score_penalty
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.score_penalty = 0;
    
            /**
             * RelayCluster session_relay_routing_token.
             * @member {Uint8Array} session_relay_routing_token
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.session_relay_routing_token = $util.newBuffer([]);
    
            /**
             * Creates a new RelayCluster instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster=} [properties] Properties to set
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster instance
             */
            RelayCluster.create = function create(properties) {
                return new RelayCluster(properties);
            };
    
            /**
             * Encodes the specified RelayCluster message. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.RelayCluster.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster} message RelayCluster message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RelayCluster.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pop_id != null && Object.hasOwnProperty.call(message, "pop_id"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.pop_id);
                if (message.ping_ms != null && Object.hasOwnProperty.call(message, "ping_ms"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ping_ms);
                if (message.score_penalty != null && Object.hasOwnProperty.call(message, "score_penalty"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.score_penalty);
                if (message.session_relay_routing_token != null && Object.hasOwnProperty.call(message, "session_relay_routing_token"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.session_relay_routing_token);
                return writer;
            };
    
            /**
             * Encodes the specified RelayCluster message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.RelayCluster.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster} message RelayCluster message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RelayCluster.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RelayCluster message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RelayCluster.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutes.RelayCluster();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pop_id = reader.fixed32();
                        break;
                    case 2:
                        message.ping_ms = reader.uint32();
                        break;
                    case 3:
                        message.score_penalty = reader.uint32();
                        break;
                    case 4:
                        message.session_relay_routing_token = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RelayCluster message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RelayCluster.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RelayCluster message.
             * @function verify
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RelayCluster.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pop_id != null && message.hasOwnProperty("pop_id"))
                    if (!$util.isInteger(message.pop_id))
                        return "pop_id: integer expected";
                if (message.ping_ms != null && message.hasOwnProperty("ping_ms"))
                    if (!$util.isInteger(message.ping_ms))
                        return "ping_ms: integer expected";
                if (message.score_penalty != null && message.hasOwnProperty("score_penalty"))
                    if (!$util.isInteger(message.score_penalty))
                        return "score_penalty: integer expected";
                if (message.session_relay_routing_token != null && message.hasOwnProperty("session_relay_routing_token"))
                    if (!(message.session_relay_routing_token && typeof message.session_relay_routing_token.length === "number" || $util.isString(message.session_relay_routing_token)))
                        return "session_relay_routing_token: buffer expected";
                return null;
            };
    
            /**
             * Creates a RelayCluster message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster
             */
            RelayCluster.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramP2PRoutes.RelayCluster)
                    return object;
                var message = new $root.CMsgSteamDatagramP2PRoutes.RelayCluster();
                if (object.pop_id != null)
                    message.pop_id = object.pop_id >>> 0;
                if (object.ping_ms != null)
                    message.ping_ms = object.ping_ms >>> 0;
                if (object.score_penalty != null)
                    message.score_penalty = object.score_penalty >>> 0;
                if (object.session_relay_routing_token != null)
                    if (typeof object.session_relay_routing_token === "string")
                        $util.base64.decode(object.session_relay_routing_token, message.session_relay_routing_token = $util.newBuffer($util.base64.length(object.session_relay_routing_token)), 0);
                    else if (object.session_relay_routing_token.length)
                        message.session_relay_routing_token = object.session_relay_routing_token;
                return message;
            };
    
            /**
             * Creates a plain object from a RelayCluster message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.RelayCluster} message RelayCluster
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RelayCluster.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.pop_id = 0;
                    object.ping_ms = 0;
                    object.score_penalty = 0;
                    if (options.bytes === String)
                        object.session_relay_routing_token = "";
                    else {
                        object.session_relay_routing_token = [];
                        if (options.bytes !== Array)
                            object.session_relay_routing_token = $util.newBuffer(object.session_relay_routing_token);
                    }
                }
                if (message.pop_id != null && message.hasOwnProperty("pop_id"))
                    object.pop_id = message.pop_id;
                if (message.ping_ms != null && message.hasOwnProperty("ping_ms"))
                    object.ping_ms = message.ping_ms;
                if (message.score_penalty != null && message.hasOwnProperty("score_penalty"))
                    object.score_penalty = message.score_penalty;
                if (message.session_relay_routing_token != null && message.hasOwnProperty("session_relay_routing_token"))
                    object.session_relay_routing_token = options.bytes === String ? $util.base64.encode(message.session_relay_routing_token, 0, message.session_relay_routing_token.length) : options.bytes === Array ? Array.prototype.slice.call(message.session_relay_routing_token) : message.session_relay_routing_token;
                return object;
            };
    
            /**
             * Converts this RelayCluster to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RelayCluster.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RelayCluster;
        })();
    
        CMsgSteamDatagramP2PRoutes.Route = (function() {
    
            /**
             * Properties of a Route.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @interface IRoute
             * @property {number|null} [my_pop_id] Route my_pop_id
             * @property {number|null} [your_pop_id] Route your_pop_id
             * @property {number|null} [score] Route score
             */
    
            /**
             * Constructs a new Route.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @classdesc Represents a Route.
             * @implements IRoute
             * @constructor
             * @param {CMsgSteamDatagramP2PRoutes.IRoute=} [properties] Properties to set
             */
            function Route(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Route my_pop_id.
             * @member {number} my_pop_id
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             */
            Route.prototype.my_pop_id = 0;
    
            /**
             * Route your_pop_id.
             * @member {number} your_pop_id
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             */
            Route.prototype.your_pop_id = 0;
    
            /**
             * Route score.
             * @member {number} score
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             */
            Route.prototype.score = 0;
    
            /**
             * Creates a new Route instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRoute=} [properties] Properties to set
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route instance
             */
            Route.create = function create(properties) {
                return new Route(properties);
            };
    
            /**
             * Encodes the specified Route message. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.Route.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRoute} message Route message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Route.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.my_pop_id != null && Object.hasOwnProperty.call(message, "my_pop_id"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.my_pop_id);
                if (message.your_pop_id != null && Object.hasOwnProperty.call(message, "your_pop_id"))
                    writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.your_pop_id);
                if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.score);
                return writer;
            };
    
            /**
             * Encodes the specified Route message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.Route.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRoute} message Route message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Route.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Route message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Route.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutes.Route();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.my_pop_id = reader.fixed32();
                        break;
                    case 2:
                        message.your_pop_id = reader.fixed32();
                        break;
                    case 3:
                        message.score = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Route message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Route.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Route message.
             * @function verify
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Route.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.my_pop_id != null && message.hasOwnProperty("my_pop_id"))
                    if (!$util.isInteger(message.my_pop_id))
                        return "my_pop_id: integer expected";
                if (message.your_pop_id != null && message.hasOwnProperty("your_pop_id"))
                    if (!$util.isInteger(message.your_pop_id))
                        return "your_pop_id: integer expected";
                if (message.score != null && message.hasOwnProperty("score"))
                    if (!$util.isInteger(message.score))
                        return "score: integer expected";
                return null;
            };
    
            /**
             * Creates a Route message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route
             */
            Route.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramP2PRoutes.Route)
                    return object;
                var message = new $root.CMsgSteamDatagramP2PRoutes.Route();
                if (object.my_pop_id != null)
                    message.my_pop_id = object.my_pop_id >>> 0;
                if (object.your_pop_id != null)
                    message.your_pop_id = object.your_pop_id >>> 0;
                if (object.score != null)
                    message.score = object.score >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Route message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.Route} message Route
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Route.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.my_pop_id = 0;
                    object.your_pop_id = 0;
                    object.score = 0;
                }
                if (message.my_pop_id != null && message.hasOwnProperty("my_pop_id"))
                    object.my_pop_id = message.my_pop_id;
                if (message.your_pop_id != null && message.hasOwnProperty("your_pop_id"))
                    object.your_pop_id = message.your_pop_id;
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                return object;
            };
    
            /**
             * Converts this Route to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Route.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Route;
        })();
    
        return CMsgSteamDatagramP2PRoutes;
    })();
    
    $root.CMsgSteamDatagramGameServerSample = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameServerSample.
         * @exports ICMsgSteamDatagramGameServerSample
         * @interface ICMsgSteamDatagramGameServerSample
         * @property {number|null} [ipv4] CMsgSteamDatagramGameServerSample ipv4
         * @property {number|null} [port] CMsgSteamDatagramGameServerSample port
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameServerSample.
         * @exports CMsgSteamDatagramGameServerSample
         * @classdesc Represents a CMsgSteamDatagramGameServerSample.
         * @implements ICMsgSteamDatagramGameServerSample
         * @constructor
         * @param {ICMsgSteamDatagramGameServerSample=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameServerSample(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameServerSample ipv4.
         * @member {number} ipv4
         * @memberof CMsgSteamDatagramGameServerSample
         * @instance
         */
        CMsgSteamDatagramGameServerSample.prototype.ipv4 = 0;
    
        /**
         * CMsgSteamDatagramGameServerSample port.
         * @member {number} port
         * @memberof CMsgSteamDatagramGameServerSample
         * @instance
         */
        CMsgSteamDatagramGameServerSample.prototype.port = 0;
    
        /**
         * Creates a new CMsgSteamDatagramGameServerSample instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {ICMsgSteamDatagramGameServerSample=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameServerSample} CMsgSteamDatagramGameServerSample instance
         */
        CMsgSteamDatagramGameServerSample.create = function create(properties) {
            return new CMsgSteamDatagramGameServerSample(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameServerSample message. Does not implicitly {@link CMsgSteamDatagramGameServerSample.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {ICMsgSteamDatagramGameServerSample} message CMsgSteamDatagramGameServerSample message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameServerSample.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ipv4 != null && Object.hasOwnProperty.call(message, "ipv4"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.ipv4);
            if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameServerSample message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameServerSample.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {ICMsgSteamDatagramGameServerSample} message CMsgSteamDatagramGameServerSample message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameServerSample.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameServerSample message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameServerSample} CMsgSteamDatagramGameServerSample
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameServerSample.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameServerSample();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ipv4 = reader.fixed32();
                    break;
                case 2:
                    message.port = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameServerSample message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameServerSample} CMsgSteamDatagramGameServerSample
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameServerSample.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameServerSample message.
         * @function verify
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameServerSample.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ipv4 != null && message.hasOwnProperty("ipv4"))
                if (!$util.isInteger(message.ipv4))
                    return "ipv4: integer expected";
            if (message.port != null && message.hasOwnProperty("port"))
                if (!$util.isInteger(message.port))
                    return "port: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameServerSample message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameServerSample} CMsgSteamDatagramGameServerSample
         */
        CMsgSteamDatagramGameServerSample.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameServerSample)
                return object;
            var message = new $root.CMsgSteamDatagramGameServerSample();
            if (object.ipv4 != null)
                message.ipv4 = object.ipv4 >>> 0;
            if (object.port != null)
                message.port = object.port >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameServerSample message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameServerSample
         * @static
         * @param {CMsgSteamDatagramGameServerSample} message CMsgSteamDatagramGameServerSample
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameServerSample.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ipv4 = 0;
                object.port = 0;
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4"))
                object.ipv4 = message.ipv4;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameServerSample to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameServerSample
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameServerSample.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramGameServerSample;
    })();
    
    $root.CMsgSteamDatagramGameServerSampleDataCenter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameServerSampleDataCenter.
         * @exports ICMsgSteamDatagramGameServerSampleDataCenter
         * @interface ICMsgSteamDatagramGameServerSampleDataCenter
         * @property {number|null} [datacenter_id] CMsgSteamDatagramGameServerSampleDataCenter datacenter_id
         * @property {Array.<ICMsgSteamDatagramGameServerSample>|null} [servers] CMsgSteamDatagramGameServerSampleDataCenter servers
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameServerSampleDataCenter.
         * @exports CMsgSteamDatagramGameServerSampleDataCenter
         * @classdesc Represents a CMsgSteamDatagramGameServerSampleDataCenter.
         * @implements ICMsgSteamDatagramGameServerSampleDataCenter
         * @constructor
         * @param {ICMsgSteamDatagramGameServerSampleDataCenter=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameServerSampleDataCenter(properties) {
            this.servers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameServerSampleDataCenter datacenter_id.
         * @member {number} datacenter_id
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @instance
         */
        CMsgSteamDatagramGameServerSampleDataCenter.prototype.datacenter_id = 0;
    
        /**
         * CMsgSteamDatagramGameServerSampleDataCenter servers.
         * @member {Array.<ICMsgSteamDatagramGameServerSample>} servers
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @instance
         */
        CMsgSteamDatagramGameServerSampleDataCenter.prototype.servers = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramGameServerSampleDataCenter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {ICMsgSteamDatagramGameServerSampleDataCenter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameServerSampleDataCenter} CMsgSteamDatagramGameServerSampleDataCenter instance
         */
        CMsgSteamDatagramGameServerSampleDataCenter.create = function create(properties) {
            return new CMsgSteamDatagramGameServerSampleDataCenter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameServerSampleDataCenter message. Does not implicitly {@link CMsgSteamDatagramGameServerSampleDataCenter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {ICMsgSteamDatagramGameServerSampleDataCenter} message CMsgSteamDatagramGameServerSampleDataCenter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameServerSampleDataCenter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.datacenter_id != null && Object.hasOwnProperty.call(message, "datacenter_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.datacenter_id);
            if (message.servers != null && message.servers.length)
                for (var i = 0; i < message.servers.length; ++i)
                    $root.CMsgSteamDatagramGameServerSample.encode(message.servers[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameServerSampleDataCenter message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameServerSampleDataCenter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {ICMsgSteamDatagramGameServerSampleDataCenter} message CMsgSteamDatagramGameServerSampleDataCenter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameServerSampleDataCenter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameServerSampleDataCenter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameServerSampleDataCenter} CMsgSteamDatagramGameServerSampleDataCenter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameServerSampleDataCenter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameServerSampleDataCenter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.datacenter_id = reader.fixed32();
                    break;
                case 3:
                    if (!(message.servers && message.servers.length))
                        message.servers = [];
                    message.servers.push($root.CMsgSteamDatagramGameServerSample.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameServerSampleDataCenter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameServerSampleDataCenter} CMsgSteamDatagramGameServerSampleDataCenter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameServerSampleDataCenter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameServerSampleDataCenter message.
         * @function verify
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameServerSampleDataCenter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.datacenter_id != null && message.hasOwnProperty("datacenter_id"))
                if (!$util.isInteger(message.datacenter_id))
                    return "datacenter_id: integer expected";
            if (message.servers != null && message.hasOwnProperty("servers")) {
                if (!Array.isArray(message.servers))
                    return "servers: array expected";
                for (var i = 0; i < message.servers.length; ++i) {
                    var error = $root.CMsgSteamDatagramGameServerSample.verify(message.servers[i]);
                    if (error)
                        return "servers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameServerSampleDataCenter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameServerSampleDataCenter} CMsgSteamDatagramGameServerSampleDataCenter
         */
        CMsgSteamDatagramGameServerSampleDataCenter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameServerSampleDataCenter)
                return object;
            var message = new $root.CMsgSteamDatagramGameServerSampleDataCenter();
            if (object.datacenter_id != null)
                message.datacenter_id = object.datacenter_id >>> 0;
            if (object.servers) {
                if (!Array.isArray(object.servers))
                    throw TypeError(".CMsgSteamDatagramGameServerSampleDataCenter.servers: array expected");
                message.servers = [];
                for (var i = 0; i < object.servers.length; ++i) {
                    if (typeof object.servers[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramGameServerSampleDataCenter.servers: object expected");
                    message.servers[i] = $root.CMsgSteamDatagramGameServerSample.fromObject(object.servers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameServerSampleDataCenter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @static
         * @param {CMsgSteamDatagramGameServerSampleDataCenter} message CMsgSteamDatagramGameServerSampleDataCenter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameServerSampleDataCenter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.servers = [];
            if (options.defaults)
                object.datacenter_id = 0;
            if (message.datacenter_id != null && message.hasOwnProperty("datacenter_id"))
                object.datacenter_id = message.datacenter_id;
            if (message.servers && message.servers.length) {
                object.servers = [];
                for (var j = 0; j < message.servers.length; ++j)
                    object.servers[j] = $root.CMsgSteamDatagramGameServerSample.toObject(message.servers[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameServerSampleDataCenter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameServerSampleDataCenter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameServerSampleDataCenter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramGameServerSampleDataCenter;
    })();
    
    $root.CMsgSteamDatagramRelayToRelayPing = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramRelayToRelayPing.
         * @exports ICMsgSteamDatagramRelayToRelayPing
         * @interface ICMsgSteamDatagramRelayToRelayPing
         * @property {number|null} [request_timestamp] CMsgSteamDatagramRelayToRelayPing request_timestamp
         * @property {number|null} [request_date] CMsgSteamDatagramRelayToRelayPing request_date
         * @property {number|null} [my_pop_id] CMsgSteamDatagramRelayToRelayPing my_pop_id
         * @property {number|null} [your_pop_id] CMsgSteamDatagramRelayToRelayPing your_pop_id
         * @property {number|null} [checksum] CMsgSteamDatagramRelayToRelayPing checksum
         * @property {Array.<ICMsgSteamDatagramGameServerSampleDataCenter>|null} [data_centers] CMsgSteamDatagramRelayToRelayPing data_centers
         */
    
        /**
         * Constructs a new CMsgSteamDatagramRelayToRelayPing.
         * @exports CMsgSteamDatagramRelayToRelayPing
         * @classdesc Represents a CMsgSteamDatagramRelayToRelayPing.
         * @implements ICMsgSteamDatagramRelayToRelayPing
         * @constructor
         * @param {ICMsgSteamDatagramRelayToRelayPing=} [properties] Properties to set
         */
        function CMsgSteamDatagramRelayToRelayPing(properties) {
            this.data_centers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramRelayToRelayPing request_timestamp.
         * @member {number} request_timestamp
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @instance
         */
        CMsgSteamDatagramRelayToRelayPing.prototype.request_timestamp = 0;
    
        /**
         * CMsgSteamDatagramRelayToRelayPing request_date.
         * @member {number} request_date
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @instance
         */
        CMsgSteamDatagramRelayToRelayPing.prototype.request_date = 0;
    
        /**
         * CMsgSteamDatagramRelayToRelayPing my_pop_id.
         * @member {number} my_pop_id
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @instance
         */
        CMsgSteamDatagramRelayToRelayPing.prototype.my_pop_id = 0;
    
        /**
         * CMsgSteamDatagramRelayToRelayPing your_pop_id.
         * @member {number} your_pop_id
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @instance
         */
        CMsgSteamDatagramRelayToRelayPing.prototype.your_pop_id = 0;
    
        /**
         * CMsgSteamDatagramRelayToRelayPing checksum.
         * @member {number} checksum
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @instance
         */
        CMsgSteamDatagramRelayToRelayPing.prototype.checksum = 0;
    
        /**
         * CMsgSteamDatagramRelayToRelayPing data_centers.
         * @member {Array.<ICMsgSteamDatagramGameServerSampleDataCenter>} data_centers
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @instance
         */
        CMsgSteamDatagramRelayToRelayPing.prototype.data_centers = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramRelayToRelayPing instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {ICMsgSteamDatagramRelayToRelayPing=} [properties] Properties to set
         * @returns {CMsgSteamDatagramRelayToRelayPing} CMsgSteamDatagramRelayToRelayPing instance
         */
        CMsgSteamDatagramRelayToRelayPing.create = function create(properties) {
            return new CMsgSteamDatagramRelayToRelayPing(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRelayToRelayPing message. Does not implicitly {@link CMsgSteamDatagramRelayToRelayPing.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {ICMsgSteamDatagramRelayToRelayPing} message CMsgSteamDatagramRelayToRelayPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRelayToRelayPing.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.request_timestamp != null && Object.hasOwnProperty.call(message, "request_timestamp"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.request_timestamp);
            if (message.request_date != null && Object.hasOwnProperty.call(message, "request_date"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.request_date);
            if (message.my_pop_id != null && Object.hasOwnProperty.call(message, "my_pop_id"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.my_pop_id);
            if (message.your_pop_id != null && Object.hasOwnProperty.call(message, "your_pop_id"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.your_pop_id);
            if (message.checksum != null && Object.hasOwnProperty.call(message, "checksum"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.checksum);
            if (message.data_centers != null && message.data_centers.length)
                for (var i = 0; i < message.data_centers.length; ++i)
                    $root.CMsgSteamDatagramGameServerSampleDataCenter.encode(message.data_centers[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRelayToRelayPing message, length delimited. Does not implicitly {@link CMsgSteamDatagramRelayToRelayPing.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {ICMsgSteamDatagramRelayToRelayPing} message CMsgSteamDatagramRelayToRelayPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRelayToRelayPing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramRelayToRelayPing message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramRelayToRelayPing} CMsgSteamDatagramRelayToRelayPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRelayToRelayPing.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRelayToRelayPing();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.request_timestamp = reader.fixed32();
                    break;
                case 2:
                    message.request_date = reader.fixed32();
                    break;
                case 3:
                    message.my_pop_id = reader.fixed32();
                    break;
                case 4:
                    message.your_pop_id = reader.fixed32();
                    break;
                case 5:
                    message.checksum = reader.fixed32();
                    break;
                case 6:
                    if (!(message.data_centers && message.data_centers.length))
                        message.data_centers = [];
                    message.data_centers.push($root.CMsgSteamDatagramGameServerSampleDataCenter.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramRelayToRelayPing message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramRelayToRelayPing} CMsgSteamDatagramRelayToRelayPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRelayToRelayPing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramRelayToRelayPing message.
         * @function verify
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramRelayToRelayPing.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.request_timestamp != null && message.hasOwnProperty("request_timestamp"))
                if (!$util.isInteger(message.request_timestamp))
                    return "request_timestamp: integer expected";
            if (message.request_date != null && message.hasOwnProperty("request_date"))
                if (!$util.isInteger(message.request_date))
                    return "request_date: integer expected";
            if (message.my_pop_id != null && message.hasOwnProperty("my_pop_id"))
                if (!$util.isInteger(message.my_pop_id))
                    return "my_pop_id: integer expected";
            if (message.your_pop_id != null && message.hasOwnProperty("your_pop_id"))
                if (!$util.isInteger(message.your_pop_id))
                    return "your_pop_id: integer expected";
            if (message.checksum != null && message.hasOwnProperty("checksum"))
                if (!$util.isInteger(message.checksum))
                    return "checksum: integer expected";
            if (message.data_centers != null && message.hasOwnProperty("data_centers")) {
                if (!Array.isArray(message.data_centers))
                    return "data_centers: array expected";
                for (var i = 0; i < message.data_centers.length; ++i) {
                    var error = $root.CMsgSteamDatagramGameServerSampleDataCenter.verify(message.data_centers[i]);
                    if (error)
                        return "data_centers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramRelayToRelayPing message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramRelayToRelayPing} CMsgSteamDatagramRelayToRelayPing
         */
        CMsgSteamDatagramRelayToRelayPing.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramRelayToRelayPing)
                return object;
            var message = new $root.CMsgSteamDatagramRelayToRelayPing();
            if (object.request_timestamp != null)
                message.request_timestamp = object.request_timestamp >>> 0;
            if (object.request_date != null)
                message.request_date = object.request_date >>> 0;
            if (object.my_pop_id != null)
                message.my_pop_id = object.my_pop_id >>> 0;
            if (object.your_pop_id != null)
                message.your_pop_id = object.your_pop_id >>> 0;
            if (object.checksum != null)
                message.checksum = object.checksum >>> 0;
            if (object.data_centers) {
                if (!Array.isArray(object.data_centers))
                    throw TypeError(".CMsgSteamDatagramRelayToRelayPing.data_centers: array expected");
                message.data_centers = [];
                for (var i = 0; i < object.data_centers.length; ++i) {
                    if (typeof object.data_centers[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramRelayToRelayPing.data_centers: object expected");
                    message.data_centers[i] = $root.CMsgSteamDatagramGameServerSampleDataCenter.fromObject(object.data_centers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramRelayToRelayPing message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @static
         * @param {CMsgSteamDatagramRelayToRelayPing} message CMsgSteamDatagramRelayToRelayPing
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramRelayToRelayPing.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data_centers = [];
            if (options.defaults) {
                object.request_timestamp = 0;
                object.request_date = 0;
                object.my_pop_id = 0;
                object.your_pop_id = 0;
                object.checksum = 0;
            }
            if (message.request_timestamp != null && message.hasOwnProperty("request_timestamp"))
                object.request_timestamp = message.request_timestamp;
            if (message.request_date != null && message.hasOwnProperty("request_date"))
                object.request_date = message.request_date;
            if (message.my_pop_id != null && message.hasOwnProperty("my_pop_id"))
                object.my_pop_id = message.my_pop_id;
            if (message.your_pop_id != null && message.hasOwnProperty("your_pop_id"))
                object.your_pop_id = message.your_pop_id;
            if (message.checksum != null && message.hasOwnProperty("checksum"))
                object.checksum = message.checksum;
            if (message.data_centers && message.data_centers.length) {
                object.data_centers = [];
                for (var j = 0; j < message.data_centers.length; ++j)
                    object.data_centers[j] = $root.CMsgSteamDatagramGameServerSampleDataCenter.toObject(message.data_centers[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramRelayToRelayPing to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramRelayToRelayPing
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramRelayToRelayPing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramRelayToRelayPing;
    })();
    
    $root.CMsgSteamDatagramDataCenterState = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramDataCenterState.
         * @exports ICMsgSteamDatagramDataCenterState
         * @interface ICMsgSteamDatagramDataCenterState
         * @property {Array.<CMsgSteamDatagramDataCenterState.IDataCenter>|null} [data_centers] CMsgSteamDatagramDataCenterState data_centers
         */
    
        /**
         * Constructs a new CMsgSteamDatagramDataCenterState.
         * @exports CMsgSteamDatagramDataCenterState
         * @classdesc Represents a CMsgSteamDatagramDataCenterState.
         * @implements ICMsgSteamDatagramDataCenterState
         * @constructor
         * @param {ICMsgSteamDatagramDataCenterState=} [properties] Properties to set
         */
        function CMsgSteamDatagramDataCenterState(properties) {
            this.data_centers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramDataCenterState data_centers.
         * @member {Array.<CMsgSteamDatagramDataCenterState.IDataCenter>} data_centers
         * @memberof CMsgSteamDatagramDataCenterState
         * @instance
         */
        CMsgSteamDatagramDataCenterState.prototype.data_centers = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramDataCenterState instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {ICMsgSteamDatagramDataCenterState=} [properties] Properties to set
         * @returns {CMsgSteamDatagramDataCenterState} CMsgSteamDatagramDataCenterState instance
         */
        CMsgSteamDatagramDataCenterState.create = function create(properties) {
            return new CMsgSteamDatagramDataCenterState(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramDataCenterState message. Does not implicitly {@link CMsgSteamDatagramDataCenterState.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {ICMsgSteamDatagramDataCenterState} message CMsgSteamDatagramDataCenterState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramDataCenterState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.data_centers != null && message.data_centers.length)
                for (var i = 0; i < message.data_centers.length; ++i)
                    $root.CMsgSteamDatagramDataCenterState.DataCenter.encode(message.data_centers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramDataCenterState message, length delimited. Does not implicitly {@link CMsgSteamDatagramDataCenterState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {ICMsgSteamDatagramDataCenterState} message CMsgSteamDatagramDataCenterState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramDataCenterState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramDataCenterState message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramDataCenterState} CMsgSteamDatagramDataCenterState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramDataCenterState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramDataCenterState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.data_centers && message.data_centers.length))
                        message.data_centers = [];
                    message.data_centers.push($root.CMsgSteamDatagramDataCenterState.DataCenter.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramDataCenterState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramDataCenterState} CMsgSteamDatagramDataCenterState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramDataCenterState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramDataCenterState message.
         * @function verify
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramDataCenterState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.data_centers != null && message.hasOwnProperty("data_centers")) {
                if (!Array.isArray(message.data_centers))
                    return "data_centers: array expected";
                for (var i = 0; i < message.data_centers.length; ++i) {
                    var error = $root.CMsgSteamDatagramDataCenterState.DataCenter.verify(message.data_centers[i]);
                    if (error)
                        return "data_centers." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramDataCenterState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramDataCenterState} CMsgSteamDatagramDataCenterState
         */
        CMsgSteamDatagramDataCenterState.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramDataCenterState)
                return object;
            var message = new $root.CMsgSteamDatagramDataCenterState();
            if (object.data_centers) {
                if (!Array.isArray(object.data_centers))
                    throw TypeError(".CMsgSteamDatagramDataCenterState.data_centers: array expected");
                message.data_centers = [];
                for (var i = 0; i < object.data_centers.length; ++i) {
                    if (typeof object.data_centers[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramDataCenterState.data_centers: object expected");
                    message.data_centers[i] = $root.CMsgSteamDatagramDataCenterState.DataCenter.fromObject(object.data_centers[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramDataCenterState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramDataCenterState
         * @static
         * @param {CMsgSteamDatagramDataCenterState} message CMsgSteamDatagramDataCenterState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramDataCenterState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data_centers = [];
            if (message.data_centers && message.data_centers.length) {
                object.data_centers = [];
                for (var j = 0; j < message.data_centers.length; ++j)
                    object.data_centers[j] = $root.CMsgSteamDatagramDataCenterState.DataCenter.toObject(message.data_centers[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramDataCenterState to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramDataCenterState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramDataCenterState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamDatagramDataCenterState.Server = (function() {
    
            /**
             * Properties of a Server.
             * @memberof CMsgSteamDatagramDataCenterState
             * @interface IServer
             * @property {string|null} [address] Server address
             * @property {number|null} [ping_ms] Server ping_ms
             */
    
            /**
             * Constructs a new Server.
             * @memberof CMsgSteamDatagramDataCenterState
             * @classdesc Represents a Server.
             * @implements IServer
             * @constructor
             * @param {CMsgSteamDatagramDataCenterState.IServer=} [properties] Properties to set
             */
            function Server(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Server address.
             * @member {string} address
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @instance
             */
            Server.prototype.address = "";
    
            /**
             * Server ping_ms.
             * @member {number} ping_ms
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @instance
             */
            Server.prototype.ping_ms = 0;
    
            /**
             * Creates a new Server instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {CMsgSteamDatagramDataCenterState.IServer=} [properties] Properties to set
             * @returns {CMsgSteamDatagramDataCenterState.Server} Server instance
             */
            Server.create = function create(properties) {
                return new Server(properties);
            };
    
            /**
             * Encodes the specified Server message. Does not implicitly {@link CMsgSteamDatagramDataCenterState.Server.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {CMsgSteamDatagramDataCenterState.IServer} message Server message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Server.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                if (message.ping_ms != null && Object.hasOwnProperty.call(message, "ping_ms"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ping_ms);
                return writer;
            };
    
            /**
             * Encodes the specified Server message, length delimited. Does not implicitly {@link CMsgSteamDatagramDataCenterState.Server.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {CMsgSteamDatagramDataCenterState.IServer} message Server message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Server.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Server message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramDataCenterState.Server} Server
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Server.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramDataCenterState.Server();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.string();
                        break;
                    case 2:
                        message.ping_ms = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Server message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramDataCenterState.Server} Server
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Server.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Server message.
             * @function verify
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Server.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                if (message.ping_ms != null && message.hasOwnProperty("ping_ms"))
                    if (!$util.isInteger(message.ping_ms))
                        return "ping_ms: integer expected";
                return null;
            };
    
            /**
             * Creates a Server message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramDataCenterState.Server} Server
             */
            Server.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramDataCenterState.Server)
                    return object;
                var message = new $root.CMsgSteamDatagramDataCenterState.Server();
                if (object.address != null)
                    message.address = String(object.address);
                if (object.ping_ms != null)
                    message.ping_ms = object.ping_ms >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Server message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @static
             * @param {CMsgSteamDatagramDataCenterState.Server} message Server
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Server.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.address = "";
                    object.ping_ms = 0;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                if (message.ping_ms != null && message.hasOwnProperty("ping_ms"))
                    object.ping_ms = message.ping_ms;
                return object;
            };
    
            /**
             * Converts this Server to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramDataCenterState.Server
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Server.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Server;
        })();
    
        CMsgSteamDatagramDataCenterState.DataCenter = (function() {
    
            /**
             * Properties of a DataCenter.
             * @memberof CMsgSteamDatagramDataCenterState
             * @interface IDataCenter
             * @property {string|null} [code] DataCenter code
             * @property {Array.<CMsgSteamDatagramDataCenterState.IServer>|null} [server_sample] DataCenter server_sample
             * @property {Array.<CMsgSteamDatagramDataCenterState.IServer>|null} [relay_sample] DataCenter relay_sample
             */
    
            /**
             * Constructs a new DataCenter.
             * @memberof CMsgSteamDatagramDataCenterState
             * @classdesc Represents a DataCenter.
             * @implements IDataCenter
             * @constructor
             * @param {CMsgSteamDatagramDataCenterState.IDataCenter=} [properties] Properties to set
             */
            function DataCenter(properties) {
                this.server_sample = [];
                this.relay_sample = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DataCenter code.
             * @member {string} code
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @instance
             */
            DataCenter.prototype.code = "";
    
            /**
             * DataCenter server_sample.
             * @member {Array.<CMsgSteamDatagramDataCenterState.IServer>} server_sample
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @instance
             */
            DataCenter.prototype.server_sample = $util.emptyArray;
    
            /**
             * DataCenter relay_sample.
             * @member {Array.<CMsgSteamDatagramDataCenterState.IServer>} relay_sample
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @instance
             */
            DataCenter.prototype.relay_sample = $util.emptyArray;
    
            /**
             * Creates a new DataCenter instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {CMsgSteamDatagramDataCenterState.IDataCenter=} [properties] Properties to set
             * @returns {CMsgSteamDatagramDataCenterState.DataCenter} DataCenter instance
             */
            DataCenter.create = function create(properties) {
                return new DataCenter(properties);
            };
    
            /**
             * Encodes the specified DataCenter message. Does not implicitly {@link CMsgSteamDatagramDataCenterState.DataCenter.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {CMsgSteamDatagramDataCenterState.IDataCenter} message DataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataCenter.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
                if (message.server_sample != null && message.server_sample.length)
                    for (var i = 0; i < message.server_sample.length; ++i)
                        $root.CMsgSteamDatagramDataCenterState.Server.encode(message.server_sample[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.relay_sample != null && message.relay_sample.length)
                    for (var i = 0; i < message.relay_sample.length; ++i)
                        $root.CMsgSteamDatagramDataCenterState.Server.encode(message.relay_sample[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DataCenter message, length delimited. Does not implicitly {@link CMsgSteamDatagramDataCenterState.DataCenter.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {CMsgSteamDatagramDataCenterState.IDataCenter} message DataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataCenter.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DataCenter message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramDataCenterState.DataCenter} DataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataCenter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramDataCenterState.DataCenter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.string();
                        break;
                    case 2:
                        if (!(message.server_sample && message.server_sample.length))
                            message.server_sample = [];
                        message.server_sample.push($root.CMsgSteamDatagramDataCenterState.Server.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.relay_sample && message.relay_sample.length))
                            message.relay_sample = [];
                        message.relay_sample.push($root.CMsgSteamDatagramDataCenterState.Server.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DataCenter message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramDataCenterState.DataCenter} DataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataCenter.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DataCenter message.
             * @function verify
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DataCenter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isString(message.code))
                        return "code: string expected";
                if (message.server_sample != null && message.hasOwnProperty("server_sample")) {
                    if (!Array.isArray(message.server_sample))
                        return "server_sample: array expected";
                    for (var i = 0; i < message.server_sample.length; ++i) {
                        var error = $root.CMsgSteamDatagramDataCenterState.Server.verify(message.server_sample[i]);
                        if (error)
                            return "server_sample." + error;
                    }
                }
                if (message.relay_sample != null && message.hasOwnProperty("relay_sample")) {
                    if (!Array.isArray(message.relay_sample))
                        return "relay_sample: array expected";
                    for (var i = 0; i < message.relay_sample.length; ++i) {
                        var error = $root.CMsgSteamDatagramDataCenterState.Server.verify(message.relay_sample[i]);
                        if (error)
                            return "relay_sample." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a DataCenter message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramDataCenterState.DataCenter} DataCenter
             */
            DataCenter.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramDataCenterState.DataCenter)
                    return object;
                var message = new $root.CMsgSteamDatagramDataCenterState.DataCenter();
                if (object.code != null)
                    message.code = String(object.code);
                if (object.server_sample) {
                    if (!Array.isArray(object.server_sample))
                        throw TypeError(".CMsgSteamDatagramDataCenterState.DataCenter.server_sample: array expected");
                    message.server_sample = [];
                    for (var i = 0; i < object.server_sample.length; ++i) {
                        if (typeof object.server_sample[i] !== "object")
                            throw TypeError(".CMsgSteamDatagramDataCenterState.DataCenter.server_sample: object expected");
                        message.server_sample[i] = $root.CMsgSteamDatagramDataCenterState.Server.fromObject(object.server_sample[i]);
                    }
                }
                if (object.relay_sample) {
                    if (!Array.isArray(object.relay_sample))
                        throw TypeError(".CMsgSteamDatagramDataCenterState.DataCenter.relay_sample: array expected");
                    message.relay_sample = [];
                    for (var i = 0; i < object.relay_sample.length; ++i) {
                        if (typeof object.relay_sample[i] !== "object")
                            throw TypeError(".CMsgSteamDatagramDataCenterState.DataCenter.relay_sample: object expected");
                        message.relay_sample[i] = $root.CMsgSteamDatagramDataCenterState.Server.fromObject(object.relay_sample[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DataCenter message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @static
             * @param {CMsgSteamDatagramDataCenterState.DataCenter} message DataCenter
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DataCenter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.server_sample = [];
                    object.relay_sample = [];
                }
                if (options.defaults)
                    object.code = "";
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.server_sample && message.server_sample.length) {
                    object.server_sample = [];
                    for (var j = 0; j < message.server_sample.length; ++j)
                        object.server_sample[j] = $root.CMsgSteamDatagramDataCenterState.Server.toObject(message.server_sample[j], options);
                }
                if (message.relay_sample && message.relay_sample.length) {
                    object.relay_sample = [];
                    for (var j = 0; j < message.relay_sample.length; ++j)
                        object.relay_sample[j] = $root.CMsgSteamDatagramDataCenterState.Server.toObject(message.relay_sample[j], options);
                }
                return object;
            };
    
            /**
             * Converts this DataCenter to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramDataCenterState.DataCenter
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DataCenter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DataCenter;
        })();
    
        return CMsgSteamDatagramDataCenterState;
    })();
    
    $root.CMsgSteamDatagramRouterHealth = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramRouterHealth.
         * @exports ICMsgSteamDatagramRouterHealth
         * @interface ICMsgSteamDatagramRouterHealth
         * @property {number|null} [cpu_load] CMsgSteamDatagramRouterHealth cpu_load
         * @property {number|null} [cpu_load_raw] CMsgSteamDatagramRouterHealth cpu_load_raw
         * @property {number|null} [active_sessions] CMsgSteamDatagramRouterHealth active_sessions
         * @property {number|null} [data_pkts_sec] CMsgSteamDatagramRouterHealth data_pkts_sec
         * @property {number|null} [other_pkts_sec] CMsgSteamDatagramRouterHealth other_pkts_sec
         * @property {number|null} [seconds_until_shutdown] CMsgSteamDatagramRouterHealth seconds_until_shutdown
         * @property {number|null} [cpu_cost_per_user] CMsgSteamDatagramRouterHealth cpu_cost_per_user
         * @property {number|null} [cpu_cost_per_packet] CMsgSteamDatagramRouterHealth cpu_cost_per_packet
         * @property {Array.<CMsgSteamDatagramRouterHealth.IDataCenter>|null} [data_centers] CMsgSteamDatagramRouterHealth data_centers
         * @property {number|Long|null} [magic] CMsgSteamDatagramRouterHealth magic
         */
    
        /**
         * Constructs a new CMsgSteamDatagramRouterHealth.
         * @exports CMsgSteamDatagramRouterHealth
         * @classdesc Represents a CMsgSteamDatagramRouterHealth.
         * @implements ICMsgSteamDatagramRouterHealth
         * @constructor
         * @param {ICMsgSteamDatagramRouterHealth=} [properties] Properties to set
         */
        function CMsgSteamDatagramRouterHealth(properties) {
            this.data_centers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramRouterHealth cpu_load.
         * @member {number} cpu_load
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.cpu_load = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth cpu_load_raw.
         * @member {number} cpu_load_raw
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.cpu_load_raw = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth active_sessions.
         * @member {number} active_sessions
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.active_sessions = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth data_pkts_sec.
         * @member {number} data_pkts_sec
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.data_pkts_sec = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth other_pkts_sec.
         * @member {number} other_pkts_sec
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.other_pkts_sec = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth seconds_until_shutdown.
         * @member {number} seconds_until_shutdown
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.seconds_until_shutdown = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth cpu_cost_per_user.
         * @member {number} cpu_cost_per_user
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.cpu_cost_per_user = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth cpu_cost_per_packet.
         * @member {number} cpu_cost_per_packet
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.cpu_cost_per_packet = 0;
    
        /**
         * CMsgSteamDatagramRouterHealth data_centers.
         * @member {Array.<CMsgSteamDatagramRouterHealth.IDataCenter>} data_centers
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.data_centers = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterHealth magic.
         * @member {number|Long} magic
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         */
        CMsgSteamDatagramRouterHealth.prototype.magic = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramRouterHealth instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {ICMsgSteamDatagramRouterHealth=} [properties] Properties to set
         * @returns {CMsgSteamDatagramRouterHealth} CMsgSteamDatagramRouterHealth instance
         */
        CMsgSteamDatagramRouterHealth.create = function create(properties) {
            return new CMsgSteamDatagramRouterHealth(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRouterHealth message. Does not implicitly {@link CMsgSteamDatagramRouterHealth.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {ICMsgSteamDatagramRouterHealth} message CMsgSteamDatagramRouterHealth message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRouterHealth.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cpu_load != null && Object.hasOwnProperty.call(message, "cpu_load"))
                writer.uint32(/* id 1, wireType 5 =*/13).float(message.cpu_load);
            if (message.active_sessions != null && Object.hasOwnProperty.call(message, "active_sessions"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.active_sessions);
            if (message.data_pkts_sec != null && Object.hasOwnProperty.call(message, "data_pkts_sec"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.data_pkts_sec);
            if (message.other_pkts_sec != null && Object.hasOwnProperty.call(message, "other_pkts_sec"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.other_pkts_sec);
            if (message.seconds_until_shutdown != null && Object.hasOwnProperty.call(message, "seconds_until_shutdown"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seconds_until_shutdown);
            if (message.data_centers != null && message.data_centers.length)
                for (var i = 0; i < message.data_centers.length; ++i)
                    $root.CMsgSteamDatagramRouterHealth.DataCenter.encode(message.data_centers[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.magic != null && Object.hasOwnProperty.call(message, "magic"))
                writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.magic);
            if (message.cpu_cost_per_user != null && Object.hasOwnProperty.call(message, "cpu_cost_per_user"))
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.cpu_cost_per_user);
            if (message.cpu_cost_per_packet != null && Object.hasOwnProperty.call(message, "cpu_cost_per_packet"))
                writer.uint32(/* id 9, wireType 5 =*/77).float(message.cpu_cost_per_packet);
            if (message.cpu_load_raw != null && Object.hasOwnProperty.call(message, "cpu_load_raw"))
                writer.uint32(/* id 10, wireType 5 =*/85).float(message.cpu_load_raw);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRouterHealth message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterHealth.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {ICMsgSteamDatagramRouterHealth} message CMsgSteamDatagramRouterHealth message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRouterHealth.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramRouterHealth message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramRouterHealth} CMsgSteamDatagramRouterHealth
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRouterHealth.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterHealth();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cpu_load = reader.float();
                    break;
                case 10:
                    message.cpu_load_raw = reader.float();
                    break;
                case 2:
                    message.active_sessions = reader.uint32();
                    break;
                case 3:
                    message.data_pkts_sec = reader.uint32();
                    break;
                case 4:
                    message.other_pkts_sec = reader.uint32();
                    break;
                case 5:
                    message.seconds_until_shutdown = reader.uint32();
                    break;
                case 8:
                    message.cpu_cost_per_user = reader.float();
                    break;
                case 9:
                    message.cpu_cost_per_packet = reader.float();
                    break;
                case 6:
                    if (!(message.data_centers && message.data_centers.length))
                        message.data_centers = [];
                    message.data_centers.push($root.CMsgSteamDatagramRouterHealth.DataCenter.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.magic = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramRouterHealth message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramRouterHealth} CMsgSteamDatagramRouterHealth
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRouterHealth.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramRouterHealth message.
         * @function verify
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramRouterHealth.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cpu_load != null && message.hasOwnProperty("cpu_load"))
                if (typeof message.cpu_load !== "number")
                    return "cpu_load: number expected";
            if (message.cpu_load_raw != null && message.hasOwnProperty("cpu_load_raw"))
                if (typeof message.cpu_load_raw !== "number")
                    return "cpu_load_raw: number expected";
            if (message.active_sessions != null && message.hasOwnProperty("active_sessions"))
                if (!$util.isInteger(message.active_sessions))
                    return "active_sessions: integer expected";
            if (message.data_pkts_sec != null && message.hasOwnProperty("data_pkts_sec"))
                if (!$util.isInteger(message.data_pkts_sec))
                    return "data_pkts_sec: integer expected";
            if (message.other_pkts_sec != null && message.hasOwnProperty("other_pkts_sec"))
                if (!$util.isInteger(message.other_pkts_sec))
                    return "other_pkts_sec: integer expected";
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                if (!$util.isInteger(message.seconds_until_shutdown))
                    return "seconds_until_shutdown: integer expected";
            if (message.cpu_cost_per_user != null && message.hasOwnProperty("cpu_cost_per_user"))
                if (typeof message.cpu_cost_per_user !== "number")
                    return "cpu_cost_per_user: number expected";
            if (message.cpu_cost_per_packet != null && message.hasOwnProperty("cpu_cost_per_packet"))
                if (typeof message.cpu_cost_per_packet !== "number")
                    return "cpu_cost_per_packet: number expected";
            if (message.data_centers != null && message.hasOwnProperty("data_centers")) {
                if (!Array.isArray(message.data_centers))
                    return "data_centers: array expected";
                for (var i = 0; i < message.data_centers.length; ++i) {
                    var error = $root.CMsgSteamDatagramRouterHealth.DataCenter.verify(message.data_centers[i]);
                    if (error)
                        return "data_centers." + error;
                }
            }
            if (message.magic != null && message.hasOwnProperty("magic"))
                if (!$util.isInteger(message.magic) && !(message.magic && $util.isInteger(message.magic.low) && $util.isInteger(message.magic.high)))
                    return "magic: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramRouterHealth message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramRouterHealth} CMsgSteamDatagramRouterHealth
         */
        CMsgSteamDatagramRouterHealth.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramRouterHealth)
                return object;
            var message = new $root.CMsgSteamDatagramRouterHealth();
            if (object.cpu_load != null)
                message.cpu_load = Number(object.cpu_load);
            if (object.cpu_load_raw != null)
                message.cpu_load_raw = Number(object.cpu_load_raw);
            if (object.active_sessions != null)
                message.active_sessions = object.active_sessions >>> 0;
            if (object.data_pkts_sec != null)
                message.data_pkts_sec = object.data_pkts_sec >>> 0;
            if (object.other_pkts_sec != null)
                message.other_pkts_sec = object.other_pkts_sec >>> 0;
            if (object.seconds_until_shutdown != null)
                message.seconds_until_shutdown = object.seconds_until_shutdown >>> 0;
            if (object.cpu_cost_per_user != null)
                message.cpu_cost_per_user = Number(object.cpu_cost_per_user);
            if (object.cpu_cost_per_packet != null)
                message.cpu_cost_per_packet = Number(object.cpu_cost_per_packet);
            if (object.data_centers) {
                if (!Array.isArray(object.data_centers))
                    throw TypeError(".CMsgSteamDatagramRouterHealth.data_centers: array expected");
                message.data_centers = [];
                for (var i = 0; i < object.data_centers.length; ++i) {
                    if (typeof object.data_centers[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramRouterHealth.data_centers: object expected");
                    message.data_centers[i] = $root.CMsgSteamDatagramRouterHealth.DataCenter.fromObject(object.data_centers[i]);
                }
            }
            if (object.magic != null)
                if ($util.Long)
                    (message.magic = $util.Long.fromValue(object.magic)).unsigned = false;
                else if (typeof object.magic === "string")
                    message.magic = parseInt(object.magic, 10);
                else if (typeof object.magic === "number")
                    message.magic = object.magic;
                else if (typeof object.magic === "object")
                    message.magic = new $util.LongBits(object.magic.low >>> 0, object.magic.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramRouterHealth message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramRouterHealth
         * @static
         * @param {CMsgSteamDatagramRouterHealth} message CMsgSteamDatagramRouterHealth
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramRouterHealth.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data_centers = [];
            if (options.defaults) {
                object.cpu_load = 0;
                object.active_sessions = 0;
                object.data_pkts_sec = 0;
                object.other_pkts_sec = 0;
                object.seconds_until_shutdown = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.magic = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.magic = options.longs === String ? "0" : 0;
                object.cpu_cost_per_user = 0;
                object.cpu_cost_per_packet = 0;
                object.cpu_load_raw = 0;
            }
            if (message.cpu_load != null && message.hasOwnProperty("cpu_load"))
                object.cpu_load = options.json && !isFinite(message.cpu_load) ? String(message.cpu_load) : message.cpu_load;
            if (message.active_sessions != null && message.hasOwnProperty("active_sessions"))
                object.active_sessions = message.active_sessions;
            if (message.data_pkts_sec != null && message.hasOwnProperty("data_pkts_sec"))
                object.data_pkts_sec = message.data_pkts_sec;
            if (message.other_pkts_sec != null && message.hasOwnProperty("other_pkts_sec"))
                object.other_pkts_sec = message.other_pkts_sec;
            if (message.seconds_until_shutdown != null && message.hasOwnProperty("seconds_until_shutdown"))
                object.seconds_until_shutdown = message.seconds_until_shutdown;
            if (message.data_centers && message.data_centers.length) {
                object.data_centers = [];
                for (var j = 0; j < message.data_centers.length; ++j)
                    object.data_centers[j] = $root.CMsgSteamDatagramRouterHealth.DataCenter.toObject(message.data_centers[j], options);
            }
            if (message.magic != null && message.hasOwnProperty("magic"))
                if (typeof message.magic === "number")
                    object.magic = options.longs === String ? String(message.magic) : message.magic;
                else
                    object.magic = options.longs === String ? $util.Long.prototype.toString.call(message.magic) : options.longs === Number ? new $util.LongBits(message.magic.low >>> 0, message.magic.high >>> 0).toNumber() : message.magic;
            if (message.cpu_cost_per_user != null && message.hasOwnProperty("cpu_cost_per_user"))
                object.cpu_cost_per_user = options.json && !isFinite(message.cpu_cost_per_user) ? String(message.cpu_cost_per_user) : message.cpu_cost_per_user;
            if (message.cpu_cost_per_packet != null && message.hasOwnProperty("cpu_cost_per_packet"))
                object.cpu_cost_per_packet = options.json && !isFinite(message.cpu_cost_per_packet) ? String(message.cpu_cost_per_packet) : message.cpu_cost_per_packet;
            if (message.cpu_load_raw != null && message.hasOwnProperty("cpu_load_raw"))
                object.cpu_load_raw = options.json && !isFinite(message.cpu_load_raw) ? String(message.cpu_load_raw) : message.cpu_load_raw;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramRouterHealth to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramRouterHealth
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramRouterHealth.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamDatagramRouterHealth.DataCenter = (function() {
    
            /**
             * Properties of a DataCenter.
             * @memberof CMsgSteamDatagramRouterHealth
             * @interface IDataCenter
             * @property {number|null} [datacenter_id] DataCenter datacenter_id
             * @property {number|null} [state] DataCenter state
             * @property {Array.<ICMsgSteamDatagramGameServerSample>|null} [servers] DataCenter servers
             */
    
            /**
             * Constructs a new DataCenter.
             * @memberof CMsgSteamDatagramRouterHealth
             * @classdesc Represents a DataCenter.
             * @implements IDataCenter
             * @constructor
             * @param {CMsgSteamDatagramRouterHealth.IDataCenter=} [properties] Properties to set
             */
            function DataCenter(properties) {
                this.servers = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DataCenter datacenter_id.
             * @member {number} datacenter_id
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @instance
             */
            DataCenter.prototype.datacenter_id = 0;
    
            /**
             * DataCenter state.
             * @member {number} state
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @instance
             */
            DataCenter.prototype.state = 0;
    
            /**
             * DataCenter servers.
             * @member {Array.<ICMsgSteamDatagramGameServerSample>} servers
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @instance
             */
            DataCenter.prototype.servers = $util.emptyArray;
    
            /**
             * Creates a new DataCenter instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {CMsgSteamDatagramRouterHealth.IDataCenter=} [properties] Properties to set
             * @returns {CMsgSteamDatagramRouterHealth.DataCenter} DataCenter instance
             */
            DataCenter.create = function create(properties) {
                return new DataCenter(properties);
            };
    
            /**
             * Encodes the specified DataCenter message. Does not implicitly {@link CMsgSteamDatagramRouterHealth.DataCenter.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {CMsgSteamDatagramRouterHealth.IDataCenter} message DataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataCenter.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.datacenter_id != null && Object.hasOwnProperty.call(message, "datacenter_id"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.datacenter_id);
                if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.state);
                if (message.servers != null && message.servers.length)
                    for (var i = 0; i < message.servers.length; ++i)
                        $root.CMsgSteamDatagramGameServerSample.encode(message.servers[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified DataCenter message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterHealth.DataCenter.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {CMsgSteamDatagramRouterHealth.IDataCenter} message DataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataCenter.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DataCenter message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramRouterHealth.DataCenter} DataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataCenter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterHealth.DataCenter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.datacenter_id = reader.fixed32();
                        break;
                    case 2:
                        message.state = reader.uint32();
                        break;
                    case 3:
                        if (!(message.servers && message.servers.length))
                            message.servers = [];
                        message.servers.push($root.CMsgSteamDatagramGameServerSample.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DataCenter message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramRouterHealth.DataCenter} DataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataCenter.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DataCenter message.
             * @function verify
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DataCenter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.datacenter_id != null && message.hasOwnProperty("datacenter_id"))
                    if (!$util.isInteger(message.datacenter_id))
                        return "datacenter_id: integer expected";
                if (message.state != null && message.hasOwnProperty("state"))
                    if (!$util.isInteger(message.state))
                        return "state: integer expected";
                if (message.servers != null && message.hasOwnProperty("servers")) {
                    if (!Array.isArray(message.servers))
                        return "servers: array expected";
                    for (var i = 0; i < message.servers.length; ++i) {
                        var error = $root.CMsgSteamDatagramGameServerSample.verify(message.servers[i]);
                        if (error)
                            return "servers." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a DataCenter message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramRouterHealth.DataCenter} DataCenter
             */
            DataCenter.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramRouterHealth.DataCenter)
                    return object;
                var message = new $root.CMsgSteamDatagramRouterHealth.DataCenter();
                if (object.datacenter_id != null)
                    message.datacenter_id = object.datacenter_id >>> 0;
                if (object.state != null)
                    message.state = object.state >>> 0;
                if (object.servers) {
                    if (!Array.isArray(object.servers))
                        throw TypeError(".CMsgSteamDatagramRouterHealth.DataCenter.servers: array expected");
                    message.servers = [];
                    for (var i = 0; i < object.servers.length; ++i) {
                        if (typeof object.servers[i] !== "object")
                            throw TypeError(".CMsgSteamDatagramRouterHealth.DataCenter.servers: object expected");
                        message.servers[i] = $root.CMsgSteamDatagramGameServerSample.fromObject(object.servers[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a DataCenter message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @static
             * @param {CMsgSteamDatagramRouterHealth.DataCenter} message DataCenter
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DataCenter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.servers = [];
                if (options.defaults) {
                    object.datacenter_id = 0;
                    object.state = 0;
                }
                if (message.datacenter_id != null && message.hasOwnProperty("datacenter_id"))
                    object.datacenter_id = message.datacenter_id;
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = message.state;
                if (message.servers && message.servers.length) {
                    object.servers = [];
                    for (var j = 0; j < message.servers.length; ++j)
                        object.servers[j] = $root.CMsgSteamDatagramGameServerSample.toObject(message.servers[j], options);
                }
                return object;
            };
    
            /**
             * Converts this DataCenter to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramRouterHealth.DataCenter
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DataCenter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DataCenter;
        })();
    
        return CMsgSteamDatagramRouterHealth;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsP2PRouterToRouter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsP2PRouterToRouter.
         * @exports ICMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @interface ICMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_relay] CMsgSteamDatagramConnectionStatsP2PRouterToRouter quality_relay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [quality_e2e] CMsgSteamDatagramConnectionStatsP2PRouterToRouter quality_e2e
         * @property {Array.<number>|null} [ack_relay] CMsgSteamDatagramConnectionStatsP2PRouterToRouter ack_relay
         * @property {Array.<number>|null} [legacy_ack_e2e] CMsgSteamDatagramConnectionStatsP2PRouterToRouter legacy_ack_e2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsP2PRouterToRouter flags
         * @property {number|null} [ack_forward_target_revision] CMsgSteamDatagramConnectionStatsP2PRouterToRouter ack_forward_target_revision
         * @property {Uint8Array|null} [routes] CMsgSteamDatagramConnectionStatsP2PRouterToRouter routes
         * @property {number|null} [ack_peer_routes_revision] CMsgSteamDatagramConnectionStatsP2PRouterToRouter ack_peer_routes_revision
         * @property {number|null} [from_connection_id] CMsgSteamDatagramConnectionStatsP2PRouterToRouter from_connection_id
         * @property {number|null} [to_connection_id] CMsgSteamDatagramConnectionStatsP2PRouterToRouter to_connection_id
         * @property {number|null} [from_relay_session_id] CMsgSteamDatagramConnectionStatsP2PRouterToRouter from_relay_session_id
         * @property {number|null} [seq_num_nonce] CMsgSteamDatagramConnectionStatsP2PRouterToRouter seq_num_nonce
         * @property {number|null} [to_relay_session_id] CMsgSteamDatagramConnectionStatsP2PRouterToRouter to_relay_session_id
         * @property {number|null} [seq_num_r2r] CMsgSteamDatagramConnectionStatsP2PRouterToRouter seq_num_r2r
         * @property {number|null} [seq_num_e2e] CMsgSteamDatagramConnectionStatsP2PRouterToRouter seq_num_e2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsP2PRouterToRouter.
         * @exports CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsP2PRouterToRouter.
         * @implements ICMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToRouter=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsP2PRouterToRouter(properties) {
            this.ack_relay = [];
            this.legacy_ack_e2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter quality_relay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_relay
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.quality_relay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter quality_e2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} quality_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.quality_e2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter ack_relay.
         * @member {Array.<number>} ack_relay
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.ack_relay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter legacy_ack_e2e.
         * @member {Array.<number>} legacy_ack_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.legacy_ack_e2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter ack_forward_target_revision.
         * @member {number} ack_forward_target_revision
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.ack_forward_target_revision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter routes.
         * @member {Uint8Array} routes
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.routes = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter ack_peer_routes_revision.
         * @member {number} ack_peer_routes_revision
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.ack_peer_routes_revision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter from_connection_id.
         * @member {number} from_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.from_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter to_connection_id.
         * @member {number} to_connection_id
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.to_connection_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter from_relay_session_id.
         * @member {number} from_relay_session_id
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.from_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter seq_num_nonce.
         * @member {number} seq_num_nonce
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.seq_num_nonce = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter to_relay_session_id.
         * @member {number} to_relay_session_id
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.to_relay_session_id = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter seq_num_r2r.
         * @member {number} seq_num_r2r
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.seq_num_r2r = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToRouter seq_num_e2e.
         * @member {number} seq_num_e2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.seq_num_e2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsP2PRouterToRouter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToRouter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToRouter} CMsgSteamDatagramConnectionStatsP2PRouterToRouter instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsP2PRouterToRouter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PRouterToRouter message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PRouterToRouter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToRouter} message CMsgSteamDatagramConnectionStatsP2PRouterToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quality_relay != null && Object.hasOwnProperty.call(message, "quality_relay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_relay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.quality_e2e != null && Object.hasOwnProperty.call(message, "quality_e2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.quality_e2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ack_relay != null && message.ack_relay.length)
                for (var i = 0; i < message.ack_relay.length; ++i)
                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.ack_relay[i]);
            if (message.legacy_ack_e2e != null && message.legacy_ack_e2e.length)
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.legacy_ack_e2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.flags);
            if (message.ack_forward_target_revision != null && Object.hasOwnProperty.call(message, "ack_forward_target_revision"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ack_forward_target_revision);
            if (message.routes != null && Object.hasOwnProperty.call(message, "routes"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.routes);
            if (message.ack_peer_routes_revision != null && Object.hasOwnProperty.call(message, "ack_peer_routes_revision"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.ack_peer_routes_revision);
            if (message.from_connection_id != null && Object.hasOwnProperty.call(message, "from_connection_id"))
                writer.uint32(/* id 21, wireType 5 =*/173).fixed32(message.from_connection_id);
            if (message.from_relay_session_id != null && Object.hasOwnProperty.call(message, "from_relay_session_id"))
                writer.uint32(/* id 22, wireType 5 =*/181).fixed32(message.from_relay_session_id);
            if (message.to_connection_id != null && Object.hasOwnProperty.call(message, "to_connection_id"))
                writer.uint32(/* id 24, wireType 5 =*/197).fixed32(message.to_connection_id);
            if (message.to_relay_session_id != null && Object.hasOwnProperty.call(message, "to_relay_session_id"))
                writer.uint32(/* id 25, wireType 5 =*/205).fixed32(message.to_relay_session_id);
            if (message.seq_num_r2r != null && Object.hasOwnProperty.call(message, "seq_num_r2r"))
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.seq_num_r2r);
            if (message.seq_num_e2e != null && Object.hasOwnProperty.call(message, "seq_num_e2e"))
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.seq_num_e2e);
            if (message.seq_num_nonce != null && Object.hasOwnProperty.call(message, "seq_num_nonce"))
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.seq_num_nonce);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PRouterToRouter message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PRouterToRouter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToRouter} message CMsgSteamDatagramConnectionStatsP2PRouterToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PRouterToRouter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToRouter} CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsP2PRouterToRouter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.ack_relay && message.ack_relay.length))
                        message.ack_relay = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ack_relay.push(reader.fixed32());
                    } else
                        message.ack_relay.push(reader.fixed32());
                    break;
                case 4:
                    if (!(message.legacy_ack_e2e && message.legacy_ack_e2e.length))
                        message.legacy_ack_e2e = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_ack_e2e.push(reader.fixed32());
                    } else
                        message.legacy_ack_e2e.push(reader.fixed32());
                    break;
                case 5:
                    message.flags = reader.uint32();
                    break;
                case 6:
                    message.ack_forward_target_revision = reader.uint32();
                    break;
                case 7:
                    message.routes = reader.bytes();
                    break;
                case 8:
                    message.ack_peer_routes_revision = reader.uint32();
                    break;
                case 21:
                    message.from_connection_id = reader.fixed32();
                    break;
                case 24:
                    message.to_connection_id = reader.fixed32();
                    break;
                case 22:
                    message.from_relay_session_id = reader.fixed32();
                    break;
                case 28:
                    message.seq_num_nonce = reader.uint32();
                    break;
                case 25:
                    message.to_relay_session_id = reader.fixed32();
                    break;
                case 26:
                    message.seq_num_r2r = reader.uint32();
                    break;
                case 27:
                    message.seq_num_e2e = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PRouterToRouter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToRouter} CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsP2PRouterToRouter message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_relay);
                if (error)
                    return "quality_relay." + error;
            }
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.quality_e2e);
                if (error)
                    return "quality_e2e." + error;
            }
            if (message.ack_relay != null && message.hasOwnProperty("ack_relay")) {
                if (!Array.isArray(message.ack_relay))
                    return "ack_relay: array expected";
                for (var i = 0; i < message.ack_relay.length; ++i)
                    if (!$util.isInteger(message.ack_relay[i]))
                        return "ack_relay: integer[] expected";
            }
            if (message.legacy_ack_e2e != null && message.hasOwnProperty("legacy_ack_e2e")) {
                if (!Array.isArray(message.legacy_ack_e2e))
                    return "legacy_ack_e2e: array expected";
                for (var i = 0; i < message.legacy_ack_e2e.length; ++i)
                    if (!$util.isInteger(message.legacy_ack_e2e[i]))
                        return "legacy_ack_e2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.ack_forward_target_revision != null && message.hasOwnProperty("ack_forward_target_revision"))
                if (!$util.isInteger(message.ack_forward_target_revision))
                    return "ack_forward_target_revision: integer expected";
            if (message.routes != null && message.hasOwnProperty("routes"))
                if (!(message.routes && typeof message.routes.length === "number" || $util.isString(message.routes)))
                    return "routes: buffer expected";
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                if (!$util.isInteger(message.ack_peer_routes_revision))
                    return "ack_peer_routes_revision: integer expected";
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                if (!$util.isInteger(message.from_connection_id))
                    return "from_connection_id: integer expected";
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                if (!$util.isInteger(message.to_connection_id))
                    return "to_connection_id: integer expected";
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                if (!$util.isInteger(message.from_relay_session_id))
                    return "from_relay_session_id: integer expected";
            if (message.seq_num_nonce != null && message.hasOwnProperty("seq_num_nonce"))
                if (!$util.isInteger(message.seq_num_nonce))
                    return "seq_num_nonce: integer expected";
            if (message.to_relay_session_id != null && message.hasOwnProperty("to_relay_session_id"))
                if (!$util.isInteger(message.to_relay_session_id))
                    return "to_relay_session_id: integer expected";
            if (message.seq_num_r2r != null && message.hasOwnProperty("seq_num_r2r"))
                if (!$util.isInteger(message.seq_num_r2r))
                    return "seq_num_r2r: integer expected";
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                if (!$util.isInteger(message.seq_num_e2e))
                    return "seq_num_e2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsP2PRouterToRouter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToRouter} CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsP2PRouterToRouter();
            if (object.quality_relay != null) {
                if (typeof object.quality_relay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_relay: object expected");
                message.quality_relay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_relay);
            }
            if (object.quality_e2e != null) {
                if (typeof object.quality_e2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_e2e: object expected");
                message.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.quality_e2e);
            }
            if (object.ack_relay) {
                if (!Array.isArray(object.ack_relay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_relay: array expected");
                message.ack_relay = [];
                for (var i = 0; i < object.ack_relay.length; ++i)
                    message.ack_relay[i] = object.ack_relay[i] >>> 0;
            }
            if (object.legacy_ack_e2e) {
                if (!Array.isArray(object.legacy_ack_e2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToRouter.legacy_ack_e2e: array expected");
                message.legacy_ack_e2e = [];
                for (var i = 0; i < object.legacy_ack_e2e.length; ++i)
                    message.legacy_ack_e2e[i] = object.legacy_ack_e2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.ack_forward_target_revision != null)
                message.ack_forward_target_revision = object.ack_forward_target_revision >>> 0;
            if (object.routes != null)
                if (typeof object.routes === "string")
                    $util.base64.decode(object.routes, message.routes = $util.newBuffer($util.base64.length(object.routes)), 0);
                else if (object.routes.length)
                    message.routes = object.routes;
            if (object.ack_peer_routes_revision != null)
                message.ack_peer_routes_revision = object.ack_peer_routes_revision >>> 0;
            if (object.from_connection_id != null)
                message.from_connection_id = object.from_connection_id >>> 0;
            if (object.to_connection_id != null)
                message.to_connection_id = object.to_connection_id >>> 0;
            if (object.from_relay_session_id != null)
                message.from_relay_session_id = object.from_relay_session_id >>> 0;
            if (object.seq_num_nonce != null)
                message.seq_num_nonce = object.seq_num_nonce >>> 0;
            if (object.to_relay_session_id != null)
                message.to_relay_session_id = object.to_relay_session_id >>> 0;
            if (object.seq_num_r2r != null)
                message.seq_num_r2r = object.seq_num_r2r >>> 0;
            if (object.seq_num_e2e != null)
                message.seq_num_e2e = object.seq_num_e2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsP2PRouterToRouter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @static
         * @param {CMsgSteamDatagramConnectionStatsP2PRouterToRouter} message CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ack_relay = [];
                object.legacy_ack_e2e = [];
            }
            if (options.defaults) {
                object.quality_relay = null;
                object.quality_e2e = null;
                object.flags = 0;
                object.ack_forward_target_revision = 0;
                if (options.bytes === String)
                    object.routes = "";
                else {
                    object.routes = [];
                    if (options.bytes !== Array)
                        object.routes = $util.newBuffer(object.routes);
                }
                object.ack_peer_routes_revision = 0;
                object.from_connection_id = 0;
                object.from_relay_session_id = 0;
                object.to_connection_id = 0;
                object.to_relay_session_id = 0;
                object.seq_num_r2r = 0;
                object.seq_num_e2e = 0;
                object.seq_num_nonce = 0;
            }
            if (message.quality_relay != null && message.hasOwnProperty("quality_relay"))
                object.quality_relay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_relay, options);
            if (message.quality_e2e != null && message.hasOwnProperty("quality_e2e"))
                object.quality_e2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.quality_e2e, options);
            if (message.ack_relay && message.ack_relay.length) {
                object.ack_relay = [];
                for (var j = 0; j < message.ack_relay.length; ++j)
                    object.ack_relay[j] = message.ack_relay[j];
            }
            if (message.legacy_ack_e2e && message.legacy_ack_e2e.length) {
                object.legacy_ack_e2e = [];
                for (var j = 0; j < message.legacy_ack_e2e.length; ++j)
                    object.legacy_ack_e2e[j] = message.legacy_ack_e2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.ack_forward_target_revision != null && message.hasOwnProperty("ack_forward_target_revision"))
                object.ack_forward_target_revision = message.ack_forward_target_revision;
            if (message.routes != null && message.hasOwnProperty("routes"))
                object.routes = options.bytes === String ? $util.base64.encode(message.routes, 0, message.routes.length) : options.bytes === Array ? Array.prototype.slice.call(message.routes) : message.routes;
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                object.ack_peer_routes_revision = message.ack_peer_routes_revision;
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                object.from_connection_id = message.from_connection_id;
            if (message.from_relay_session_id != null && message.hasOwnProperty("from_relay_session_id"))
                object.from_relay_session_id = message.from_relay_session_id;
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                object.to_connection_id = message.to_connection_id;
            if (message.to_relay_session_id != null && message.hasOwnProperty("to_relay_session_id"))
                object.to_relay_session_id = message.to_relay_session_id;
            if (message.seq_num_r2r != null && message.hasOwnProperty("seq_num_r2r"))
                object.seq_num_r2r = message.seq_num_r2r;
            if (message.seq_num_e2e != null && message.hasOwnProperty("seq_num_e2e"))
                object.seq_num_e2e = message.seq_num_e2e;
            if (message.seq_num_nonce != null && message.hasOwnProperty("seq_num_nonce"))
                object.seq_num_nonce = message.seq_num_nonce;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsP2PRouterToRouter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToRouter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsP2PRouterToRouter.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         * @property {number} NOT_PRIMARY_TRANSPORT_E2E=16 NOT_PRIMARY_TRANSPORT_E2E value
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToRouter.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            values[valuesById[16] = "NOT_PRIMARY_TRANSPORT_E2E"] = 16;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsP2PRouterToRouter;
    })();
    
    $root.CMsgSteamDatagramNetworkNextRouterPingRequestExtraData = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.
         * @exports ICMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @interface ICMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @property {string|null} [client_id] CMsgSteamDatagramNetworkNextRouterPingRequestExtraData client_id
         * @property {number|null} [app_id] CMsgSteamDatagramNetworkNextRouterPingRequestExtraData app_id
         * @property {number|null} [protocol_ver] CMsgSteamDatagramNetworkNextRouterPingRequestExtraData protocol_ver
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.
         * @exports CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @classdesc Represents a CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.
         * @implements ICMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @constructor
         * @param {ICMsgSteamDatagramNetworkNextRouterPingRequestExtraData=} [properties] Properties to set
         */
        function CMsgSteamDatagramNetworkNextRouterPingRequestExtraData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramNetworkNextRouterPingRequestExtraData client_id.
         * @member {string} client_id
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @instance
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.prototype.client_id = "";
    
        /**
         * CMsgSteamDatagramNetworkNextRouterPingRequestExtraData app_id.
         * @member {number} app_id
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @instance
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.prototype.app_id = 0;
    
        /**
         * CMsgSteamDatagramNetworkNextRouterPingRequestExtraData protocol_ver.
         * @member {number} protocol_ver
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @instance
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.prototype.protocol_ver = 0;
    
        /**
         * Creates a new CMsgSteamDatagramNetworkNextRouterPingRequestExtraData instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {ICMsgSteamDatagramNetworkNextRouterPingRequestExtraData=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNetworkNextRouterPingRequestExtraData} CMsgSteamDatagramNetworkNextRouterPingRequestExtraData instance
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.create = function create(properties) {
            return new CMsgSteamDatagramNetworkNextRouterPingRequestExtraData(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message. Does not implicitly {@link CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {ICMsgSteamDatagramNetworkNextRouterPingRequestExtraData} message CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.client_id);
            if (message.app_id != null && Object.hasOwnProperty.call(message, "app_id"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.app_id);
            if (message.protocol_ver != null && Object.hasOwnProperty.call(message, "protocol_ver"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.protocol_ver);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message, length delimited. Does not implicitly {@link CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {ICMsgSteamDatagramNetworkNextRouterPingRequestExtraData} message CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNetworkNextRouterPingRequestExtraData} CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNetworkNextRouterPingRequestExtraData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    message.client_id = reader.string();
                    break;
                case 4:
                    message.app_id = reader.uint32();
                    break;
                case 5:
                    message.protocol_ver = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNetworkNextRouterPingRequestExtraData} CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message.
         * @function verify
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                if (!$util.isString(message.client_id))
                    return "client_id: string expected";
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                if (!$util.isInteger(message.app_id))
                    return "app_id: integer expected";
            if (message.protocol_ver != null && message.hasOwnProperty("protocol_ver"))
                if (!$util.isInteger(message.protocol_ver))
                    return "protocol_ver: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNetworkNextRouterPingRequestExtraData} CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNetworkNextRouterPingRequestExtraData)
                return object;
            var message = new $root.CMsgSteamDatagramNetworkNextRouterPingRequestExtraData();
            if (object.client_id != null)
                message.client_id = String(object.client_id);
            if (object.app_id != null)
                message.app_id = object.app_id >>> 0;
            if (object.protocol_ver != null)
                message.protocol_ver = object.protocol_ver >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNetworkNextRouterPingRequestExtraData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @static
         * @param {CMsgSteamDatagramNetworkNextRouterPingRequestExtraData} message CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.client_id = "";
                object.app_id = 0;
                object.protocol_ver = 0;
            }
            if (message.client_id != null && message.hasOwnProperty("client_id"))
                object.client_id = message.client_id;
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                object.app_id = message.app_id;
            if (message.protocol_ver != null && message.hasOwnProperty("protocol_ver"))
                object.protocol_ver = message.protocol_ver;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramNetworkNextRouterPingRequestExtraData to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNetworkNextRouterPingRequestExtraData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNetworkNextRouterPingRequestExtraData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramNetworkNextRouterPingRequestExtraData;
    })();
    
    $root.CMsgSteamDatagramNetworkNextRouterPingReplyExtraData = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.
         * @exports ICMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @interface ICMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.
         * @exports CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @classdesc Represents a CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.
         * @implements ICMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @constructor
         * @param {ICMsgSteamDatagramNetworkNextRouterPingReplyExtraData=} [properties] Properties to set
         */
        function CMsgSteamDatagramNetworkNextRouterPingReplyExtraData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CMsgSteamDatagramNetworkNextRouterPingReplyExtraData instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {ICMsgSteamDatagramNetworkNextRouterPingReplyExtraData=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNetworkNextRouterPingReplyExtraData} CMsgSteamDatagramNetworkNextRouterPingReplyExtraData instance
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.create = function create(properties) {
            return new CMsgSteamDatagramNetworkNextRouterPingReplyExtraData(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message. Does not implicitly {@link CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {ICMsgSteamDatagramNetworkNextRouterPingReplyExtraData} message CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message, length delimited. Does not implicitly {@link CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {ICMsgSteamDatagramNetworkNextRouterPingReplyExtraData} message CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNetworkNextRouterPingReplyExtraData} CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNetworkNextRouterPingReplyExtraData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNetworkNextRouterPingReplyExtraData} CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message.
         * @function verify
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNetworkNextRouterPingReplyExtraData} CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNetworkNextRouterPingReplyExtraData)
                return object;
            return new $root.CMsgSteamDatagramNetworkNextRouterPingReplyExtraData();
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNetworkNextRouterPingReplyExtraData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @static
         * @param {CMsgSteamDatagramNetworkNextRouterPingReplyExtraData} message CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CMsgSteamDatagramNetworkNextRouterPingReplyExtraData to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNetworkNextRouterPingReplyExtraData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNetworkNextRouterPingReplyExtraData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramNetworkNextRouterPingReplyExtraData;
    })();
    
    $root.CMsgSteamNetworkingIdentityLegacyBinary = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingIdentityLegacyBinary.
         * @exports ICMsgSteamNetworkingIdentityLegacyBinary
         * @interface ICMsgSteamNetworkingIdentityLegacyBinary
         * @property {number|Long|null} [steam_id] CMsgSteamNetworkingIdentityLegacyBinary steam_id
         * @property {string|null} [xbox_pairwise_id] CMsgSteamNetworkingIdentityLegacyBinary xbox_pairwise_id
         * @property {Uint8Array|null} [generic_bytes] CMsgSteamNetworkingIdentityLegacyBinary generic_bytes
         * @property {string|null} [generic_string] CMsgSteamNetworkingIdentityLegacyBinary generic_string
         * @property {Uint8Array|null} [ipv6_and_port] CMsgSteamNetworkingIdentityLegacyBinary ipv6_and_port
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingIdentityLegacyBinary.
         * @exports CMsgSteamNetworkingIdentityLegacyBinary
         * @classdesc Represents a CMsgSteamNetworkingIdentityLegacyBinary.
         * @implements ICMsgSteamNetworkingIdentityLegacyBinary
         * @constructor
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary=} [properties] Properties to set
         */
        function CMsgSteamNetworkingIdentityLegacyBinary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary steam_id.
         * @member {number|Long} steam_id
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary xbox_pairwise_id.
         * @member {string} xbox_pairwise_id
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.xbox_pairwise_id = "";
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary generic_bytes.
         * @member {Uint8Array} generic_bytes
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.generic_bytes = $util.newBuffer([]);
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary generic_string.
         * @member {string} generic_string
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.generic_string = "";
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary ipv6_and_port.
         * @member {Uint8Array} ipv6_and_port
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.ipv6_and_port = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamNetworkingIdentityLegacyBinary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.create = function create(properties) {
            return new CMsgSteamNetworkingIdentityLegacyBinary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingIdentityLegacyBinary message. Does not implicitly {@link CMsgSteamNetworkingIdentityLegacyBinary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary} message CMsgSteamNetworkingIdentityLegacyBinary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingIdentityLegacyBinary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.generic_bytes != null && Object.hasOwnProperty.call(message, "generic_bytes"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.generic_bytes);
            if (message.generic_string != null && Object.hasOwnProperty.call(message, "generic_string"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.generic_string);
            if (message.ipv6_and_port != null && Object.hasOwnProperty.call(message, "ipv6_and_port"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.ipv6_and_port);
            if (message.steam_id != null && Object.hasOwnProperty.call(message, "steam_id"))
                writer.uint32(/* id 16, wireType 1 =*/129).fixed64(message.steam_id);
            if (message.xbox_pairwise_id != null && Object.hasOwnProperty.call(message, "xbox_pairwise_id"))
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.xbox_pairwise_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingIdentityLegacyBinary message, length delimited. Does not implicitly {@link CMsgSteamNetworkingIdentityLegacyBinary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary} message CMsgSteamNetworkingIdentityLegacyBinary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingIdentityLegacyBinary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingIdentityLegacyBinary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingIdentityLegacyBinary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingIdentityLegacyBinary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 16:
                    message.steam_id = reader.fixed64();
                    break;
                case 17:
                    message.xbox_pairwise_id = reader.string();
                    break;
                case 2:
                    message.generic_bytes = reader.bytes();
                    break;
                case 3:
                    message.generic_string = reader.string();
                    break;
                case 4:
                    message.ipv6_and_port = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingIdentityLegacyBinary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingIdentityLegacyBinary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingIdentityLegacyBinary message.
         * @function verify
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingIdentityLegacyBinary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (!$util.isInteger(message.steam_id) && !(message.steam_id && $util.isInteger(message.steam_id.low) && $util.isInteger(message.steam_id.high)))
                    return "steam_id: integer|Long expected";
            if (message.xbox_pairwise_id != null && message.hasOwnProperty("xbox_pairwise_id"))
                if (!$util.isString(message.xbox_pairwise_id))
                    return "xbox_pairwise_id: string expected";
            if (message.generic_bytes != null && message.hasOwnProperty("generic_bytes"))
                if (!(message.generic_bytes && typeof message.generic_bytes.length === "number" || $util.isString(message.generic_bytes)))
                    return "generic_bytes: buffer expected";
            if (message.generic_string != null && message.hasOwnProperty("generic_string"))
                if (!$util.isString(message.generic_string))
                    return "generic_string: string expected";
            if (message.ipv6_and_port != null && message.hasOwnProperty("ipv6_and_port"))
                if (!(message.ipv6_and_port && typeof message.ipv6_and_port.length === "number" || $util.isString(message.ipv6_and_port)))
                    return "ipv6_and_port: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingIdentityLegacyBinary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary
         */
        CMsgSteamNetworkingIdentityLegacyBinary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingIdentityLegacyBinary)
                return object;
            var message = new $root.CMsgSteamNetworkingIdentityLegacyBinary();
            if (object.steam_id != null)
                if ($util.Long)
                    (message.steam_id = $util.Long.fromValue(object.steam_id)).unsigned = false;
                else if (typeof object.steam_id === "string")
                    message.steam_id = parseInt(object.steam_id, 10);
                else if (typeof object.steam_id === "number")
                    message.steam_id = object.steam_id;
                else if (typeof object.steam_id === "object")
                    message.steam_id = new $util.LongBits(object.steam_id.low >>> 0, object.steam_id.high >>> 0).toNumber();
            if (object.xbox_pairwise_id != null)
                message.xbox_pairwise_id = String(object.xbox_pairwise_id);
            if (object.generic_bytes != null)
                if (typeof object.generic_bytes === "string")
                    $util.base64.decode(object.generic_bytes, message.generic_bytes = $util.newBuffer($util.base64.length(object.generic_bytes)), 0);
                else if (object.generic_bytes.length)
                    message.generic_bytes = object.generic_bytes;
            if (object.generic_string != null)
                message.generic_string = String(object.generic_string);
            if (object.ipv6_and_port != null)
                if (typeof object.ipv6_and_port === "string")
                    $util.base64.decode(object.ipv6_and_port, message.ipv6_and_port = $util.newBuffer($util.base64.length(object.ipv6_and_port)), 0);
                else if (object.ipv6_and_port.length)
                    message.ipv6_and_port = object.ipv6_and_port;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingIdentityLegacyBinary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {CMsgSteamNetworkingIdentityLegacyBinary} message CMsgSteamNetworkingIdentityLegacyBinary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingIdentityLegacyBinary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.generic_bytes = "";
                else {
                    object.generic_bytes = [];
                    if (options.bytes !== Array)
                        object.generic_bytes = $util.newBuffer(object.generic_bytes);
                }
                object.generic_string = "";
                if (options.bytes === String)
                    object.ipv6_and_port = "";
                else {
                    object.ipv6_and_port = [];
                    if (options.bytes !== Array)
                        object.ipv6_and_port = $util.newBuffer(object.ipv6_and_port);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steam_id = options.longs === String ? "0" : 0;
                object.xbox_pairwise_id = "";
            }
            if (message.generic_bytes != null && message.hasOwnProperty("generic_bytes"))
                object.generic_bytes = options.bytes === String ? $util.base64.encode(message.generic_bytes, 0, message.generic_bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.generic_bytes) : message.generic_bytes;
            if (message.generic_string != null && message.hasOwnProperty("generic_string"))
                object.generic_string = message.generic_string;
            if (message.ipv6_and_port != null && message.hasOwnProperty("ipv6_and_port"))
                object.ipv6_and_port = options.bytes === String ? $util.base64.encode(message.ipv6_and_port, 0, message.ipv6_and_port.length) : options.bytes === Array ? Array.prototype.slice.call(message.ipv6_and_port) : message.ipv6_and_port;
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (typeof message.steam_id === "number")
                    object.steam_id = options.longs === String ? String(message.steam_id) : message.steam_id;
                else
                    object.steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id) : options.longs === Number ? new $util.LongBits(message.steam_id.low >>> 0, message.steam_id.high >>> 0).toNumber() : message.steam_id;
            if (message.xbox_pairwise_id != null && message.hasOwnProperty("xbox_pairwise_id"))
                object.xbox_pairwise_id = message.xbox_pairwise_id;
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingIdentityLegacyBinary to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamNetworkingIdentityLegacyBinary;
    })();
    
    $root.CMsgSteamDatagramCertificate = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramCertificate.
         * @exports ICMsgSteamDatagramCertificate
         * @interface ICMsgSteamDatagramCertificate
         * @property {CMsgSteamDatagramCertificate.EKeyType|null} [key_type] CMsgSteamDatagramCertificate key_type
         * @property {Uint8Array|null} [key_data] CMsgSteamDatagramCertificate key_data
         * @property {number|Long|null} [legacy_steam_id] CMsgSteamDatagramCertificate legacy_steam_id
         * @property {ICMsgSteamNetworkingIdentityLegacyBinary|null} [legacy_identity_binary] CMsgSteamDatagramCertificate legacy_identity_binary
         * @property {string|null} [identity_string] CMsgSteamDatagramCertificate identity_string
         * @property {Array.<number>|null} [gameserver_datacenter_ids] CMsgSteamDatagramCertificate gameserver_datacenter_ids
         * @property {number|null} [time_created] CMsgSteamDatagramCertificate time_created
         * @property {number|null} [time_expiry] CMsgSteamDatagramCertificate time_expiry
         * @property {Array.<number>|null} [app_ids] CMsgSteamDatagramCertificate app_ids
         */
    
        /**
         * Constructs a new CMsgSteamDatagramCertificate.
         * @exports CMsgSteamDatagramCertificate
         * @classdesc Represents a CMsgSteamDatagramCertificate.
         * @implements ICMsgSteamDatagramCertificate
         * @constructor
         * @param {ICMsgSteamDatagramCertificate=} [properties] Properties to set
         */
        function CMsgSteamDatagramCertificate(properties) {
            this.gameserver_datacenter_ids = [];
            this.app_ids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramCertificate key_type.
         * @member {CMsgSteamDatagramCertificate.EKeyType} key_type
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.key_type = 0;
    
        /**
         * CMsgSteamDatagramCertificate key_data.
         * @member {Uint8Array} key_data
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.key_data = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramCertificate legacy_steam_id.
         * @member {number|Long} legacy_steam_id
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.legacy_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramCertificate legacy_identity_binary.
         * @member {ICMsgSteamNetworkingIdentityLegacyBinary|null|undefined} legacy_identity_binary
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.legacy_identity_binary = null;
    
        /**
         * CMsgSteamDatagramCertificate identity_string.
         * @member {string} identity_string
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.identity_string = "";
    
        /**
         * CMsgSteamDatagramCertificate gameserver_datacenter_ids.
         * @member {Array.<number>} gameserver_datacenter_ids
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.gameserver_datacenter_ids = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramCertificate time_created.
         * @member {number} time_created
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.time_created = 0;
    
        /**
         * CMsgSteamDatagramCertificate time_expiry.
         * @member {number} time_expiry
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.time_expiry = 0;
    
        /**
         * CMsgSteamDatagramCertificate app_ids.
         * @member {Array.<number>} app_ids
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.app_ids = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramCertificate instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {ICMsgSteamDatagramCertificate=} [properties] Properties to set
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate instance
         */
        CMsgSteamDatagramCertificate.create = function create(properties) {
            return new CMsgSteamDatagramCertificate(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificate message. Does not implicitly {@link CMsgSteamDatagramCertificate.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {ICMsgSteamDatagramCertificate} message CMsgSteamDatagramCertificate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key_type != null && Object.hasOwnProperty.call(message, "key_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.key_type);
            if (message.key_data != null && Object.hasOwnProperty.call(message, "key_data"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key_data);
            if (message.legacy_steam_id != null && Object.hasOwnProperty.call(message, "legacy_steam_id"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.legacy_steam_id);
            if (message.gameserver_datacenter_ids != null && message.gameserver_datacenter_ids.length)
                for (var i = 0; i < message.gameserver_datacenter_ids.length; ++i)
                    writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.gameserver_datacenter_ids[i]);
            if (message.time_created != null && Object.hasOwnProperty.call(message, "time_created"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.time_created);
            if (message.time_expiry != null && Object.hasOwnProperty.call(message, "time_expiry"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.time_expiry);
            if (message.app_ids != null && message.app_ids.length)
                for (var i = 0; i < message.app_ids.length; ++i)
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.app_ids[i]);
            if (message.legacy_identity_binary != null && Object.hasOwnProperty.call(message, "legacy_identity_binary"))
                $root.CMsgSteamNetworkingIdentityLegacyBinary.encode(message.legacy_identity_binary, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.identity_string != null && Object.hasOwnProperty.call(message, "identity_string"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.identity_string);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificate message, length delimited. Does not implicitly {@link CMsgSteamDatagramCertificate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {ICMsgSteamDatagramCertificate} message CMsgSteamDatagramCertificate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramCertificate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key_type = reader.int32();
                    break;
                case 2:
                    message.key_data = reader.bytes();
                    break;
                case 4:
                    message.legacy_steam_id = reader.fixed64();
                    break;
                case 11:
                    message.legacy_identity_binary = $root.CMsgSteamNetworkingIdentityLegacyBinary.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.identity_string = reader.string();
                    break;
                case 5:
                    if (!(message.gameserver_datacenter_ids && message.gameserver_datacenter_ids.length))
                        message.gameserver_datacenter_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.gameserver_datacenter_ids.push(reader.fixed32());
                    } else
                        message.gameserver_datacenter_ids.push(reader.fixed32());
                    break;
                case 8:
                    message.time_created = reader.fixed32();
                    break;
                case 9:
                    message.time_expiry = reader.fixed32();
                    break;
                case 10:
                    if (!(message.app_ids && message.app_ids.length))
                        message.app_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.app_ids.push(reader.uint32());
                    } else
                        message.app_ids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramCertificate message.
         * @function verify
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramCertificate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key_type != null && message.hasOwnProperty("key_type"))
                switch (message.key_type) {
                default:
                    return "key_type: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.key_data != null && message.hasOwnProperty("key_data"))
                if (!(message.key_data && typeof message.key_data.length === "number" || $util.isString(message.key_data)))
                    return "key_data: buffer expected";
            if (message.legacy_steam_id != null && message.hasOwnProperty("legacy_steam_id"))
                if (!$util.isInteger(message.legacy_steam_id) && !(message.legacy_steam_id && $util.isInteger(message.legacy_steam_id.low) && $util.isInteger(message.legacy_steam_id.high)))
                    return "legacy_steam_id: integer|Long expected";
            if (message.legacy_identity_binary != null && message.hasOwnProperty("legacy_identity_binary")) {
                var error = $root.CMsgSteamNetworkingIdentityLegacyBinary.verify(message.legacy_identity_binary);
                if (error)
                    return "legacy_identity_binary." + error;
            }
            if (message.identity_string != null && message.hasOwnProperty("identity_string"))
                if (!$util.isString(message.identity_string))
                    return "identity_string: string expected";
            if (message.gameserver_datacenter_ids != null && message.hasOwnProperty("gameserver_datacenter_ids")) {
                if (!Array.isArray(message.gameserver_datacenter_ids))
                    return "gameserver_datacenter_ids: array expected";
                for (var i = 0; i < message.gameserver_datacenter_ids.length; ++i)
                    if (!$util.isInteger(message.gameserver_datacenter_ids[i]))
                        return "gameserver_datacenter_ids: integer[] expected";
            }
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                if (!$util.isInteger(message.time_created))
                    return "time_created: integer expected";
            if (message.time_expiry != null && message.hasOwnProperty("time_expiry"))
                if (!$util.isInteger(message.time_expiry))
                    return "time_expiry: integer expected";
            if (message.app_ids != null && message.hasOwnProperty("app_ids")) {
                if (!Array.isArray(message.app_ids))
                    return "app_ids: array expected";
                for (var i = 0; i < message.app_ids.length; ++i)
                    if (!$util.isInteger(message.app_ids[i]))
                        return "app_ids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramCertificate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate
         */
        CMsgSteamDatagramCertificate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramCertificate)
                return object;
            var message = new $root.CMsgSteamDatagramCertificate();
            switch (object.key_type) {
            case "INVALID":
            case 0:
                message.key_type = 0;
                break;
            case "ED25519":
            case 1:
                message.key_type = 1;
                break;
            }
            if (object.key_data != null)
                if (typeof object.key_data === "string")
                    $util.base64.decode(object.key_data, message.key_data = $util.newBuffer($util.base64.length(object.key_data)), 0);
                else if (object.key_data.length)
                    message.key_data = object.key_data;
            if (object.legacy_steam_id != null)
                if ($util.Long)
                    (message.legacy_steam_id = $util.Long.fromValue(object.legacy_steam_id)).unsigned = false;
                else if (typeof object.legacy_steam_id === "string")
                    message.legacy_steam_id = parseInt(object.legacy_steam_id, 10);
                else if (typeof object.legacy_steam_id === "number")
                    message.legacy_steam_id = object.legacy_steam_id;
                else if (typeof object.legacy_steam_id === "object")
                    message.legacy_steam_id = new $util.LongBits(object.legacy_steam_id.low >>> 0, object.legacy_steam_id.high >>> 0).toNumber();
            if (object.legacy_identity_binary != null) {
                if (typeof object.legacy_identity_binary !== "object")
                    throw TypeError(".CMsgSteamDatagramCertificate.legacy_identity_binary: object expected");
                message.legacy_identity_binary = $root.CMsgSteamNetworkingIdentityLegacyBinary.fromObject(object.legacy_identity_binary);
            }
            if (object.identity_string != null)
                message.identity_string = String(object.identity_string);
            if (object.gameserver_datacenter_ids) {
                if (!Array.isArray(object.gameserver_datacenter_ids))
                    throw TypeError(".CMsgSteamDatagramCertificate.gameserver_datacenter_ids: array expected");
                message.gameserver_datacenter_ids = [];
                for (var i = 0; i < object.gameserver_datacenter_ids.length; ++i)
                    message.gameserver_datacenter_ids[i] = object.gameserver_datacenter_ids[i] >>> 0;
            }
            if (object.time_created != null)
                message.time_created = object.time_created >>> 0;
            if (object.time_expiry != null)
                message.time_expiry = object.time_expiry >>> 0;
            if (object.app_ids) {
                if (!Array.isArray(object.app_ids))
                    throw TypeError(".CMsgSteamDatagramCertificate.app_ids: array expected");
                message.app_ids = [];
                for (var i = 0; i < object.app_ids.length; ++i)
                    message.app_ids[i] = object.app_ids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramCertificate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {CMsgSteamDatagramCertificate} message CMsgSteamDatagramCertificate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramCertificate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.gameserver_datacenter_ids = [];
                object.app_ids = [];
            }
            if (options.defaults) {
                object.key_type = options.enums === String ? "INVALID" : 0;
                if (options.bytes === String)
                    object.key_data = "";
                else {
                    object.key_data = [];
                    if (options.bytes !== Array)
                        object.key_data = $util.newBuffer(object.key_data);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacy_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacy_steam_id = options.longs === String ? "0" : 0;
                object.time_created = 0;
                object.time_expiry = 0;
                object.legacy_identity_binary = null;
                object.identity_string = "";
            }
            if (message.key_type != null && message.hasOwnProperty("key_type"))
                object.key_type = options.enums === String ? $root.CMsgSteamDatagramCertificate.EKeyType[message.key_type] : message.key_type;
            if (message.key_data != null && message.hasOwnProperty("key_data"))
                object.key_data = options.bytes === String ? $util.base64.encode(message.key_data, 0, message.key_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.key_data) : message.key_data;
            if (message.legacy_steam_id != null && message.hasOwnProperty("legacy_steam_id"))
                if (typeof message.legacy_steam_id === "number")
                    object.legacy_steam_id = options.longs === String ? String(message.legacy_steam_id) : message.legacy_steam_id;
                else
                    object.legacy_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.legacy_steam_id) : options.longs === Number ? new $util.LongBits(message.legacy_steam_id.low >>> 0, message.legacy_steam_id.high >>> 0).toNumber() : message.legacy_steam_id;
            if (message.gameserver_datacenter_ids && message.gameserver_datacenter_ids.length) {
                object.gameserver_datacenter_ids = [];
                for (var j = 0; j < message.gameserver_datacenter_ids.length; ++j)
                    object.gameserver_datacenter_ids[j] = message.gameserver_datacenter_ids[j];
            }
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                object.time_created = message.time_created;
            if (message.time_expiry != null && message.hasOwnProperty("time_expiry"))
                object.time_expiry = message.time_expiry;
            if (message.app_ids && message.app_ids.length) {
                object.app_ids = [];
                for (var j = 0; j < message.app_ids.length; ++j)
                    object.app_ids[j] = message.app_ids[j];
            }
            if (message.legacy_identity_binary != null && message.hasOwnProperty("legacy_identity_binary"))
                object.legacy_identity_binary = $root.CMsgSteamNetworkingIdentityLegacyBinary.toObject(message.legacy_identity_binary, options);
            if (message.identity_string != null && message.hasOwnProperty("identity_string"))
                object.identity_string = message.identity_string;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramCertificate to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramCertificate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * EKeyType enum.
         * @name CMsgSteamDatagramCertificate.EKeyType
         * @enum {number}
         * @property {number} INVALID=0 INVALID value
         * @property {number} ED25519=1 ED25519 value
         */
        CMsgSteamDatagramCertificate.EKeyType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "INVALID"] = 0;
            values[valuesById[1] = "ED25519"] = 1;
            return values;
        })();
    
        return CMsgSteamDatagramCertificate;
    })();
    
    $root.CMsgSteamDatagramCertificateSigned = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramCertificateSigned.
         * @exports ICMsgSteamDatagramCertificateSigned
         * @interface ICMsgSteamDatagramCertificateSigned
         * @property {Uint8Array|null} [cert] CMsgSteamDatagramCertificateSigned cert
         * @property {number|Long|null} [ca_key_id] CMsgSteamDatagramCertificateSigned ca_key_id
         * @property {Uint8Array|null} [ca_signature] CMsgSteamDatagramCertificateSigned ca_signature
         * @property {Uint8Array|null} [private_key_data] CMsgSteamDatagramCertificateSigned private_key_data
         */
    
        /**
         * Constructs a new CMsgSteamDatagramCertificateSigned.
         * @exports CMsgSteamDatagramCertificateSigned
         * @classdesc Represents a CMsgSteamDatagramCertificateSigned.
         * @implements ICMsgSteamDatagramCertificateSigned
         * @constructor
         * @param {ICMsgSteamDatagramCertificateSigned=} [properties] Properties to set
         */
        function CMsgSteamDatagramCertificateSigned(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramCertificateSigned cert.
         * @member {Uint8Array} cert
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.cert = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramCertificateSigned ca_key_id.
         * @member {number|Long} ca_key_id
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.ca_key_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramCertificateSigned ca_signature.
         * @member {Uint8Array} ca_signature
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.ca_signature = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramCertificateSigned private_key_data.
         * @member {Uint8Array} private_key_data
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.private_key_data = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramCertificateSigned instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {ICMsgSteamDatagramCertificateSigned=} [properties] Properties to set
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned instance
         */
        CMsgSteamDatagramCertificateSigned.create = function create(properties) {
            return new CMsgSteamDatagramCertificateSigned(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateSigned message. Does not implicitly {@link CMsgSteamDatagramCertificateSigned.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {ICMsgSteamDatagramCertificateSigned} message CMsgSteamDatagramCertificateSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateSigned.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.private_key_data != null && Object.hasOwnProperty.call(message, "private_key_data"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.private_key_data);
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.cert);
            if (message.ca_key_id != null && Object.hasOwnProperty.call(message, "ca_key_id"))
                writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.ca_key_id);
            if (message.ca_signature != null && Object.hasOwnProperty.call(message, "ca_signature"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.ca_signature);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateSigned message, length delimited. Does not implicitly {@link CMsgSteamDatagramCertificateSigned.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {ICMsgSteamDatagramCertificateSigned} message CMsgSteamDatagramCertificateSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateSigned.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateSigned message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateSigned.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramCertificateSigned();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    message.cert = reader.bytes();
                    break;
                case 5:
                    message.ca_key_id = reader.fixed64();
                    break;
                case 6:
                    message.ca_signature = reader.bytes();
                    break;
                case 1:
                    message.private_key_data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateSigned message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateSigned.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramCertificateSigned message.
         * @function verify
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramCertificateSigned.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert"))
                if (!(message.cert && typeof message.cert.length === "number" || $util.isString(message.cert)))
                    return "cert: buffer expected";
            if (message.ca_key_id != null && message.hasOwnProperty("ca_key_id"))
                if (!$util.isInteger(message.ca_key_id) && !(message.ca_key_id && $util.isInteger(message.ca_key_id.low) && $util.isInteger(message.ca_key_id.high)))
                    return "ca_key_id: integer|Long expected";
            if (message.ca_signature != null && message.hasOwnProperty("ca_signature"))
                if (!(message.ca_signature && typeof message.ca_signature.length === "number" || $util.isString(message.ca_signature)))
                    return "ca_signature: buffer expected";
            if (message.private_key_data != null && message.hasOwnProperty("private_key_data"))
                if (!(message.private_key_data && typeof message.private_key_data.length === "number" || $util.isString(message.private_key_data)))
                    return "private_key_data: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramCertificateSigned message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned
         */
        CMsgSteamDatagramCertificateSigned.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramCertificateSigned)
                return object;
            var message = new $root.CMsgSteamDatagramCertificateSigned();
            if (object.cert != null)
                if (typeof object.cert === "string")
                    $util.base64.decode(object.cert, message.cert = $util.newBuffer($util.base64.length(object.cert)), 0);
                else if (object.cert.length)
                    message.cert = object.cert;
            if (object.ca_key_id != null)
                if ($util.Long)
                    (message.ca_key_id = $util.Long.fromValue(object.ca_key_id)).unsigned = false;
                else if (typeof object.ca_key_id === "string")
                    message.ca_key_id = parseInt(object.ca_key_id, 10);
                else if (typeof object.ca_key_id === "number")
                    message.ca_key_id = object.ca_key_id;
                else if (typeof object.ca_key_id === "object")
                    message.ca_key_id = new $util.LongBits(object.ca_key_id.low >>> 0, object.ca_key_id.high >>> 0).toNumber();
            if (object.ca_signature != null)
                if (typeof object.ca_signature === "string")
                    $util.base64.decode(object.ca_signature, message.ca_signature = $util.newBuffer($util.base64.length(object.ca_signature)), 0);
                else if (object.ca_signature.length)
                    message.ca_signature = object.ca_signature;
            if (object.private_key_data != null)
                if (typeof object.private_key_data === "string")
                    $util.base64.decode(object.private_key_data, message.private_key_data = $util.newBuffer($util.base64.length(object.private_key_data)), 0);
                else if (object.private_key_data.length)
                    message.private_key_data = object.private_key_data;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramCertificateSigned message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {CMsgSteamDatagramCertificateSigned} message CMsgSteamDatagramCertificateSigned
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramCertificateSigned.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.private_key_data = "";
                else {
                    object.private_key_data = [];
                    if (options.bytes !== Array)
                        object.private_key_data = $util.newBuffer(object.private_key_data);
                }
                if (options.bytes === String)
                    object.cert = "";
                else {
                    object.cert = [];
                    if (options.bytes !== Array)
                        object.cert = $util.newBuffer(object.cert);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ca_key_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ca_key_id = options.longs === String ? "0" : 0;
                if (options.bytes === String)
                    object.ca_signature = "";
                else {
                    object.ca_signature = [];
                    if (options.bytes !== Array)
                        object.ca_signature = $util.newBuffer(object.ca_signature);
                }
            }
            if (message.private_key_data != null && message.hasOwnProperty("private_key_data"))
                object.private_key_data = options.bytes === String ? $util.base64.encode(message.private_key_data, 0, message.private_key_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.private_key_data) : message.private_key_data;
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = options.bytes === String ? $util.base64.encode(message.cert, 0, message.cert.length) : options.bytes === Array ? Array.prototype.slice.call(message.cert) : message.cert;
            if (message.ca_key_id != null && message.hasOwnProperty("ca_key_id"))
                if (typeof message.ca_key_id === "number")
                    object.ca_key_id = options.longs === String ? String(message.ca_key_id) : message.ca_key_id;
                else
                    object.ca_key_id = options.longs === String ? $util.Long.prototype.toString.call(message.ca_key_id) : options.longs === Number ? new $util.LongBits(message.ca_key_id.low >>> 0, message.ca_key_id.high >>> 0).toNumber() : message.ca_key_id;
            if (message.ca_signature != null && message.hasOwnProperty("ca_signature"))
                object.ca_signature = options.bytes === String ? $util.base64.encode(message.ca_signature, 0, message.ca_signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.ca_signature) : message.ca_signature;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramCertificateSigned to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramCertificateSigned.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramCertificateSigned;
    })();
    
    $root.CMsgSteamDatagramCertificateRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramCertificateRequest.
         * @exports ICMsgSteamDatagramCertificateRequest
         * @interface ICMsgSteamDatagramCertificateRequest
         * @property {ICMsgSteamDatagramCertificate|null} [cert] CMsgSteamDatagramCertificateRequest cert
         */
    
        /**
         * Constructs a new CMsgSteamDatagramCertificateRequest.
         * @exports CMsgSteamDatagramCertificateRequest
         * @classdesc Represents a CMsgSteamDatagramCertificateRequest.
         * @implements ICMsgSteamDatagramCertificateRequest
         * @constructor
         * @param {ICMsgSteamDatagramCertificateRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramCertificateRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramCertificateRequest cert.
         * @member {ICMsgSteamDatagramCertificate|null|undefined} cert
         * @memberof CMsgSteamDatagramCertificateRequest
         * @instance
         */
        CMsgSteamDatagramCertificateRequest.prototype.cert = null;
    
        /**
         * Creates a new CMsgSteamDatagramCertificateRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {ICMsgSteamDatagramCertificateRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest instance
         */
        CMsgSteamDatagramCertificateRequest.create = function create(properties) {
            return new CMsgSteamDatagramCertificateRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateRequest message. Does not implicitly {@link CMsgSteamDatagramCertificateRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {ICMsgSteamDatagramCertificateRequest} message CMsgSteamDatagramCertificateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificate.encode(message.cert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramCertificateRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {ICMsgSteamDatagramCertificateRequest} message CMsgSteamDatagramCertificateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramCertificateRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cert = $root.CMsgSteamDatagramCertificate.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramCertificateRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramCertificateRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificate.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramCertificateRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest
         */
        CMsgSteamDatagramCertificateRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramCertificateRequest)
                return object;
            var message = new $root.CMsgSteamDatagramCertificateRequest();
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramCertificateRequest.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificate.fromObject(object.cert);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramCertificateRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {CMsgSteamDatagramCertificateRequest} message CMsgSteamDatagramCertificateRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramCertificateRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cert = null;
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificate.toObject(message.cert, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramCertificateRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramCertificateRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramCertificateRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramCertificateRequest;
    })();
    
    /**
     * ESteamNetworkingSocketsCipher enum.
     * @exports ESteamNetworkingSocketsCipher
     * @enum {number}
     * @property {number} k_ESteamNetworkingSocketsCipher_INVALID=0 k_ESteamNetworkingSocketsCipher_INVALID value
     * @property {number} k_ESteamNetworkingSocketsCipher_NULL=1 k_ESteamNetworkingSocketsCipher_NULL value
     * @property {number} k_ESteamNetworkingSocketsCipher_AES_256_GCM=2 k_ESteamNetworkingSocketsCipher_AES_256_GCM value
     */
    $root.ESteamNetworkingSocketsCipher = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_ESteamNetworkingSocketsCipher_INVALID"] = 0;
        values[valuesById[1] = "k_ESteamNetworkingSocketsCipher_NULL"] = 1;
        values[valuesById[2] = "k_ESteamNetworkingSocketsCipher_AES_256_GCM"] = 2;
        return values;
    })();
    
    $root.CMsgSteamDatagramSessionCryptInfo = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramSessionCryptInfo.
         * @exports ICMsgSteamDatagramSessionCryptInfo
         * @interface ICMsgSteamDatagramSessionCryptInfo
         * @property {CMsgSteamDatagramSessionCryptInfo.EKeyType|null} [key_type] CMsgSteamDatagramSessionCryptInfo key_type
         * @property {Uint8Array|null} [key_data] CMsgSteamDatagramSessionCryptInfo key_data
         * @property {number|Long|null} [nonce] CMsgSteamDatagramSessionCryptInfo nonce
         * @property {number|null} [protocol_version] CMsgSteamDatagramSessionCryptInfo protocol_version
         * @property {Array.<ESteamNetworkingSocketsCipher>|null} [ciphers] CMsgSteamDatagramSessionCryptInfo ciphers
         */
    
        /**
         * Constructs a new CMsgSteamDatagramSessionCryptInfo.
         * @exports CMsgSteamDatagramSessionCryptInfo
         * @classdesc Represents a CMsgSteamDatagramSessionCryptInfo.
         * @implements ICMsgSteamDatagramSessionCryptInfo
         * @constructor
         * @param {ICMsgSteamDatagramSessionCryptInfo=} [properties] Properties to set
         */
        function CMsgSteamDatagramSessionCryptInfo(properties) {
            this.ciphers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramSessionCryptInfo key_type.
         * @member {CMsgSteamDatagramSessionCryptInfo.EKeyType} key_type
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.key_type = 0;
    
        /**
         * CMsgSteamDatagramSessionCryptInfo key_data.
         * @member {Uint8Array} key_data
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.key_data = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramSessionCryptInfo nonce.
         * @member {number|Long} nonce
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramSessionCryptInfo protocol_version.
         * @member {number} protocol_version
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.protocol_version = 0;
    
        /**
         * CMsgSteamDatagramSessionCryptInfo ciphers.
         * @member {Array.<ESteamNetworkingSocketsCipher>} ciphers
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.ciphers = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramSessionCryptInfo instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfo=} [properties] Properties to set
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo instance
         */
        CMsgSteamDatagramSessionCryptInfo.create = function create(properties) {
            return new CMsgSteamDatagramSessionCryptInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfo message. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfo} message CMsgSteamDatagramSessionCryptInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key_type != null && Object.hasOwnProperty.call(message, "key_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.key_type);
            if (message.key_data != null && Object.hasOwnProperty.call(message, "key_data"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key_data);
            if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.nonce);
            if (message.protocol_version != null && Object.hasOwnProperty.call(message, "protocol_version"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.protocol_version);
            if (message.ciphers != null && message.ciphers.length)
                for (var i = 0; i < message.ciphers.length; ++i)
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.ciphers[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfo message, length delimited. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfo} message CMsgSteamDatagramSessionCryptInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramSessionCryptInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key_type = reader.int32();
                    break;
                case 2:
                    message.key_data = reader.bytes();
                    break;
                case 3:
                    message.nonce = reader.fixed64();
                    break;
                case 4:
                    message.protocol_version = reader.uint32();
                    break;
                case 5:
                    if (!(message.ciphers && message.ciphers.length))
                        message.ciphers = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ciphers.push(reader.int32());
                    } else
                        message.ciphers.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramSessionCryptInfo message.
         * @function verify
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramSessionCryptInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key_type != null && message.hasOwnProperty("key_type"))
                switch (message.key_type) {
                default:
                    return "key_type: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.key_data != null && message.hasOwnProperty("key_data"))
                if (!(message.key_data && typeof message.key_data.length === "number" || $util.isString(message.key_data)))
                    return "key_data: buffer expected";
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                    return "nonce: integer|Long expected";
            if (message.protocol_version != null && message.hasOwnProperty("protocol_version"))
                if (!$util.isInteger(message.protocol_version))
                    return "protocol_version: integer expected";
            if (message.ciphers != null && message.hasOwnProperty("ciphers")) {
                if (!Array.isArray(message.ciphers))
                    return "ciphers: array expected";
                for (var i = 0; i < message.ciphers.length; ++i)
                    switch (message.ciphers[i]) {
                    default:
                        return "ciphers: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramSessionCryptInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo
         */
        CMsgSteamDatagramSessionCryptInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramSessionCryptInfo)
                return object;
            var message = new $root.CMsgSteamDatagramSessionCryptInfo();
            switch (object.key_type) {
            case "INVALID":
            case 0:
                message.key_type = 0;
                break;
            case "CURVE25519":
            case 1:
                message.key_type = 1;
                break;
            }
            if (object.key_data != null)
                if (typeof object.key_data === "string")
                    $util.base64.decode(object.key_data, message.key_data = $util.newBuffer($util.base64.length(object.key_data)), 0);
                else if (object.key_data.length)
                    message.key_data = object.key_data;
            if (object.nonce != null)
                if ($util.Long)
                    (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = false;
                else if (typeof object.nonce === "string")
                    message.nonce = parseInt(object.nonce, 10);
                else if (typeof object.nonce === "number")
                    message.nonce = object.nonce;
                else if (typeof object.nonce === "object")
                    message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber();
            if (object.protocol_version != null)
                message.protocol_version = object.protocol_version >>> 0;
            if (object.ciphers) {
                if (!Array.isArray(object.ciphers))
                    throw TypeError(".CMsgSteamDatagramSessionCryptInfo.ciphers: array expected");
                message.ciphers = [];
                for (var i = 0; i < object.ciphers.length; ++i)
                    switch (object.ciphers[i]) {
                    default:
                    case "k_ESteamNetworkingSocketsCipher_INVALID":
                    case 0:
                        message.ciphers[i] = 0;
                        break;
                    case "k_ESteamNetworkingSocketsCipher_NULL":
                    case 1:
                        message.ciphers[i] = 1;
                        break;
                    case "k_ESteamNetworkingSocketsCipher_AES_256_GCM":
                    case 2:
                        message.ciphers[i] = 2;
                        break;
                    }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramSessionCryptInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {CMsgSteamDatagramSessionCryptInfo} message CMsgSteamDatagramSessionCryptInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramSessionCryptInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ciphers = [];
            if (options.defaults) {
                object.key_type = options.enums === String ? "INVALID" : 0;
                if (options.bytes === String)
                    object.key_data = "";
                else {
                    object.key_data = [];
                    if (options.bytes !== Array)
                        object.key_data = $util.newBuffer(object.key_data);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nonce = options.longs === String ? "0" : 0;
                object.protocol_version = 0;
            }
            if (message.key_type != null && message.hasOwnProperty("key_type"))
                object.key_type = options.enums === String ? $root.CMsgSteamDatagramSessionCryptInfo.EKeyType[message.key_type] : message.key_type;
            if (message.key_data != null && message.hasOwnProperty("key_data"))
                object.key_data = options.bytes === String ? $util.base64.encode(message.key_data, 0, message.key_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.key_data) : message.key_data;
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                if (typeof message.nonce === "number")
                    object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                else
                    object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber() : message.nonce;
            if (message.protocol_version != null && message.hasOwnProperty("protocol_version"))
                object.protocol_version = message.protocol_version;
            if (message.ciphers && message.ciphers.length) {
                object.ciphers = [];
                for (var j = 0; j < message.ciphers.length; ++j)
                    object.ciphers[j] = options.enums === String ? $root.ESteamNetworkingSocketsCipher[message.ciphers[j]] : message.ciphers[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramSessionCryptInfo to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * EKeyType enum.
         * @name CMsgSteamDatagramSessionCryptInfo.EKeyType
         * @enum {number}
         * @property {number} INVALID=0 INVALID value
         * @property {number} CURVE25519=1 CURVE25519 value
         */
        CMsgSteamDatagramSessionCryptInfo.EKeyType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "INVALID"] = 0;
            values[valuesById[1] = "CURVE25519"] = 1;
            return values;
        })();
    
        return CMsgSteamDatagramSessionCryptInfo;
    })();
    
    $root.CMsgSteamDatagramSessionCryptInfoSigned = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramSessionCryptInfoSigned.
         * @exports ICMsgSteamDatagramSessionCryptInfoSigned
         * @interface ICMsgSteamDatagramSessionCryptInfoSigned
         * @property {Uint8Array|null} [info] CMsgSteamDatagramSessionCryptInfoSigned info
         * @property {Uint8Array|null} [signature] CMsgSteamDatagramSessionCryptInfoSigned signature
         */
    
        /**
         * Constructs a new CMsgSteamDatagramSessionCryptInfoSigned.
         * @exports CMsgSteamDatagramSessionCryptInfoSigned
         * @classdesc Represents a CMsgSteamDatagramSessionCryptInfoSigned.
         * @implements ICMsgSteamDatagramSessionCryptInfoSigned
         * @constructor
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned=} [properties] Properties to set
         */
        function CMsgSteamDatagramSessionCryptInfoSigned(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramSessionCryptInfoSigned info.
         * @member {Uint8Array} info
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfoSigned.prototype.info = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramSessionCryptInfoSigned signature.
         * @member {Uint8Array} signature
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfoSigned.prototype.signature = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramSessionCryptInfoSigned instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned=} [properties] Properties to set
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned instance
         */
        CMsgSteamDatagramSessionCryptInfoSigned.create = function create(properties) {
            return new CMsgSteamDatagramSessionCryptInfoSigned(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfoSigned message. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfoSigned.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned} message CMsgSteamDatagramSessionCryptInfoSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfoSigned.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.info);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.signature);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfoSigned message, length delimited. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfoSigned.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned} message CMsgSteamDatagramSessionCryptInfoSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfoSigned.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfoSigned message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfoSigned.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramSessionCryptInfoSigned();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.info = reader.bytes();
                    break;
                case 2:
                    message.signature = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfoSigned message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfoSigned.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramSessionCryptInfoSigned message.
         * @function verify
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramSessionCryptInfoSigned.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramSessionCryptInfoSigned message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned
         */
        CMsgSteamDatagramSessionCryptInfoSigned.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramSessionCryptInfoSigned)
                return object;
            var message = new $root.CMsgSteamDatagramSessionCryptInfoSigned();
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length)
                    message.signature = object.signature;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramSessionCryptInfoSigned message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {CMsgSteamDatagramSessionCryptInfoSigned} message CMsgSteamDatagramSessionCryptInfoSigned
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramSessionCryptInfoSigned.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.info = "";
                else {
                    object.info = [];
                    if (options.bytes !== Array)
                        object.info = $util.newBuffer(object.info);
                }
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
            }
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramSessionCryptInfoSigned to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramSessionCryptInfoSigned.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramSessionCryptInfoSigned;
    })();
    
    $root.CMsgSteamDatagramDiagnostic = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramDiagnostic.
         * @exports ICMsgSteamDatagramDiagnostic
         * @interface ICMsgSteamDatagramDiagnostic
         * @property {number|null} [severity] CMsgSteamDatagramDiagnostic severity
         * @property {string|null} [text] CMsgSteamDatagramDiagnostic text
         */
    
        /**
         * Constructs a new CMsgSteamDatagramDiagnostic.
         * @exports CMsgSteamDatagramDiagnostic
         * @classdesc Represents a CMsgSteamDatagramDiagnostic.
         * @implements ICMsgSteamDatagramDiagnostic
         * @constructor
         * @param {ICMsgSteamDatagramDiagnostic=} [properties] Properties to set
         */
        function CMsgSteamDatagramDiagnostic(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramDiagnostic severity.
         * @member {number} severity
         * @memberof CMsgSteamDatagramDiagnostic
         * @instance
         */
        CMsgSteamDatagramDiagnostic.prototype.severity = 0;
    
        /**
         * CMsgSteamDatagramDiagnostic text.
         * @member {string} text
         * @memberof CMsgSteamDatagramDiagnostic
         * @instance
         */
        CMsgSteamDatagramDiagnostic.prototype.text = "";
    
        /**
         * Creates a new CMsgSteamDatagramDiagnostic instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {ICMsgSteamDatagramDiagnostic=} [properties] Properties to set
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic instance
         */
        CMsgSteamDatagramDiagnostic.create = function create(properties) {
            return new CMsgSteamDatagramDiagnostic(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramDiagnostic message. Does not implicitly {@link CMsgSteamDatagramDiagnostic.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {ICMsgSteamDatagramDiagnostic} message CMsgSteamDatagramDiagnostic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramDiagnostic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.severity);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramDiagnostic message, length delimited. Does not implicitly {@link CMsgSteamDatagramDiagnostic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {ICMsgSteamDatagramDiagnostic} message CMsgSteamDatagramDiagnostic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramDiagnostic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramDiagnostic message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramDiagnostic.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramDiagnostic();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.severity = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramDiagnostic message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramDiagnostic.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramDiagnostic message.
         * @function verify
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramDiagnostic.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.severity != null && message.hasOwnProperty("severity"))
                if (!$util.isInteger(message.severity))
                    return "severity: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramDiagnostic message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic
         */
        CMsgSteamDatagramDiagnostic.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramDiagnostic)
                return object;
            var message = new $root.CMsgSteamDatagramDiagnostic();
            if (object.severity != null)
                message.severity = object.severity >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramDiagnostic message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {CMsgSteamDatagramDiagnostic} message CMsgSteamDatagramDiagnostic
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramDiagnostic.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.severity = 0;
                object.text = "";
            }
            if (message.severity != null && message.hasOwnProperty("severity"))
                object.severity = message.severity;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramDiagnostic to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramDiagnostic
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramDiagnostic.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramDiagnostic;
    })();
    
    $root.CMsgSteamDatagramLinkInstantaneousStats = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramLinkInstantaneousStats.
         * @exports ICMsgSteamDatagramLinkInstantaneousStats
         * @interface ICMsgSteamDatagramLinkInstantaneousStats
         * @property {number|null} [out_packets_per_sec_x10] CMsgSteamDatagramLinkInstantaneousStats out_packets_per_sec_x10
         * @property {number|null} [out_bytes_per_sec] CMsgSteamDatagramLinkInstantaneousStats out_bytes_per_sec
         * @property {number|null} [in_packets_per_sec_x10] CMsgSteamDatagramLinkInstantaneousStats in_packets_per_sec_x10
         * @property {number|null} [in_bytes_per_sec] CMsgSteamDatagramLinkInstantaneousStats in_bytes_per_sec
         * @property {number|null} [ping_ms] CMsgSteamDatagramLinkInstantaneousStats ping_ms
         * @property {number|null} [packets_dropped_pct] CMsgSteamDatagramLinkInstantaneousStats packets_dropped_pct
         * @property {number|null} [packets_weird_sequence_pct] CMsgSteamDatagramLinkInstantaneousStats packets_weird_sequence_pct
         * @property {number|null} [peak_jitter_usec] CMsgSteamDatagramLinkInstantaneousStats peak_jitter_usec
         */
    
        /**
         * Constructs a new CMsgSteamDatagramLinkInstantaneousStats.
         * @exports CMsgSteamDatagramLinkInstantaneousStats
         * @classdesc Represents a CMsgSteamDatagramLinkInstantaneousStats.
         * @implements ICMsgSteamDatagramLinkInstantaneousStats
         * @constructor
         * @param {ICMsgSteamDatagramLinkInstantaneousStats=} [properties] Properties to set
         */
        function CMsgSteamDatagramLinkInstantaneousStats(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats out_packets_per_sec_x10.
         * @member {number} out_packets_per_sec_x10
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.out_packets_per_sec_x10 = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats out_bytes_per_sec.
         * @member {number} out_bytes_per_sec
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.out_bytes_per_sec = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats in_packets_per_sec_x10.
         * @member {number} in_packets_per_sec_x10
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.in_packets_per_sec_x10 = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats in_bytes_per_sec.
         * @member {number} in_bytes_per_sec
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.in_bytes_per_sec = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats ping_ms.
         * @member {number} ping_ms
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.ping_ms = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats packets_dropped_pct.
         * @member {number} packets_dropped_pct
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.packets_dropped_pct = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats packets_weird_sequence_pct.
         * @member {number} packets_weird_sequence_pct
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.packets_weird_sequence_pct = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats peak_jitter_usec.
         * @member {number} peak_jitter_usec
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.peak_jitter_usec = 0;
    
        /**
         * Creates a new CMsgSteamDatagramLinkInstantaneousStats instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {ICMsgSteamDatagramLinkInstantaneousStats=} [properties] Properties to set
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.create = function create(properties) {
            return new CMsgSteamDatagramLinkInstantaneousStats(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkInstantaneousStats message. Does not implicitly {@link CMsgSteamDatagramLinkInstantaneousStats.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {ICMsgSteamDatagramLinkInstantaneousStats} message CMsgSteamDatagramLinkInstantaneousStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkInstantaneousStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.out_packets_per_sec_x10 != null && Object.hasOwnProperty.call(message, "out_packets_per_sec_x10"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.out_packets_per_sec_x10);
            if (message.out_bytes_per_sec != null && Object.hasOwnProperty.call(message, "out_bytes_per_sec"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.out_bytes_per_sec);
            if (message.in_packets_per_sec_x10 != null && Object.hasOwnProperty.call(message, "in_packets_per_sec_x10"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.in_packets_per_sec_x10);
            if (message.in_bytes_per_sec != null && Object.hasOwnProperty.call(message, "in_bytes_per_sec"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.in_bytes_per_sec);
            if (message.ping_ms != null && Object.hasOwnProperty.call(message, "ping_ms"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ping_ms);
            if (message.packets_dropped_pct != null && Object.hasOwnProperty.call(message, "packets_dropped_pct"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.packets_dropped_pct);
            if (message.packets_weird_sequence_pct != null && Object.hasOwnProperty.call(message, "packets_weird_sequence_pct"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.packets_weird_sequence_pct);
            if (message.peak_jitter_usec != null && Object.hasOwnProperty.call(message, "peak_jitter_usec"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.peak_jitter_usec);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkInstantaneousStats message, length delimited. Does not implicitly {@link CMsgSteamDatagramLinkInstantaneousStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {ICMsgSteamDatagramLinkInstantaneousStats} message CMsgSteamDatagramLinkInstantaneousStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkInstantaneousStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkInstantaneousStats message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkInstantaneousStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramLinkInstantaneousStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.out_packets_per_sec_x10 = reader.uint32();
                    break;
                case 2:
                    message.out_bytes_per_sec = reader.uint32();
                    break;
                case 3:
                    message.in_packets_per_sec_x10 = reader.uint32();
                    break;
                case 4:
                    message.in_bytes_per_sec = reader.uint32();
                    break;
                case 5:
                    message.ping_ms = reader.uint32();
                    break;
                case 6:
                    message.packets_dropped_pct = reader.uint32();
                    break;
                case 7:
                    message.packets_weird_sequence_pct = reader.uint32();
                    break;
                case 8:
                    message.peak_jitter_usec = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkInstantaneousStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkInstantaneousStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramLinkInstantaneousStats message.
         * @function verify
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramLinkInstantaneousStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.out_packets_per_sec_x10 != null && message.hasOwnProperty("out_packets_per_sec_x10"))
                if (!$util.isInteger(message.out_packets_per_sec_x10))
                    return "out_packets_per_sec_x10: integer expected";
            if (message.out_bytes_per_sec != null && message.hasOwnProperty("out_bytes_per_sec"))
                if (!$util.isInteger(message.out_bytes_per_sec))
                    return "out_bytes_per_sec: integer expected";
            if (message.in_packets_per_sec_x10 != null && message.hasOwnProperty("in_packets_per_sec_x10"))
                if (!$util.isInteger(message.in_packets_per_sec_x10))
                    return "in_packets_per_sec_x10: integer expected";
            if (message.in_bytes_per_sec != null && message.hasOwnProperty("in_bytes_per_sec"))
                if (!$util.isInteger(message.in_bytes_per_sec))
                    return "in_bytes_per_sec: integer expected";
            if (message.ping_ms != null && message.hasOwnProperty("ping_ms"))
                if (!$util.isInteger(message.ping_ms))
                    return "ping_ms: integer expected";
            if (message.packets_dropped_pct != null && message.hasOwnProperty("packets_dropped_pct"))
                if (!$util.isInteger(message.packets_dropped_pct))
                    return "packets_dropped_pct: integer expected";
            if (message.packets_weird_sequence_pct != null && message.hasOwnProperty("packets_weird_sequence_pct"))
                if (!$util.isInteger(message.packets_weird_sequence_pct))
                    return "packets_weird_sequence_pct: integer expected";
            if (message.peak_jitter_usec != null && message.hasOwnProperty("peak_jitter_usec"))
                if (!$util.isInteger(message.peak_jitter_usec))
                    return "peak_jitter_usec: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramLinkInstantaneousStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats
         */
        CMsgSteamDatagramLinkInstantaneousStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramLinkInstantaneousStats)
                return object;
            var message = new $root.CMsgSteamDatagramLinkInstantaneousStats();
            if (object.out_packets_per_sec_x10 != null)
                message.out_packets_per_sec_x10 = object.out_packets_per_sec_x10 >>> 0;
            if (object.out_bytes_per_sec != null)
                message.out_bytes_per_sec = object.out_bytes_per_sec >>> 0;
            if (object.in_packets_per_sec_x10 != null)
                message.in_packets_per_sec_x10 = object.in_packets_per_sec_x10 >>> 0;
            if (object.in_bytes_per_sec != null)
                message.in_bytes_per_sec = object.in_bytes_per_sec >>> 0;
            if (object.ping_ms != null)
                message.ping_ms = object.ping_ms >>> 0;
            if (object.packets_dropped_pct != null)
                message.packets_dropped_pct = object.packets_dropped_pct >>> 0;
            if (object.packets_weird_sequence_pct != null)
                message.packets_weird_sequence_pct = object.packets_weird_sequence_pct >>> 0;
            if (object.peak_jitter_usec != null)
                message.peak_jitter_usec = object.peak_jitter_usec >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramLinkInstantaneousStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {CMsgSteamDatagramLinkInstantaneousStats} message CMsgSteamDatagramLinkInstantaneousStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramLinkInstantaneousStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.out_packets_per_sec_x10 = 0;
                object.out_bytes_per_sec = 0;
                object.in_packets_per_sec_x10 = 0;
                object.in_bytes_per_sec = 0;
                object.ping_ms = 0;
                object.packets_dropped_pct = 0;
                object.packets_weird_sequence_pct = 0;
                object.peak_jitter_usec = 0;
            }
            if (message.out_packets_per_sec_x10 != null && message.hasOwnProperty("out_packets_per_sec_x10"))
                object.out_packets_per_sec_x10 = message.out_packets_per_sec_x10;
            if (message.out_bytes_per_sec != null && message.hasOwnProperty("out_bytes_per_sec"))
                object.out_bytes_per_sec = message.out_bytes_per_sec;
            if (message.in_packets_per_sec_x10 != null && message.hasOwnProperty("in_packets_per_sec_x10"))
                object.in_packets_per_sec_x10 = message.in_packets_per_sec_x10;
            if (message.in_bytes_per_sec != null && message.hasOwnProperty("in_bytes_per_sec"))
                object.in_bytes_per_sec = message.in_bytes_per_sec;
            if (message.ping_ms != null && message.hasOwnProperty("ping_ms"))
                object.ping_ms = message.ping_ms;
            if (message.packets_dropped_pct != null && message.hasOwnProperty("packets_dropped_pct"))
                object.packets_dropped_pct = message.packets_dropped_pct;
            if (message.packets_weird_sequence_pct != null && message.hasOwnProperty("packets_weird_sequence_pct"))
                object.packets_weird_sequence_pct = message.packets_weird_sequence_pct;
            if (message.peak_jitter_usec != null && message.hasOwnProperty("peak_jitter_usec"))
                object.peak_jitter_usec = message.peak_jitter_usec;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramLinkInstantaneousStats to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramLinkInstantaneousStats;
    })();
    
    $root.CMsgSteamDatagramLinkLifetimeStats = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramLinkLifetimeStats.
         * @exports ICMsgSteamDatagramLinkLifetimeStats
         * @interface ICMsgSteamDatagramLinkLifetimeStats
         * @property {number|null} [connected_seconds] CMsgSteamDatagramLinkLifetimeStats connected_seconds
         * @property {number|Long|null} [packets_sent] CMsgSteamDatagramLinkLifetimeStats packets_sent
         * @property {number|Long|null} [kb_sent] CMsgSteamDatagramLinkLifetimeStats kb_sent
         * @property {number|Long|null} [packets_recv] CMsgSteamDatagramLinkLifetimeStats packets_recv
         * @property {number|Long|null} [kb_recv] CMsgSteamDatagramLinkLifetimeStats kb_recv
         * @property {number|Long|null} [packets_recv_sequenced] CMsgSteamDatagramLinkLifetimeStats packets_recv_sequenced
         * @property {number|Long|null} [packets_recv_dropped] CMsgSteamDatagramLinkLifetimeStats packets_recv_dropped
         * @property {number|Long|null} [packets_recv_out_of_order] CMsgSteamDatagramLinkLifetimeStats packets_recv_out_of_order
         * @property {number|Long|null} [packets_recv_duplicate] CMsgSteamDatagramLinkLifetimeStats packets_recv_duplicate
         * @property {number|Long|null} [packets_recv_lurch] CMsgSteamDatagramLinkLifetimeStats packets_recv_lurch
         * @property {number|null} [quality_histogram_100] CMsgSteamDatagramLinkLifetimeStats quality_histogram_100
         * @property {number|null} [quality_histogram_99] CMsgSteamDatagramLinkLifetimeStats quality_histogram_99
         * @property {number|null} [quality_histogram_97] CMsgSteamDatagramLinkLifetimeStats quality_histogram_97
         * @property {number|null} [quality_histogram_95] CMsgSteamDatagramLinkLifetimeStats quality_histogram_95
         * @property {number|null} [quality_histogram_90] CMsgSteamDatagramLinkLifetimeStats quality_histogram_90
         * @property {number|null} [quality_histogram_75] CMsgSteamDatagramLinkLifetimeStats quality_histogram_75
         * @property {number|null} [quality_histogram_50] CMsgSteamDatagramLinkLifetimeStats quality_histogram_50
         * @property {number|null} [quality_histogram_1] CMsgSteamDatagramLinkLifetimeStats quality_histogram_1
         * @property {number|null} [quality_histogram_dead] CMsgSteamDatagramLinkLifetimeStats quality_histogram_dead
         * @property {number|null} [quality_ntile_2nd] CMsgSteamDatagramLinkLifetimeStats quality_ntile_2nd
         * @property {number|null} [quality_ntile_5th] CMsgSteamDatagramLinkLifetimeStats quality_ntile_5th
         * @property {number|null} [quality_ntile_25th] CMsgSteamDatagramLinkLifetimeStats quality_ntile_25th
         * @property {number|null} [quality_ntile_50th] CMsgSteamDatagramLinkLifetimeStats quality_ntile_50th
         * @property {number|null} [ping_histogram_25] CMsgSteamDatagramLinkLifetimeStats ping_histogram_25
         * @property {number|null} [ping_histogram_50] CMsgSteamDatagramLinkLifetimeStats ping_histogram_50
         * @property {number|null} [ping_histogram_75] CMsgSteamDatagramLinkLifetimeStats ping_histogram_75
         * @property {number|null} [ping_histogram_100] CMsgSteamDatagramLinkLifetimeStats ping_histogram_100
         * @property {number|null} [ping_histogram_125] CMsgSteamDatagramLinkLifetimeStats ping_histogram_125
         * @property {number|null} [ping_histogram_150] CMsgSteamDatagramLinkLifetimeStats ping_histogram_150
         * @property {number|null} [ping_histogram_200] CMsgSteamDatagramLinkLifetimeStats ping_histogram_200
         * @property {number|null} [ping_histogram_300] CMsgSteamDatagramLinkLifetimeStats ping_histogram_300
         * @property {number|null} [ping_histogram_max] CMsgSteamDatagramLinkLifetimeStats ping_histogram_max
         * @property {number|null} [ping_ntile_5th] CMsgSteamDatagramLinkLifetimeStats ping_ntile_5th
         * @property {number|null} [ping_ntile_50th] CMsgSteamDatagramLinkLifetimeStats ping_ntile_50th
         * @property {number|null} [ping_ntile_75th] CMsgSteamDatagramLinkLifetimeStats ping_ntile_75th
         * @property {number|null} [ping_ntile_95th] CMsgSteamDatagramLinkLifetimeStats ping_ntile_95th
         * @property {number|null} [ping_ntile_98th] CMsgSteamDatagramLinkLifetimeStats ping_ntile_98th
         * @property {number|null} [jitter_histogram_negligible] CMsgSteamDatagramLinkLifetimeStats jitter_histogram_negligible
         * @property {number|null} [jitter_histogram_1] CMsgSteamDatagramLinkLifetimeStats jitter_histogram_1
         * @property {number|null} [jitter_histogram_2] CMsgSteamDatagramLinkLifetimeStats jitter_histogram_2
         * @property {number|null} [jitter_histogram_5] CMsgSteamDatagramLinkLifetimeStats jitter_histogram_5
         * @property {number|null} [jitter_histogram_10] CMsgSteamDatagramLinkLifetimeStats jitter_histogram_10
         * @property {number|null} [jitter_histogram_20] CMsgSteamDatagramLinkLifetimeStats jitter_histogram_20
         * @property {number|null} [txspeed_max] CMsgSteamDatagramLinkLifetimeStats txspeed_max
         * @property {number|null} [txspeed_histogram_16] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_16
         * @property {number|null} [txspeed_histogram_32] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_32
         * @property {number|null} [txspeed_histogram_64] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_64
         * @property {number|null} [txspeed_histogram_128] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_128
         * @property {number|null} [txspeed_histogram_256] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_256
         * @property {number|null} [txspeed_histogram_512] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_512
         * @property {number|null} [txspeed_histogram_1024] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_1024
         * @property {number|null} [txspeed_histogram_max] CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_max
         * @property {number|null} [txspeed_ntile_5th] CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_5th
         * @property {number|null} [txspeed_ntile_50th] CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_50th
         * @property {number|null} [txspeed_ntile_75th] CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_75th
         * @property {number|null} [txspeed_ntile_95th] CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_95th
         * @property {number|null} [txspeed_ntile_98th] CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_98th
         * @property {number|null} [rxspeed_max] CMsgSteamDatagramLinkLifetimeStats rxspeed_max
         * @property {number|null} [rxspeed_histogram_16] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_16
         * @property {number|null} [rxspeed_histogram_32] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_32
         * @property {number|null} [rxspeed_histogram_64] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_64
         * @property {number|null} [rxspeed_histogram_128] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_128
         * @property {number|null} [rxspeed_histogram_256] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_256
         * @property {number|null} [rxspeed_histogram_512] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_512
         * @property {number|null} [rxspeed_histogram_1024] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_1024
         * @property {number|null} [rxspeed_histogram_max] CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_max
         * @property {number|null} [rxspeed_ntile_5th] CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_5th
         * @property {number|null} [rxspeed_ntile_50th] CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_50th
         * @property {number|null} [rxspeed_ntile_75th] CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_75th
         * @property {number|null} [rxspeed_ntile_95th] CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_95th
         * @property {number|null} [rxspeed_ntile_98th] CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_98th
         */
    
        /**
         * Constructs a new CMsgSteamDatagramLinkLifetimeStats.
         * @exports CMsgSteamDatagramLinkLifetimeStats
         * @classdesc Represents a CMsgSteamDatagramLinkLifetimeStats.
         * @implements ICMsgSteamDatagramLinkLifetimeStats
         * @constructor
         * @param {ICMsgSteamDatagramLinkLifetimeStats=} [properties] Properties to set
         */
        function CMsgSteamDatagramLinkLifetimeStats(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats connected_seconds.
         * @member {number} connected_seconds
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.connected_seconds = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packets_sent.
         * @member {number|Long} packets_sent
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packets_sent = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats kb_sent.
         * @member {number|Long} kb_sent
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.kb_sent = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packets_recv.
         * @member {number|Long} packets_recv
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packets_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats kb_recv.
         * @member {number|Long} kb_recv
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.kb_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packets_recv_sequenced.
         * @member {number|Long} packets_recv_sequenced
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packets_recv_sequenced = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packets_recv_dropped.
         * @member {number|Long} packets_recv_dropped
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packets_recv_dropped = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packets_recv_out_of_order.
         * @member {number|Long} packets_recv_out_of_order
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packets_recv_out_of_order = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packets_recv_duplicate.
         * @member {number|Long} packets_recv_duplicate
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packets_recv_duplicate = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packets_recv_lurch.
         * @member {number|Long} packets_recv_lurch
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packets_recv_lurch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_100.
         * @member {number} quality_histogram_100
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_100 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_99.
         * @member {number} quality_histogram_99
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_99 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_97.
         * @member {number} quality_histogram_97
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_97 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_95.
         * @member {number} quality_histogram_95
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_95 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_90.
         * @member {number} quality_histogram_90
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_90 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_75.
         * @member {number} quality_histogram_75
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_75 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_50.
         * @member {number} quality_histogram_50
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_50 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_1.
         * @member {number} quality_histogram_1
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_1 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_histogram_dead.
         * @member {number} quality_histogram_dead
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_histogram_dead = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_ntile_2nd.
         * @member {number} quality_ntile_2nd
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_ntile_2nd = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_ntile_5th.
         * @member {number} quality_ntile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_ntile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_ntile_25th.
         * @member {number} quality_ntile_25th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_ntile_25th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats quality_ntile_50th.
         * @member {number} quality_ntile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.quality_ntile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_25.
         * @member {number} ping_histogram_25
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_25 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_50.
         * @member {number} ping_histogram_50
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_50 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_75.
         * @member {number} ping_histogram_75
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_75 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_100.
         * @member {number} ping_histogram_100
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_100 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_125.
         * @member {number} ping_histogram_125
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_125 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_150.
         * @member {number} ping_histogram_150
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_150 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_200.
         * @member {number} ping_histogram_200
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_200 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_300.
         * @member {number} ping_histogram_300
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_300 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_histogram_max.
         * @member {number} ping_histogram_max
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_histogram_max = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_ntile_5th.
         * @member {number} ping_ntile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_ntile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_ntile_50th.
         * @member {number} ping_ntile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_ntile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_ntile_75th.
         * @member {number} ping_ntile_75th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_ntile_75th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_ntile_95th.
         * @member {number} ping_ntile_95th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_ntile_95th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats ping_ntile_98th.
         * @member {number} ping_ntile_98th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.ping_ntile_98th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitter_histogram_negligible.
         * @member {number} jitter_histogram_negligible
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitter_histogram_negligible = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitter_histogram_1.
         * @member {number} jitter_histogram_1
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitter_histogram_1 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitter_histogram_2.
         * @member {number} jitter_histogram_2
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitter_histogram_2 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitter_histogram_5.
         * @member {number} jitter_histogram_5
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitter_histogram_5 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitter_histogram_10.
         * @member {number} jitter_histogram_10
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitter_histogram_10 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitter_histogram_20.
         * @member {number} jitter_histogram_20
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitter_histogram_20 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_max.
         * @member {number} txspeed_max
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_max = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_16.
         * @member {number} txspeed_histogram_16
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_16 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_32.
         * @member {number} txspeed_histogram_32
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_32 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_64.
         * @member {number} txspeed_histogram_64
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_64 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_128.
         * @member {number} txspeed_histogram_128
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_128 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_256.
         * @member {number} txspeed_histogram_256
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_256 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_512.
         * @member {number} txspeed_histogram_512
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_512 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_1024.
         * @member {number} txspeed_histogram_1024
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_1024 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_histogram_max.
         * @member {number} txspeed_histogram_max
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_histogram_max = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_5th.
         * @member {number} txspeed_ntile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_ntile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_50th.
         * @member {number} txspeed_ntile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_ntile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_75th.
         * @member {number} txspeed_ntile_75th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_ntile_75th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_95th.
         * @member {number} txspeed_ntile_95th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_ntile_95th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeed_ntile_98th.
         * @member {number} txspeed_ntile_98th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeed_ntile_98th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_max.
         * @member {number} rxspeed_max
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_max = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_16.
         * @member {number} rxspeed_histogram_16
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_16 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_32.
         * @member {number} rxspeed_histogram_32
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_32 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_64.
         * @member {number} rxspeed_histogram_64
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_64 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_128.
         * @member {number} rxspeed_histogram_128
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_128 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_256.
         * @member {number} rxspeed_histogram_256
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_256 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_512.
         * @member {number} rxspeed_histogram_512
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_512 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_1024.
         * @member {number} rxspeed_histogram_1024
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_1024 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_histogram_max.
         * @member {number} rxspeed_histogram_max
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_histogram_max = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_5th.
         * @member {number} rxspeed_ntile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_ntile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_50th.
         * @member {number} rxspeed_ntile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_ntile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_75th.
         * @member {number} rxspeed_ntile_75th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_ntile_75th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_95th.
         * @member {number} rxspeed_ntile_95th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_ntile_95th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeed_ntile_98th.
         * @member {number} rxspeed_ntile_98th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeed_ntile_98th = 0;
    
        /**
         * Creates a new CMsgSteamDatagramLinkLifetimeStats instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {ICMsgSteamDatagramLinkLifetimeStats=} [properties] Properties to set
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats instance
         */
        CMsgSteamDatagramLinkLifetimeStats.create = function create(properties) {
            return new CMsgSteamDatagramLinkLifetimeStats(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkLifetimeStats message. Does not implicitly {@link CMsgSteamDatagramLinkLifetimeStats.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {ICMsgSteamDatagramLinkLifetimeStats} message CMsgSteamDatagramLinkLifetimeStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkLifetimeStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connected_seconds != null && Object.hasOwnProperty.call(message, "connected_seconds"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.connected_seconds);
            if (message.packets_sent != null && Object.hasOwnProperty.call(message, "packets_sent"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.packets_sent);
            if (message.kb_sent != null && Object.hasOwnProperty.call(message, "kb_sent"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.kb_sent);
            if (message.packets_recv != null && Object.hasOwnProperty.call(message, "packets_recv"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.packets_recv);
            if (message.kb_recv != null && Object.hasOwnProperty.call(message, "kb_recv"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.kb_recv);
            if (message.packets_recv_sequenced != null && Object.hasOwnProperty.call(message, "packets_recv_sequenced"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.packets_recv_sequenced);
            if (message.packets_recv_dropped != null && Object.hasOwnProperty.call(message, "packets_recv_dropped"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.packets_recv_dropped);
            if (message.packets_recv_out_of_order != null && Object.hasOwnProperty.call(message, "packets_recv_out_of_order"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.packets_recv_out_of_order);
            if (message.packets_recv_duplicate != null && Object.hasOwnProperty.call(message, "packets_recv_duplicate"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.packets_recv_duplicate);
            if (message.packets_recv_lurch != null && Object.hasOwnProperty.call(message, "packets_recv_lurch"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.packets_recv_lurch);
            if (message.quality_histogram_100 != null && Object.hasOwnProperty.call(message, "quality_histogram_100"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.quality_histogram_100);
            if (message.quality_histogram_99 != null && Object.hasOwnProperty.call(message, "quality_histogram_99"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.quality_histogram_99);
            if (message.quality_histogram_97 != null && Object.hasOwnProperty.call(message, "quality_histogram_97"))
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.quality_histogram_97);
            if (message.quality_histogram_95 != null && Object.hasOwnProperty.call(message, "quality_histogram_95"))
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.quality_histogram_95);
            if (message.quality_histogram_90 != null && Object.hasOwnProperty.call(message, "quality_histogram_90"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.quality_histogram_90);
            if (message.quality_histogram_75 != null && Object.hasOwnProperty.call(message, "quality_histogram_75"))
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.quality_histogram_75);
            if (message.quality_histogram_50 != null && Object.hasOwnProperty.call(message, "quality_histogram_50"))
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.quality_histogram_50);
            if (message.quality_histogram_1 != null && Object.hasOwnProperty.call(message, "quality_histogram_1"))
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.quality_histogram_1);
            if (message.quality_histogram_dead != null && Object.hasOwnProperty.call(message, "quality_histogram_dead"))
                writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.quality_histogram_dead);
            if (message.quality_ntile_2nd != null && Object.hasOwnProperty.call(message, "quality_ntile_2nd"))
                writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.quality_ntile_2nd);
            if (message.quality_ntile_5th != null && Object.hasOwnProperty.call(message, "quality_ntile_5th"))
                writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.quality_ntile_5th);
            if (message.quality_ntile_25th != null && Object.hasOwnProperty.call(message, "quality_ntile_25th"))
                writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.quality_ntile_25th);
            if (message.quality_ntile_50th != null && Object.hasOwnProperty.call(message, "quality_ntile_50th"))
                writer.uint32(/* id 33, wireType 0 =*/264).uint32(message.quality_ntile_50th);
            if (message.ping_histogram_25 != null && Object.hasOwnProperty.call(message, "ping_histogram_25"))
                writer.uint32(/* id 41, wireType 0 =*/328).uint32(message.ping_histogram_25);
            if (message.ping_histogram_50 != null && Object.hasOwnProperty.call(message, "ping_histogram_50"))
                writer.uint32(/* id 42, wireType 0 =*/336).uint32(message.ping_histogram_50);
            if (message.ping_histogram_75 != null && Object.hasOwnProperty.call(message, "ping_histogram_75"))
                writer.uint32(/* id 43, wireType 0 =*/344).uint32(message.ping_histogram_75);
            if (message.ping_histogram_100 != null && Object.hasOwnProperty.call(message, "ping_histogram_100"))
                writer.uint32(/* id 44, wireType 0 =*/352).uint32(message.ping_histogram_100);
            if (message.ping_histogram_125 != null && Object.hasOwnProperty.call(message, "ping_histogram_125"))
                writer.uint32(/* id 45, wireType 0 =*/360).uint32(message.ping_histogram_125);
            if (message.ping_histogram_150 != null && Object.hasOwnProperty.call(message, "ping_histogram_150"))
                writer.uint32(/* id 46, wireType 0 =*/368).uint32(message.ping_histogram_150);
            if (message.ping_histogram_200 != null && Object.hasOwnProperty.call(message, "ping_histogram_200"))
                writer.uint32(/* id 47, wireType 0 =*/376).uint32(message.ping_histogram_200);
            if (message.ping_histogram_300 != null && Object.hasOwnProperty.call(message, "ping_histogram_300"))
                writer.uint32(/* id 48, wireType 0 =*/384).uint32(message.ping_histogram_300);
            if (message.ping_histogram_max != null && Object.hasOwnProperty.call(message, "ping_histogram_max"))
                writer.uint32(/* id 49, wireType 0 =*/392).uint32(message.ping_histogram_max);
            if (message.ping_ntile_5th != null && Object.hasOwnProperty.call(message, "ping_ntile_5th"))
                writer.uint32(/* id 50, wireType 0 =*/400).uint32(message.ping_ntile_5th);
            if (message.ping_ntile_50th != null && Object.hasOwnProperty.call(message, "ping_ntile_50th"))
                writer.uint32(/* id 51, wireType 0 =*/408).uint32(message.ping_ntile_50th);
            if (message.ping_ntile_75th != null && Object.hasOwnProperty.call(message, "ping_ntile_75th"))
                writer.uint32(/* id 52, wireType 0 =*/416).uint32(message.ping_ntile_75th);
            if (message.ping_ntile_95th != null && Object.hasOwnProperty.call(message, "ping_ntile_95th"))
                writer.uint32(/* id 53, wireType 0 =*/424).uint32(message.ping_ntile_95th);
            if (message.ping_ntile_98th != null && Object.hasOwnProperty.call(message, "ping_ntile_98th"))
                writer.uint32(/* id 54, wireType 0 =*/432).uint32(message.ping_ntile_98th);
            if (message.jitter_histogram_negligible != null && Object.hasOwnProperty.call(message, "jitter_histogram_negligible"))
                writer.uint32(/* id 61, wireType 0 =*/488).uint32(message.jitter_histogram_negligible);
            if (message.jitter_histogram_1 != null && Object.hasOwnProperty.call(message, "jitter_histogram_1"))
                writer.uint32(/* id 62, wireType 0 =*/496).uint32(message.jitter_histogram_1);
            if (message.jitter_histogram_2 != null && Object.hasOwnProperty.call(message, "jitter_histogram_2"))
                writer.uint32(/* id 63, wireType 0 =*/504).uint32(message.jitter_histogram_2);
            if (message.jitter_histogram_5 != null && Object.hasOwnProperty.call(message, "jitter_histogram_5"))
                writer.uint32(/* id 64, wireType 0 =*/512).uint32(message.jitter_histogram_5);
            if (message.jitter_histogram_10 != null && Object.hasOwnProperty.call(message, "jitter_histogram_10"))
                writer.uint32(/* id 65, wireType 0 =*/520).uint32(message.jitter_histogram_10);
            if (message.jitter_histogram_20 != null && Object.hasOwnProperty.call(message, "jitter_histogram_20"))
                writer.uint32(/* id 66, wireType 0 =*/528).uint32(message.jitter_histogram_20);
            if (message.txspeed_max != null && Object.hasOwnProperty.call(message, "txspeed_max"))
                writer.uint32(/* id 67, wireType 0 =*/536).uint32(message.txspeed_max);
            if (message.txspeed_histogram_16 != null && Object.hasOwnProperty.call(message, "txspeed_histogram_16"))
                writer.uint32(/* id 68, wireType 0 =*/544).uint32(message.txspeed_histogram_16);
            if (message.txspeed_histogram_32 != null && Object.hasOwnProperty.call(message, "txspeed_histogram_32"))
                writer.uint32(/* id 69, wireType 0 =*/552).uint32(message.txspeed_histogram_32);
            if (message.txspeed_histogram_64 != null && Object.hasOwnProperty.call(message, "txspeed_histogram_64"))
                writer.uint32(/* id 70, wireType 0 =*/560).uint32(message.txspeed_histogram_64);
            if (message.txspeed_histogram_128 != null && Object.hasOwnProperty.call(message, "txspeed_histogram_128"))
                writer.uint32(/* id 71, wireType 0 =*/568).uint32(message.txspeed_histogram_128);
            if (message.txspeed_histogram_256 != null && Object.hasOwnProperty.call(message, "txspeed_histogram_256"))
                writer.uint32(/* id 72, wireType 0 =*/576).uint32(message.txspeed_histogram_256);
            if (message.txspeed_histogram_512 != null && Object.hasOwnProperty.call(message, "txspeed_histogram_512"))
                writer.uint32(/* id 73, wireType 0 =*/584).uint32(message.txspeed_histogram_512);
            if (message.txspeed_histogram_1024 != null && Object.hasOwnProperty.call(message, "txspeed_histogram_1024"))
                writer.uint32(/* id 74, wireType 0 =*/592).uint32(message.txspeed_histogram_1024);
            if (message.txspeed_histogram_max != null && Object.hasOwnProperty.call(message, "txspeed_histogram_max"))
                writer.uint32(/* id 75, wireType 0 =*/600).uint32(message.txspeed_histogram_max);
            if (message.txspeed_ntile_5th != null && Object.hasOwnProperty.call(message, "txspeed_ntile_5th"))
                writer.uint32(/* id 76, wireType 0 =*/608).uint32(message.txspeed_ntile_5th);
            if (message.txspeed_ntile_50th != null && Object.hasOwnProperty.call(message, "txspeed_ntile_50th"))
                writer.uint32(/* id 77, wireType 0 =*/616).uint32(message.txspeed_ntile_50th);
            if (message.txspeed_ntile_75th != null && Object.hasOwnProperty.call(message, "txspeed_ntile_75th"))
                writer.uint32(/* id 78, wireType 0 =*/624).uint32(message.txspeed_ntile_75th);
            if (message.txspeed_ntile_95th != null && Object.hasOwnProperty.call(message, "txspeed_ntile_95th"))
                writer.uint32(/* id 79, wireType 0 =*/632).uint32(message.txspeed_ntile_95th);
            if (message.txspeed_ntile_98th != null && Object.hasOwnProperty.call(message, "txspeed_ntile_98th"))
                writer.uint32(/* id 80, wireType 0 =*/640).uint32(message.txspeed_ntile_98th);
            if (message.rxspeed_max != null && Object.hasOwnProperty.call(message, "rxspeed_max"))
                writer.uint32(/* id 81, wireType 0 =*/648).uint32(message.rxspeed_max);
            if (message.rxspeed_histogram_16 != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_16"))
                writer.uint32(/* id 82, wireType 0 =*/656).uint32(message.rxspeed_histogram_16);
            if (message.rxspeed_histogram_32 != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_32"))
                writer.uint32(/* id 83, wireType 0 =*/664).uint32(message.rxspeed_histogram_32);
            if (message.rxspeed_histogram_64 != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_64"))
                writer.uint32(/* id 84, wireType 0 =*/672).uint32(message.rxspeed_histogram_64);
            if (message.rxspeed_histogram_128 != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_128"))
                writer.uint32(/* id 85, wireType 0 =*/680).uint32(message.rxspeed_histogram_128);
            if (message.rxspeed_histogram_256 != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_256"))
                writer.uint32(/* id 86, wireType 0 =*/688).uint32(message.rxspeed_histogram_256);
            if (message.rxspeed_histogram_512 != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_512"))
                writer.uint32(/* id 87, wireType 0 =*/696).uint32(message.rxspeed_histogram_512);
            if (message.rxspeed_histogram_1024 != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_1024"))
                writer.uint32(/* id 88, wireType 0 =*/704).uint32(message.rxspeed_histogram_1024);
            if (message.rxspeed_histogram_max != null && Object.hasOwnProperty.call(message, "rxspeed_histogram_max"))
                writer.uint32(/* id 89, wireType 0 =*/712).uint32(message.rxspeed_histogram_max);
            if (message.rxspeed_ntile_5th != null && Object.hasOwnProperty.call(message, "rxspeed_ntile_5th"))
                writer.uint32(/* id 90, wireType 0 =*/720).uint32(message.rxspeed_ntile_5th);
            if (message.rxspeed_ntile_50th != null && Object.hasOwnProperty.call(message, "rxspeed_ntile_50th"))
                writer.uint32(/* id 91, wireType 0 =*/728).uint32(message.rxspeed_ntile_50th);
            if (message.rxspeed_ntile_75th != null && Object.hasOwnProperty.call(message, "rxspeed_ntile_75th"))
                writer.uint32(/* id 92, wireType 0 =*/736).uint32(message.rxspeed_ntile_75th);
            if (message.rxspeed_ntile_95th != null && Object.hasOwnProperty.call(message, "rxspeed_ntile_95th"))
                writer.uint32(/* id 93, wireType 0 =*/744).uint32(message.rxspeed_ntile_95th);
            if (message.rxspeed_ntile_98th != null && Object.hasOwnProperty.call(message, "rxspeed_ntile_98th"))
                writer.uint32(/* id 94, wireType 0 =*/752).uint32(message.rxspeed_ntile_98th);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkLifetimeStats message, length delimited. Does not implicitly {@link CMsgSteamDatagramLinkLifetimeStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {ICMsgSteamDatagramLinkLifetimeStats} message CMsgSteamDatagramLinkLifetimeStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkLifetimeStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkLifetimeStats message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkLifetimeStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramLinkLifetimeStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.connected_seconds = reader.uint32();
                    break;
                case 3:
                    message.packets_sent = reader.uint64();
                    break;
                case 4:
                    message.kb_sent = reader.uint64();
                    break;
                case 5:
                    message.packets_recv = reader.uint64();
                    break;
                case 6:
                    message.kb_recv = reader.uint64();
                    break;
                case 7:
                    message.packets_recv_sequenced = reader.uint64();
                    break;
                case 8:
                    message.packets_recv_dropped = reader.uint64();
                    break;
                case 9:
                    message.packets_recv_out_of_order = reader.uint64();
                    break;
                case 10:
                    message.packets_recv_duplicate = reader.uint64();
                    break;
                case 11:
                    message.packets_recv_lurch = reader.uint64();
                    break;
                case 21:
                    message.quality_histogram_100 = reader.uint32();
                    break;
                case 22:
                    message.quality_histogram_99 = reader.uint32();
                    break;
                case 23:
                    message.quality_histogram_97 = reader.uint32();
                    break;
                case 24:
                    message.quality_histogram_95 = reader.uint32();
                    break;
                case 25:
                    message.quality_histogram_90 = reader.uint32();
                    break;
                case 26:
                    message.quality_histogram_75 = reader.uint32();
                    break;
                case 27:
                    message.quality_histogram_50 = reader.uint32();
                    break;
                case 28:
                    message.quality_histogram_1 = reader.uint32();
                    break;
                case 29:
                    message.quality_histogram_dead = reader.uint32();
                    break;
                case 30:
                    message.quality_ntile_2nd = reader.uint32();
                    break;
                case 31:
                    message.quality_ntile_5th = reader.uint32();
                    break;
                case 32:
                    message.quality_ntile_25th = reader.uint32();
                    break;
                case 33:
                    message.quality_ntile_50th = reader.uint32();
                    break;
                case 41:
                    message.ping_histogram_25 = reader.uint32();
                    break;
                case 42:
                    message.ping_histogram_50 = reader.uint32();
                    break;
                case 43:
                    message.ping_histogram_75 = reader.uint32();
                    break;
                case 44:
                    message.ping_histogram_100 = reader.uint32();
                    break;
                case 45:
                    message.ping_histogram_125 = reader.uint32();
                    break;
                case 46:
                    message.ping_histogram_150 = reader.uint32();
                    break;
                case 47:
                    message.ping_histogram_200 = reader.uint32();
                    break;
                case 48:
                    message.ping_histogram_300 = reader.uint32();
                    break;
                case 49:
                    message.ping_histogram_max = reader.uint32();
                    break;
                case 50:
                    message.ping_ntile_5th = reader.uint32();
                    break;
                case 51:
                    message.ping_ntile_50th = reader.uint32();
                    break;
                case 52:
                    message.ping_ntile_75th = reader.uint32();
                    break;
                case 53:
                    message.ping_ntile_95th = reader.uint32();
                    break;
                case 54:
                    message.ping_ntile_98th = reader.uint32();
                    break;
                case 61:
                    message.jitter_histogram_negligible = reader.uint32();
                    break;
                case 62:
                    message.jitter_histogram_1 = reader.uint32();
                    break;
                case 63:
                    message.jitter_histogram_2 = reader.uint32();
                    break;
                case 64:
                    message.jitter_histogram_5 = reader.uint32();
                    break;
                case 65:
                    message.jitter_histogram_10 = reader.uint32();
                    break;
                case 66:
                    message.jitter_histogram_20 = reader.uint32();
                    break;
                case 67:
                    message.txspeed_max = reader.uint32();
                    break;
                case 68:
                    message.txspeed_histogram_16 = reader.uint32();
                    break;
                case 69:
                    message.txspeed_histogram_32 = reader.uint32();
                    break;
                case 70:
                    message.txspeed_histogram_64 = reader.uint32();
                    break;
                case 71:
                    message.txspeed_histogram_128 = reader.uint32();
                    break;
                case 72:
                    message.txspeed_histogram_256 = reader.uint32();
                    break;
                case 73:
                    message.txspeed_histogram_512 = reader.uint32();
                    break;
                case 74:
                    message.txspeed_histogram_1024 = reader.uint32();
                    break;
                case 75:
                    message.txspeed_histogram_max = reader.uint32();
                    break;
                case 76:
                    message.txspeed_ntile_5th = reader.uint32();
                    break;
                case 77:
                    message.txspeed_ntile_50th = reader.uint32();
                    break;
                case 78:
                    message.txspeed_ntile_75th = reader.uint32();
                    break;
                case 79:
                    message.txspeed_ntile_95th = reader.uint32();
                    break;
                case 80:
                    message.txspeed_ntile_98th = reader.uint32();
                    break;
                case 81:
                    message.rxspeed_max = reader.uint32();
                    break;
                case 82:
                    message.rxspeed_histogram_16 = reader.uint32();
                    break;
                case 83:
                    message.rxspeed_histogram_32 = reader.uint32();
                    break;
                case 84:
                    message.rxspeed_histogram_64 = reader.uint32();
                    break;
                case 85:
                    message.rxspeed_histogram_128 = reader.uint32();
                    break;
                case 86:
                    message.rxspeed_histogram_256 = reader.uint32();
                    break;
                case 87:
                    message.rxspeed_histogram_512 = reader.uint32();
                    break;
                case 88:
                    message.rxspeed_histogram_1024 = reader.uint32();
                    break;
                case 89:
                    message.rxspeed_histogram_max = reader.uint32();
                    break;
                case 90:
                    message.rxspeed_ntile_5th = reader.uint32();
                    break;
                case 91:
                    message.rxspeed_ntile_50th = reader.uint32();
                    break;
                case 92:
                    message.rxspeed_ntile_75th = reader.uint32();
                    break;
                case 93:
                    message.rxspeed_ntile_95th = reader.uint32();
                    break;
                case 94:
                    message.rxspeed_ntile_98th = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkLifetimeStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkLifetimeStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramLinkLifetimeStats message.
         * @function verify
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramLinkLifetimeStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connected_seconds != null && message.hasOwnProperty("connected_seconds"))
                if (!$util.isInteger(message.connected_seconds))
                    return "connected_seconds: integer expected";
            if (message.packets_sent != null && message.hasOwnProperty("packets_sent"))
                if (!$util.isInteger(message.packets_sent) && !(message.packets_sent && $util.isInteger(message.packets_sent.low) && $util.isInteger(message.packets_sent.high)))
                    return "packets_sent: integer|Long expected";
            if (message.kb_sent != null && message.hasOwnProperty("kb_sent"))
                if (!$util.isInteger(message.kb_sent) && !(message.kb_sent && $util.isInteger(message.kb_sent.low) && $util.isInteger(message.kb_sent.high)))
                    return "kb_sent: integer|Long expected";
            if (message.packets_recv != null && message.hasOwnProperty("packets_recv"))
                if (!$util.isInteger(message.packets_recv) && !(message.packets_recv && $util.isInteger(message.packets_recv.low) && $util.isInteger(message.packets_recv.high)))
                    return "packets_recv: integer|Long expected";
            if (message.kb_recv != null && message.hasOwnProperty("kb_recv"))
                if (!$util.isInteger(message.kb_recv) && !(message.kb_recv && $util.isInteger(message.kb_recv.low) && $util.isInteger(message.kb_recv.high)))
                    return "kb_recv: integer|Long expected";
            if (message.packets_recv_sequenced != null && message.hasOwnProperty("packets_recv_sequenced"))
                if (!$util.isInteger(message.packets_recv_sequenced) && !(message.packets_recv_sequenced && $util.isInteger(message.packets_recv_sequenced.low) && $util.isInteger(message.packets_recv_sequenced.high)))
                    return "packets_recv_sequenced: integer|Long expected";
            if (message.packets_recv_dropped != null && message.hasOwnProperty("packets_recv_dropped"))
                if (!$util.isInteger(message.packets_recv_dropped) && !(message.packets_recv_dropped && $util.isInteger(message.packets_recv_dropped.low) && $util.isInteger(message.packets_recv_dropped.high)))
                    return "packets_recv_dropped: integer|Long expected";
            if (message.packets_recv_out_of_order != null && message.hasOwnProperty("packets_recv_out_of_order"))
                if (!$util.isInteger(message.packets_recv_out_of_order) && !(message.packets_recv_out_of_order && $util.isInteger(message.packets_recv_out_of_order.low) && $util.isInteger(message.packets_recv_out_of_order.high)))
                    return "packets_recv_out_of_order: integer|Long expected";
            if (message.packets_recv_duplicate != null && message.hasOwnProperty("packets_recv_duplicate"))
                if (!$util.isInteger(message.packets_recv_duplicate) && !(message.packets_recv_duplicate && $util.isInteger(message.packets_recv_duplicate.low) && $util.isInteger(message.packets_recv_duplicate.high)))
                    return "packets_recv_duplicate: integer|Long expected";
            if (message.packets_recv_lurch != null && message.hasOwnProperty("packets_recv_lurch"))
                if (!$util.isInteger(message.packets_recv_lurch) && !(message.packets_recv_lurch && $util.isInteger(message.packets_recv_lurch.low) && $util.isInteger(message.packets_recv_lurch.high)))
                    return "packets_recv_lurch: integer|Long expected";
            if (message.quality_histogram_100 != null && message.hasOwnProperty("quality_histogram_100"))
                if (!$util.isInteger(message.quality_histogram_100))
                    return "quality_histogram_100: integer expected";
            if (message.quality_histogram_99 != null && message.hasOwnProperty("quality_histogram_99"))
                if (!$util.isInteger(message.quality_histogram_99))
                    return "quality_histogram_99: integer expected";
            if (message.quality_histogram_97 != null && message.hasOwnProperty("quality_histogram_97"))
                if (!$util.isInteger(message.quality_histogram_97))
                    return "quality_histogram_97: integer expected";
            if (message.quality_histogram_95 != null && message.hasOwnProperty("quality_histogram_95"))
                if (!$util.isInteger(message.quality_histogram_95))
                    return "quality_histogram_95: integer expected";
            if (message.quality_histogram_90 != null && message.hasOwnProperty("quality_histogram_90"))
                if (!$util.isInteger(message.quality_histogram_90))
                    return "quality_histogram_90: integer expected";
            if (message.quality_histogram_75 != null && message.hasOwnProperty("quality_histogram_75"))
                if (!$util.isInteger(message.quality_histogram_75))
                    return "quality_histogram_75: integer expected";
            if (message.quality_histogram_50 != null && message.hasOwnProperty("quality_histogram_50"))
                if (!$util.isInteger(message.quality_histogram_50))
                    return "quality_histogram_50: integer expected";
            if (message.quality_histogram_1 != null && message.hasOwnProperty("quality_histogram_1"))
                if (!$util.isInteger(message.quality_histogram_1))
                    return "quality_histogram_1: integer expected";
            if (message.quality_histogram_dead != null && message.hasOwnProperty("quality_histogram_dead"))
                if (!$util.isInteger(message.quality_histogram_dead))
                    return "quality_histogram_dead: integer expected";
            if (message.quality_ntile_2nd != null && message.hasOwnProperty("quality_ntile_2nd"))
                if (!$util.isInteger(message.quality_ntile_2nd))
                    return "quality_ntile_2nd: integer expected";
            if (message.quality_ntile_5th != null && message.hasOwnProperty("quality_ntile_5th"))
                if (!$util.isInteger(message.quality_ntile_5th))
                    return "quality_ntile_5th: integer expected";
            if (message.quality_ntile_25th != null && message.hasOwnProperty("quality_ntile_25th"))
                if (!$util.isInteger(message.quality_ntile_25th))
                    return "quality_ntile_25th: integer expected";
            if (message.quality_ntile_50th != null && message.hasOwnProperty("quality_ntile_50th"))
                if (!$util.isInteger(message.quality_ntile_50th))
                    return "quality_ntile_50th: integer expected";
            if (message.ping_histogram_25 != null && message.hasOwnProperty("ping_histogram_25"))
                if (!$util.isInteger(message.ping_histogram_25))
                    return "ping_histogram_25: integer expected";
            if (message.ping_histogram_50 != null && message.hasOwnProperty("ping_histogram_50"))
                if (!$util.isInteger(message.ping_histogram_50))
                    return "ping_histogram_50: integer expected";
            if (message.ping_histogram_75 != null && message.hasOwnProperty("ping_histogram_75"))
                if (!$util.isInteger(message.ping_histogram_75))
                    return "ping_histogram_75: integer expected";
            if (message.ping_histogram_100 != null && message.hasOwnProperty("ping_histogram_100"))
                if (!$util.isInteger(message.ping_histogram_100))
                    return "ping_histogram_100: integer expected";
            if (message.ping_histogram_125 != null && message.hasOwnProperty("ping_histogram_125"))
                if (!$util.isInteger(message.ping_histogram_125))
                    return "ping_histogram_125: integer expected";
            if (message.ping_histogram_150 != null && message.hasOwnProperty("ping_histogram_150"))
                if (!$util.isInteger(message.ping_histogram_150))
                    return "ping_histogram_150: integer expected";
            if (message.ping_histogram_200 != null && message.hasOwnProperty("ping_histogram_200"))
                if (!$util.isInteger(message.ping_histogram_200))
                    return "ping_histogram_200: integer expected";
            if (message.ping_histogram_300 != null && message.hasOwnProperty("ping_histogram_300"))
                if (!$util.isInteger(message.ping_histogram_300))
                    return "ping_histogram_300: integer expected";
            if (message.ping_histogram_max != null && message.hasOwnProperty("ping_histogram_max"))
                if (!$util.isInteger(message.ping_histogram_max))
                    return "ping_histogram_max: integer expected";
            if (message.ping_ntile_5th != null && message.hasOwnProperty("ping_ntile_5th"))
                if (!$util.isInteger(message.ping_ntile_5th))
                    return "ping_ntile_5th: integer expected";
            if (message.ping_ntile_50th != null && message.hasOwnProperty("ping_ntile_50th"))
                if (!$util.isInteger(message.ping_ntile_50th))
                    return "ping_ntile_50th: integer expected";
            if (message.ping_ntile_75th != null && message.hasOwnProperty("ping_ntile_75th"))
                if (!$util.isInteger(message.ping_ntile_75th))
                    return "ping_ntile_75th: integer expected";
            if (message.ping_ntile_95th != null && message.hasOwnProperty("ping_ntile_95th"))
                if (!$util.isInteger(message.ping_ntile_95th))
                    return "ping_ntile_95th: integer expected";
            if (message.ping_ntile_98th != null && message.hasOwnProperty("ping_ntile_98th"))
                if (!$util.isInteger(message.ping_ntile_98th))
                    return "ping_ntile_98th: integer expected";
            if (message.jitter_histogram_negligible != null && message.hasOwnProperty("jitter_histogram_negligible"))
                if (!$util.isInteger(message.jitter_histogram_negligible))
                    return "jitter_histogram_negligible: integer expected";
            if (message.jitter_histogram_1 != null && message.hasOwnProperty("jitter_histogram_1"))
                if (!$util.isInteger(message.jitter_histogram_1))
                    return "jitter_histogram_1: integer expected";
            if (message.jitter_histogram_2 != null && message.hasOwnProperty("jitter_histogram_2"))
                if (!$util.isInteger(message.jitter_histogram_2))
                    return "jitter_histogram_2: integer expected";
            if (message.jitter_histogram_5 != null && message.hasOwnProperty("jitter_histogram_5"))
                if (!$util.isInteger(message.jitter_histogram_5))
                    return "jitter_histogram_5: integer expected";
            if (message.jitter_histogram_10 != null && message.hasOwnProperty("jitter_histogram_10"))
                if (!$util.isInteger(message.jitter_histogram_10))
                    return "jitter_histogram_10: integer expected";
            if (message.jitter_histogram_20 != null && message.hasOwnProperty("jitter_histogram_20"))
                if (!$util.isInteger(message.jitter_histogram_20))
                    return "jitter_histogram_20: integer expected";
            if (message.txspeed_max != null && message.hasOwnProperty("txspeed_max"))
                if (!$util.isInteger(message.txspeed_max))
                    return "txspeed_max: integer expected";
            if (message.txspeed_histogram_16 != null && message.hasOwnProperty("txspeed_histogram_16"))
                if (!$util.isInteger(message.txspeed_histogram_16))
                    return "txspeed_histogram_16: integer expected";
            if (message.txspeed_histogram_32 != null && message.hasOwnProperty("txspeed_histogram_32"))
                if (!$util.isInteger(message.txspeed_histogram_32))
                    return "txspeed_histogram_32: integer expected";
            if (message.txspeed_histogram_64 != null && message.hasOwnProperty("txspeed_histogram_64"))
                if (!$util.isInteger(message.txspeed_histogram_64))
                    return "txspeed_histogram_64: integer expected";
            if (message.txspeed_histogram_128 != null && message.hasOwnProperty("txspeed_histogram_128"))
                if (!$util.isInteger(message.txspeed_histogram_128))
                    return "txspeed_histogram_128: integer expected";
            if (message.txspeed_histogram_256 != null && message.hasOwnProperty("txspeed_histogram_256"))
                if (!$util.isInteger(message.txspeed_histogram_256))
                    return "txspeed_histogram_256: integer expected";
            if (message.txspeed_histogram_512 != null && message.hasOwnProperty("txspeed_histogram_512"))
                if (!$util.isInteger(message.txspeed_histogram_512))
                    return "txspeed_histogram_512: integer expected";
            if (message.txspeed_histogram_1024 != null && message.hasOwnProperty("txspeed_histogram_1024"))
                if (!$util.isInteger(message.txspeed_histogram_1024))
                    return "txspeed_histogram_1024: integer expected";
            if (message.txspeed_histogram_max != null && message.hasOwnProperty("txspeed_histogram_max"))
                if (!$util.isInteger(message.txspeed_histogram_max))
                    return "txspeed_histogram_max: integer expected";
            if (message.txspeed_ntile_5th != null && message.hasOwnProperty("txspeed_ntile_5th"))
                if (!$util.isInteger(message.txspeed_ntile_5th))
                    return "txspeed_ntile_5th: integer expected";
            if (message.txspeed_ntile_50th != null && message.hasOwnProperty("txspeed_ntile_50th"))
                if (!$util.isInteger(message.txspeed_ntile_50th))
                    return "txspeed_ntile_50th: integer expected";
            if (message.txspeed_ntile_75th != null && message.hasOwnProperty("txspeed_ntile_75th"))
                if (!$util.isInteger(message.txspeed_ntile_75th))
                    return "txspeed_ntile_75th: integer expected";
            if (message.txspeed_ntile_95th != null && message.hasOwnProperty("txspeed_ntile_95th"))
                if (!$util.isInteger(message.txspeed_ntile_95th))
                    return "txspeed_ntile_95th: integer expected";
            if (message.txspeed_ntile_98th != null && message.hasOwnProperty("txspeed_ntile_98th"))
                if (!$util.isInteger(message.txspeed_ntile_98th))
                    return "txspeed_ntile_98th: integer expected";
            if (message.rxspeed_max != null && message.hasOwnProperty("rxspeed_max"))
                if (!$util.isInteger(message.rxspeed_max))
                    return "rxspeed_max: integer expected";
            if (message.rxspeed_histogram_16 != null && message.hasOwnProperty("rxspeed_histogram_16"))
                if (!$util.isInteger(message.rxspeed_histogram_16))
                    return "rxspeed_histogram_16: integer expected";
            if (message.rxspeed_histogram_32 != null && message.hasOwnProperty("rxspeed_histogram_32"))
                if (!$util.isInteger(message.rxspeed_histogram_32))
                    return "rxspeed_histogram_32: integer expected";
            if (message.rxspeed_histogram_64 != null && message.hasOwnProperty("rxspeed_histogram_64"))
                if (!$util.isInteger(message.rxspeed_histogram_64))
                    return "rxspeed_histogram_64: integer expected";
            if (message.rxspeed_histogram_128 != null && message.hasOwnProperty("rxspeed_histogram_128"))
                if (!$util.isInteger(message.rxspeed_histogram_128))
                    return "rxspeed_histogram_128: integer expected";
            if (message.rxspeed_histogram_256 != null && message.hasOwnProperty("rxspeed_histogram_256"))
                if (!$util.isInteger(message.rxspeed_histogram_256))
                    return "rxspeed_histogram_256: integer expected";
            if (message.rxspeed_histogram_512 != null && message.hasOwnProperty("rxspeed_histogram_512"))
                if (!$util.isInteger(message.rxspeed_histogram_512))
                    return "rxspeed_histogram_512: integer expected";
            if (message.rxspeed_histogram_1024 != null && message.hasOwnProperty("rxspeed_histogram_1024"))
                if (!$util.isInteger(message.rxspeed_histogram_1024))
                    return "rxspeed_histogram_1024: integer expected";
            if (message.rxspeed_histogram_max != null && message.hasOwnProperty("rxspeed_histogram_max"))
                if (!$util.isInteger(message.rxspeed_histogram_max))
                    return "rxspeed_histogram_max: integer expected";
            if (message.rxspeed_ntile_5th != null && message.hasOwnProperty("rxspeed_ntile_5th"))
                if (!$util.isInteger(message.rxspeed_ntile_5th))
                    return "rxspeed_ntile_5th: integer expected";
            if (message.rxspeed_ntile_50th != null && message.hasOwnProperty("rxspeed_ntile_50th"))
                if (!$util.isInteger(message.rxspeed_ntile_50th))
                    return "rxspeed_ntile_50th: integer expected";
            if (message.rxspeed_ntile_75th != null && message.hasOwnProperty("rxspeed_ntile_75th"))
                if (!$util.isInteger(message.rxspeed_ntile_75th))
                    return "rxspeed_ntile_75th: integer expected";
            if (message.rxspeed_ntile_95th != null && message.hasOwnProperty("rxspeed_ntile_95th"))
                if (!$util.isInteger(message.rxspeed_ntile_95th))
                    return "rxspeed_ntile_95th: integer expected";
            if (message.rxspeed_ntile_98th != null && message.hasOwnProperty("rxspeed_ntile_98th"))
                if (!$util.isInteger(message.rxspeed_ntile_98th))
                    return "rxspeed_ntile_98th: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramLinkLifetimeStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats
         */
        CMsgSteamDatagramLinkLifetimeStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramLinkLifetimeStats)
                return object;
            var message = new $root.CMsgSteamDatagramLinkLifetimeStats();
            if (object.connected_seconds != null)
                message.connected_seconds = object.connected_seconds >>> 0;
            if (object.packets_sent != null)
                if ($util.Long)
                    (message.packets_sent = $util.Long.fromValue(object.packets_sent)).unsigned = true;
                else if (typeof object.packets_sent === "string")
                    message.packets_sent = parseInt(object.packets_sent, 10);
                else if (typeof object.packets_sent === "number")
                    message.packets_sent = object.packets_sent;
                else if (typeof object.packets_sent === "object")
                    message.packets_sent = new $util.LongBits(object.packets_sent.low >>> 0, object.packets_sent.high >>> 0).toNumber(true);
            if (object.kb_sent != null)
                if ($util.Long)
                    (message.kb_sent = $util.Long.fromValue(object.kb_sent)).unsigned = true;
                else if (typeof object.kb_sent === "string")
                    message.kb_sent = parseInt(object.kb_sent, 10);
                else if (typeof object.kb_sent === "number")
                    message.kb_sent = object.kb_sent;
                else if (typeof object.kb_sent === "object")
                    message.kb_sent = new $util.LongBits(object.kb_sent.low >>> 0, object.kb_sent.high >>> 0).toNumber(true);
            if (object.packets_recv != null)
                if ($util.Long)
                    (message.packets_recv = $util.Long.fromValue(object.packets_recv)).unsigned = true;
                else if (typeof object.packets_recv === "string")
                    message.packets_recv = parseInt(object.packets_recv, 10);
                else if (typeof object.packets_recv === "number")
                    message.packets_recv = object.packets_recv;
                else if (typeof object.packets_recv === "object")
                    message.packets_recv = new $util.LongBits(object.packets_recv.low >>> 0, object.packets_recv.high >>> 0).toNumber(true);
            if (object.kb_recv != null)
                if ($util.Long)
                    (message.kb_recv = $util.Long.fromValue(object.kb_recv)).unsigned = true;
                else if (typeof object.kb_recv === "string")
                    message.kb_recv = parseInt(object.kb_recv, 10);
                else if (typeof object.kb_recv === "number")
                    message.kb_recv = object.kb_recv;
                else if (typeof object.kb_recv === "object")
                    message.kb_recv = new $util.LongBits(object.kb_recv.low >>> 0, object.kb_recv.high >>> 0).toNumber(true);
            if (object.packets_recv_sequenced != null)
                if ($util.Long)
                    (message.packets_recv_sequenced = $util.Long.fromValue(object.packets_recv_sequenced)).unsigned = true;
                else if (typeof object.packets_recv_sequenced === "string")
                    message.packets_recv_sequenced = parseInt(object.packets_recv_sequenced, 10);
                else if (typeof object.packets_recv_sequenced === "number")
                    message.packets_recv_sequenced = object.packets_recv_sequenced;
                else if (typeof object.packets_recv_sequenced === "object")
                    message.packets_recv_sequenced = new $util.LongBits(object.packets_recv_sequenced.low >>> 0, object.packets_recv_sequenced.high >>> 0).toNumber(true);
            if (object.packets_recv_dropped != null)
                if ($util.Long)
                    (message.packets_recv_dropped = $util.Long.fromValue(object.packets_recv_dropped)).unsigned = true;
                else if (typeof object.packets_recv_dropped === "string")
                    message.packets_recv_dropped = parseInt(object.packets_recv_dropped, 10);
                else if (typeof object.packets_recv_dropped === "number")
                    message.packets_recv_dropped = object.packets_recv_dropped;
                else if (typeof object.packets_recv_dropped === "object")
                    message.packets_recv_dropped = new $util.LongBits(object.packets_recv_dropped.low >>> 0, object.packets_recv_dropped.high >>> 0).toNumber(true);
            if (object.packets_recv_out_of_order != null)
                if ($util.Long)
                    (message.packets_recv_out_of_order = $util.Long.fromValue(object.packets_recv_out_of_order)).unsigned = true;
                else if (typeof object.packets_recv_out_of_order === "string")
                    message.packets_recv_out_of_order = parseInt(object.packets_recv_out_of_order, 10);
                else if (typeof object.packets_recv_out_of_order === "number")
                    message.packets_recv_out_of_order = object.packets_recv_out_of_order;
                else if (typeof object.packets_recv_out_of_order === "object")
                    message.packets_recv_out_of_order = new $util.LongBits(object.packets_recv_out_of_order.low >>> 0, object.packets_recv_out_of_order.high >>> 0).toNumber(true);
            if (object.packets_recv_duplicate != null)
                if ($util.Long)
                    (message.packets_recv_duplicate = $util.Long.fromValue(object.packets_recv_duplicate)).unsigned = true;
                else if (typeof object.packets_recv_duplicate === "string")
                    message.packets_recv_duplicate = parseInt(object.packets_recv_duplicate, 10);
                else if (typeof object.packets_recv_duplicate === "number")
                    message.packets_recv_duplicate = object.packets_recv_duplicate;
                else if (typeof object.packets_recv_duplicate === "object")
                    message.packets_recv_duplicate = new $util.LongBits(object.packets_recv_duplicate.low >>> 0, object.packets_recv_duplicate.high >>> 0).toNumber(true);
            if (object.packets_recv_lurch != null)
                if ($util.Long)
                    (message.packets_recv_lurch = $util.Long.fromValue(object.packets_recv_lurch)).unsigned = true;
                else if (typeof object.packets_recv_lurch === "string")
                    message.packets_recv_lurch = parseInt(object.packets_recv_lurch, 10);
                else if (typeof object.packets_recv_lurch === "number")
                    message.packets_recv_lurch = object.packets_recv_lurch;
                else if (typeof object.packets_recv_lurch === "object")
                    message.packets_recv_lurch = new $util.LongBits(object.packets_recv_lurch.low >>> 0, object.packets_recv_lurch.high >>> 0).toNumber(true);
            if (object.quality_histogram_100 != null)
                message.quality_histogram_100 = object.quality_histogram_100 >>> 0;
            if (object.quality_histogram_99 != null)
                message.quality_histogram_99 = object.quality_histogram_99 >>> 0;
            if (object.quality_histogram_97 != null)
                message.quality_histogram_97 = object.quality_histogram_97 >>> 0;
            if (object.quality_histogram_95 != null)
                message.quality_histogram_95 = object.quality_histogram_95 >>> 0;
            if (object.quality_histogram_90 != null)
                message.quality_histogram_90 = object.quality_histogram_90 >>> 0;
            if (object.quality_histogram_75 != null)
                message.quality_histogram_75 = object.quality_histogram_75 >>> 0;
            if (object.quality_histogram_50 != null)
                message.quality_histogram_50 = object.quality_histogram_50 >>> 0;
            if (object.quality_histogram_1 != null)
                message.quality_histogram_1 = object.quality_histogram_1 >>> 0;
            if (object.quality_histogram_dead != null)
                message.quality_histogram_dead = object.quality_histogram_dead >>> 0;
            if (object.quality_ntile_2nd != null)
                message.quality_ntile_2nd = object.quality_ntile_2nd >>> 0;
            if (object.quality_ntile_5th != null)
                message.quality_ntile_5th = object.quality_ntile_5th >>> 0;
            if (object.quality_ntile_25th != null)
                message.quality_ntile_25th = object.quality_ntile_25th >>> 0;
            if (object.quality_ntile_50th != null)
                message.quality_ntile_50th = object.quality_ntile_50th >>> 0;
            if (object.ping_histogram_25 != null)
                message.ping_histogram_25 = object.ping_histogram_25 >>> 0;
            if (object.ping_histogram_50 != null)
                message.ping_histogram_50 = object.ping_histogram_50 >>> 0;
            if (object.ping_histogram_75 != null)
                message.ping_histogram_75 = object.ping_histogram_75 >>> 0;
            if (object.ping_histogram_100 != null)
                message.ping_histogram_100 = object.ping_histogram_100 >>> 0;
            if (object.ping_histogram_125 != null)
                message.ping_histogram_125 = object.ping_histogram_125 >>> 0;
            if (object.ping_histogram_150 != null)
                message.ping_histogram_150 = object.ping_histogram_150 >>> 0;
            if (object.ping_histogram_200 != null)
                message.ping_histogram_200 = object.ping_histogram_200 >>> 0;
            if (object.ping_histogram_300 != null)
                message.ping_histogram_300 = object.ping_histogram_300 >>> 0;
            if (object.ping_histogram_max != null)
                message.ping_histogram_max = object.ping_histogram_max >>> 0;
            if (object.ping_ntile_5th != null)
                message.ping_ntile_5th = object.ping_ntile_5th >>> 0;
            if (object.ping_ntile_50th != null)
                message.ping_ntile_50th = object.ping_ntile_50th >>> 0;
            if (object.ping_ntile_75th != null)
                message.ping_ntile_75th = object.ping_ntile_75th >>> 0;
            if (object.ping_ntile_95th != null)
                message.ping_ntile_95th = object.ping_ntile_95th >>> 0;
            if (object.ping_ntile_98th != null)
                message.ping_ntile_98th = object.ping_ntile_98th >>> 0;
            if (object.jitter_histogram_negligible != null)
                message.jitter_histogram_negligible = object.jitter_histogram_negligible >>> 0;
            if (object.jitter_histogram_1 != null)
                message.jitter_histogram_1 = object.jitter_histogram_1 >>> 0;
            if (object.jitter_histogram_2 != null)
                message.jitter_histogram_2 = object.jitter_histogram_2 >>> 0;
            if (object.jitter_histogram_5 != null)
                message.jitter_histogram_5 = object.jitter_histogram_5 >>> 0;
            if (object.jitter_histogram_10 != null)
                message.jitter_histogram_10 = object.jitter_histogram_10 >>> 0;
            if (object.jitter_histogram_20 != null)
                message.jitter_histogram_20 = object.jitter_histogram_20 >>> 0;
            if (object.txspeed_max != null)
                message.txspeed_max = object.txspeed_max >>> 0;
            if (object.txspeed_histogram_16 != null)
                message.txspeed_histogram_16 = object.txspeed_histogram_16 >>> 0;
            if (object.txspeed_histogram_32 != null)
                message.txspeed_histogram_32 = object.txspeed_histogram_32 >>> 0;
            if (object.txspeed_histogram_64 != null)
                message.txspeed_histogram_64 = object.txspeed_histogram_64 >>> 0;
            if (object.txspeed_histogram_128 != null)
                message.txspeed_histogram_128 = object.txspeed_histogram_128 >>> 0;
            if (object.txspeed_histogram_256 != null)
                message.txspeed_histogram_256 = object.txspeed_histogram_256 >>> 0;
            if (object.txspeed_histogram_512 != null)
                message.txspeed_histogram_512 = object.txspeed_histogram_512 >>> 0;
            if (object.txspeed_histogram_1024 != null)
                message.txspeed_histogram_1024 = object.txspeed_histogram_1024 >>> 0;
            if (object.txspeed_histogram_max != null)
                message.txspeed_histogram_max = object.txspeed_histogram_max >>> 0;
            if (object.txspeed_ntile_5th != null)
                message.txspeed_ntile_5th = object.txspeed_ntile_5th >>> 0;
            if (object.txspeed_ntile_50th != null)
                message.txspeed_ntile_50th = object.txspeed_ntile_50th >>> 0;
            if (object.txspeed_ntile_75th != null)
                message.txspeed_ntile_75th = object.txspeed_ntile_75th >>> 0;
            if (object.txspeed_ntile_95th != null)
                message.txspeed_ntile_95th = object.txspeed_ntile_95th >>> 0;
            if (object.txspeed_ntile_98th != null)
                message.txspeed_ntile_98th = object.txspeed_ntile_98th >>> 0;
            if (object.rxspeed_max != null)
                message.rxspeed_max = object.rxspeed_max >>> 0;
            if (object.rxspeed_histogram_16 != null)
                message.rxspeed_histogram_16 = object.rxspeed_histogram_16 >>> 0;
            if (object.rxspeed_histogram_32 != null)
                message.rxspeed_histogram_32 = object.rxspeed_histogram_32 >>> 0;
            if (object.rxspeed_histogram_64 != null)
                message.rxspeed_histogram_64 = object.rxspeed_histogram_64 >>> 0;
            if (object.rxspeed_histogram_128 != null)
                message.rxspeed_histogram_128 = object.rxspeed_histogram_128 >>> 0;
            if (object.rxspeed_histogram_256 != null)
                message.rxspeed_histogram_256 = object.rxspeed_histogram_256 >>> 0;
            if (object.rxspeed_histogram_512 != null)
                message.rxspeed_histogram_512 = object.rxspeed_histogram_512 >>> 0;
            if (object.rxspeed_histogram_1024 != null)
                message.rxspeed_histogram_1024 = object.rxspeed_histogram_1024 >>> 0;
            if (object.rxspeed_histogram_max != null)
                message.rxspeed_histogram_max = object.rxspeed_histogram_max >>> 0;
            if (object.rxspeed_ntile_5th != null)
                message.rxspeed_ntile_5th = object.rxspeed_ntile_5th >>> 0;
            if (object.rxspeed_ntile_50th != null)
                message.rxspeed_ntile_50th = object.rxspeed_ntile_50th >>> 0;
            if (object.rxspeed_ntile_75th != null)
                message.rxspeed_ntile_75th = object.rxspeed_ntile_75th >>> 0;
            if (object.rxspeed_ntile_95th != null)
                message.rxspeed_ntile_95th = object.rxspeed_ntile_95th >>> 0;
            if (object.rxspeed_ntile_98th != null)
                message.rxspeed_ntile_98th = object.rxspeed_ntile_98th >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramLinkLifetimeStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {CMsgSteamDatagramLinkLifetimeStats} message CMsgSteamDatagramLinkLifetimeStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramLinkLifetimeStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connected_seconds = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packets_sent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packets_sent = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.kb_sent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kb_sent = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packets_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packets_recv = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.kb_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kb_recv = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packets_recv_sequenced = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packets_recv_sequenced = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packets_recv_dropped = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packets_recv_dropped = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packets_recv_out_of_order = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packets_recv_out_of_order = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packets_recv_duplicate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packets_recv_duplicate = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packets_recv_lurch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packets_recv_lurch = options.longs === String ? "0" : 0;
                object.quality_histogram_100 = 0;
                object.quality_histogram_99 = 0;
                object.quality_histogram_97 = 0;
                object.quality_histogram_95 = 0;
                object.quality_histogram_90 = 0;
                object.quality_histogram_75 = 0;
                object.quality_histogram_50 = 0;
                object.quality_histogram_1 = 0;
                object.quality_histogram_dead = 0;
                object.quality_ntile_2nd = 0;
                object.quality_ntile_5th = 0;
                object.quality_ntile_25th = 0;
                object.quality_ntile_50th = 0;
                object.ping_histogram_25 = 0;
                object.ping_histogram_50 = 0;
                object.ping_histogram_75 = 0;
                object.ping_histogram_100 = 0;
                object.ping_histogram_125 = 0;
                object.ping_histogram_150 = 0;
                object.ping_histogram_200 = 0;
                object.ping_histogram_300 = 0;
                object.ping_histogram_max = 0;
                object.ping_ntile_5th = 0;
                object.ping_ntile_50th = 0;
                object.ping_ntile_75th = 0;
                object.ping_ntile_95th = 0;
                object.ping_ntile_98th = 0;
                object.jitter_histogram_negligible = 0;
                object.jitter_histogram_1 = 0;
                object.jitter_histogram_2 = 0;
                object.jitter_histogram_5 = 0;
                object.jitter_histogram_10 = 0;
                object.jitter_histogram_20 = 0;
                object.txspeed_max = 0;
                object.txspeed_histogram_16 = 0;
                object.txspeed_histogram_32 = 0;
                object.txspeed_histogram_64 = 0;
                object.txspeed_histogram_128 = 0;
                object.txspeed_histogram_256 = 0;
                object.txspeed_histogram_512 = 0;
                object.txspeed_histogram_1024 = 0;
                object.txspeed_histogram_max = 0;
                object.txspeed_ntile_5th = 0;
                object.txspeed_ntile_50th = 0;
                object.txspeed_ntile_75th = 0;
                object.txspeed_ntile_95th = 0;
                object.txspeed_ntile_98th = 0;
                object.rxspeed_max = 0;
                object.rxspeed_histogram_16 = 0;
                object.rxspeed_histogram_32 = 0;
                object.rxspeed_histogram_64 = 0;
                object.rxspeed_histogram_128 = 0;
                object.rxspeed_histogram_256 = 0;
                object.rxspeed_histogram_512 = 0;
                object.rxspeed_histogram_1024 = 0;
                object.rxspeed_histogram_max = 0;
                object.rxspeed_ntile_5th = 0;
                object.rxspeed_ntile_50th = 0;
                object.rxspeed_ntile_75th = 0;
                object.rxspeed_ntile_95th = 0;
                object.rxspeed_ntile_98th = 0;
            }
            if (message.connected_seconds != null && message.hasOwnProperty("connected_seconds"))
                object.connected_seconds = message.connected_seconds;
            if (message.packets_sent != null && message.hasOwnProperty("packets_sent"))
                if (typeof message.packets_sent === "number")
                    object.packets_sent = options.longs === String ? String(message.packets_sent) : message.packets_sent;
                else
                    object.packets_sent = options.longs === String ? $util.Long.prototype.toString.call(message.packets_sent) : options.longs === Number ? new $util.LongBits(message.packets_sent.low >>> 0, message.packets_sent.high >>> 0).toNumber(true) : message.packets_sent;
            if (message.kb_sent != null && message.hasOwnProperty("kb_sent"))
                if (typeof message.kb_sent === "number")
                    object.kb_sent = options.longs === String ? String(message.kb_sent) : message.kb_sent;
                else
                    object.kb_sent = options.longs === String ? $util.Long.prototype.toString.call(message.kb_sent) : options.longs === Number ? new $util.LongBits(message.kb_sent.low >>> 0, message.kb_sent.high >>> 0).toNumber(true) : message.kb_sent;
            if (message.packets_recv != null && message.hasOwnProperty("packets_recv"))
                if (typeof message.packets_recv === "number")
                    object.packets_recv = options.longs === String ? String(message.packets_recv) : message.packets_recv;
                else
                    object.packets_recv = options.longs === String ? $util.Long.prototype.toString.call(message.packets_recv) : options.longs === Number ? new $util.LongBits(message.packets_recv.low >>> 0, message.packets_recv.high >>> 0).toNumber(true) : message.packets_recv;
            if (message.kb_recv != null && message.hasOwnProperty("kb_recv"))
                if (typeof message.kb_recv === "number")
                    object.kb_recv = options.longs === String ? String(message.kb_recv) : message.kb_recv;
                else
                    object.kb_recv = options.longs === String ? $util.Long.prototype.toString.call(message.kb_recv) : options.longs === Number ? new $util.LongBits(message.kb_recv.low >>> 0, message.kb_recv.high >>> 0).toNumber(true) : message.kb_recv;
            if (message.packets_recv_sequenced != null && message.hasOwnProperty("packets_recv_sequenced"))
                if (typeof message.packets_recv_sequenced === "number")
                    object.packets_recv_sequenced = options.longs === String ? String(message.packets_recv_sequenced) : message.packets_recv_sequenced;
                else
                    object.packets_recv_sequenced = options.longs === String ? $util.Long.prototype.toString.call(message.packets_recv_sequenced) : options.longs === Number ? new $util.LongBits(message.packets_recv_sequenced.low >>> 0, message.packets_recv_sequenced.high >>> 0).toNumber(true) : message.packets_recv_sequenced;
            if (message.packets_recv_dropped != null && message.hasOwnProperty("packets_recv_dropped"))
                if (typeof message.packets_recv_dropped === "number")
                    object.packets_recv_dropped = options.longs === String ? String(message.packets_recv_dropped) : message.packets_recv_dropped;
                else
                    object.packets_recv_dropped = options.longs === String ? $util.Long.prototype.toString.call(message.packets_recv_dropped) : options.longs === Number ? new $util.LongBits(message.packets_recv_dropped.low >>> 0, message.packets_recv_dropped.high >>> 0).toNumber(true) : message.packets_recv_dropped;
            if (message.packets_recv_out_of_order != null && message.hasOwnProperty("packets_recv_out_of_order"))
                if (typeof message.packets_recv_out_of_order === "number")
                    object.packets_recv_out_of_order = options.longs === String ? String(message.packets_recv_out_of_order) : message.packets_recv_out_of_order;
                else
                    object.packets_recv_out_of_order = options.longs === String ? $util.Long.prototype.toString.call(message.packets_recv_out_of_order) : options.longs === Number ? new $util.LongBits(message.packets_recv_out_of_order.low >>> 0, message.packets_recv_out_of_order.high >>> 0).toNumber(true) : message.packets_recv_out_of_order;
            if (message.packets_recv_duplicate != null && message.hasOwnProperty("packets_recv_duplicate"))
                if (typeof message.packets_recv_duplicate === "number")
                    object.packets_recv_duplicate = options.longs === String ? String(message.packets_recv_duplicate) : message.packets_recv_duplicate;
                else
                    object.packets_recv_duplicate = options.longs === String ? $util.Long.prototype.toString.call(message.packets_recv_duplicate) : options.longs === Number ? new $util.LongBits(message.packets_recv_duplicate.low >>> 0, message.packets_recv_duplicate.high >>> 0).toNumber(true) : message.packets_recv_duplicate;
            if (message.packets_recv_lurch != null && message.hasOwnProperty("packets_recv_lurch"))
                if (typeof message.packets_recv_lurch === "number")
                    object.packets_recv_lurch = options.longs === String ? String(message.packets_recv_lurch) : message.packets_recv_lurch;
                else
                    object.packets_recv_lurch = options.longs === String ? $util.Long.prototype.toString.call(message.packets_recv_lurch) : options.longs === Number ? new $util.LongBits(message.packets_recv_lurch.low >>> 0, message.packets_recv_lurch.high >>> 0).toNumber(true) : message.packets_recv_lurch;
            if (message.quality_histogram_100 != null && message.hasOwnProperty("quality_histogram_100"))
                object.quality_histogram_100 = message.quality_histogram_100;
            if (message.quality_histogram_99 != null && message.hasOwnProperty("quality_histogram_99"))
                object.quality_histogram_99 = message.quality_histogram_99;
            if (message.quality_histogram_97 != null && message.hasOwnProperty("quality_histogram_97"))
                object.quality_histogram_97 = message.quality_histogram_97;
            if (message.quality_histogram_95 != null && message.hasOwnProperty("quality_histogram_95"))
                object.quality_histogram_95 = message.quality_histogram_95;
            if (message.quality_histogram_90 != null && message.hasOwnProperty("quality_histogram_90"))
                object.quality_histogram_90 = message.quality_histogram_90;
            if (message.quality_histogram_75 != null && message.hasOwnProperty("quality_histogram_75"))
                object.quality_histogram_75 = message.quality_histogram_75;
            if (message.quality_histogram_50 != null && message.hasOwnProperty("quality_histogram_50"))
                object.quality_histogram_50 = message.quality_histogram_50;
            if (message.quality_histogram_1 != null && message.hasOwnProperty("quality_histogram_1"))
                object.quality_histogram_1 = message.quality_histogram_1;
            if (message.quality_histogram_dead != null && message.hasOwnProperty("quality_histogram_dead"))
                object.quality_histogram_dead = message.quality_histogram_dead;
            if (message.quality_ntile_2nd != null && message.hasOwnProperty("quality_ntile_2nd"))
                object.quality_ntile_2nd = message.quality_ntile_2nd;
            if (message.quality_ntile_5th != null && message.hasOwnProperty("quality_ntile_5th"))
                object.quality_ntile_5th = message.quality_ntile_5th;
            if (message.quality_ntile_25th != null && message.hasOwnProperty("quality_ntile_25th"))
                object.quality_ntile_25th = message.quality_ntile_25th;
            if (message.quality_ntile_50th != null && message.hasOwnProperty("quality_ntile_50th"))
                object.quality_ntile_50th = message.quality_ntile_50th;
            if (message.ping_histogram_25 != null && message.hasOwnProperty("ping_histogram_25"))
                object.ping_histogram_25 = message.ping_histogram_25;
            if (message.ping_histogram_50 != null && message.hasOwnProperty("ping_histogram_50"))
                object.ping_histogram_50 = message.ping_histogram_50;
            if (message.ping_histogram_75 != null && message.hasOwnProperty("ping_histogram_75"))
                object.ping_histogram_75 = message.ping_histogram_75;
            if (message.ping_histogram_100 != null && message.hasOwnProperty("ping_histogram_100"))
                object.ping_histogram_100 = message.ping_histogram_100;
            if (message.ping_histogram_125 != null && message.hasOwnProperty("ping_histogram_125"))
                object.ping_histogram_125 = message.ping_histogram_125;
            if (message.ping_histogram_150 != null && message.hasOwnProperty("ping_histogram_150"))
                object.ping_histogram_150 = message.ping_histogram_150;
            if (message.ping_histogram_200 != null && message.hasOwnProperty("ping_histogram_200"))
                object.ping_histogram_200 = message.ping_histogram_200;
            if (message.ping_histogram_300 != null && message.hasOwnProperty("ping_histogram_300"))
                object.ping_histogram_300 = message.ping_histogram_300;
            if (message.ping_histogram_max != null && message.hasOwnProperty("ping_histogram_max"))
                object.ping_histogram_max = message.ping_histogram_max;
            if (message.ping_ntile_5th != null && message.hasOwnProperty("ping_ntile_5th"))
                object.ping_ntile_5th = message.ping_ntile_5th;
            if (message.ping_ntile_50th != null && message.hasOwnProperty("ping_ntile_50th"))
                object.ping_ntile_50th = message.ping_ntile_50th;
            if (message.ping_ntile_75th != null && message.hasOwnProperty("ping_ntile_75th"))
                object.ping_ntile_75th = message.ping_ntile_75th;
            if (message.ping_ntile_95th != null && message.hasOwnProperty("ping_ntile_95th"))
                object.ping_ntile_95th = message.ping_ntile_95th;
            if (message.ping_ntile_98th != null && message.hasOwnProperty("ping_ntile_98th"))
                object.ping_ntile_98th = message.ping_ntile_98th;
            if (message.jitter_histogram_negligible != null && message.hasOwnProperty("jitter_histogram_negligible"))
                object.jitter_histogram_negligible = message.jitter_histogram_negligible;
            if (message.jitter_histogram_1 != null && message.hasOwnProperty("jitter_histogram_1"))
                object.jitter_histogram_1 = message.jitter_histogram_1;
            if (message.jitter_histogram_2 != null && message.hasOwnProperty("jitter_histogram_2"))
                object.jitter_histogram_2 = message.jitter_histogram_2;
            if (message.jitter_histogram_5 != null && message.hasOwnProperty("jitter_histogram_5"))
                object.jitter_histogram_5 = message.jitter_histogram_5;
            if (message.jitter_histogram_10 != null && message.hasOwnProperty("jitter_histogram_10"))
                object.jitter_histogram_10 = message.jitter_histogram_10;
            if (message.jitter_histogram_20 != null && message.hasOwnProperty("jitter_histogram_20"))
                object.jitter_histogram_20 = message.jitter_histogram_20;
            if (message.txspeed_max != null && message.hasOwnProperty("txspeed_max"))
                object.txspeed_max = message.txspeed_max;
            if (message.txspeed_histogram_16 != null && message.hasOwnProperty("txspeed_histogram_16"))
                object.txspeed_histogram_16 = message.txspeed_histogram_16;
            if (message.txspeed_histogram_32 != null && message.hasOwnProperty("txspeed_histogram_32"))
                object.txspeed_histogram_32 = message.txspeed_histogram_32;
            if (message.txspeed_histogram_64 != null && message.hasOwnProperty("txspeed_histogram_64"))
                object.txspeed_histogram_64 = message.txspeed_histogram_64;
            if (message.txspeed_histogram_128 != null && message.hasOwnProperty("txspeed_histogram_128"))
                object.txspeed_histogram_128 = message.txspeed_histogram_128;
            if (message.txspeed_histogram_256 != null && message.hasOwnProperty("txspeed_histogram_256"))
                object.txspeed_histogram_256 = message.txspeed_histogram_256;
            if (message.txspeed_histogram_512 != null && message.hasOwnProperty("txspeed_histogram_512"))
                object.txspeed_histogram_512 = message.txspeed_histogram_512;
            if (message.txspeed_histogram_1024 != null && message.hasOwnProperty("txspeed_histogram_1024"))
                object.txspeed_histogram_1024 = message.txspeed_histogram_1024;
            if (message.txspeed_histogram_max != null && message.hasOwnProperty("txspeed_histogram_max"))
                object.txspeed_histogram_max = message.txspeed_histogram_max;
            if (message.txspeed_ntile_5th != null && message.hasOwnProperty("txspeed_ntile_5th"))
                object.txspeed_ntile_5th = message.txspeed_ntile_5th;
            if (message.txspeed_ntile_50th != null && message.hasOwnProperty("txspeed_ntile_50th"))
                object.txspeed_ntile_50th = message.txspeed_ntile_50th;
            if (message.txspeed_ntile_75th != null && message.hasOwnProperty("txspeed_ntile_75th"))
                object.txspeed_ntile_75th = message.txspeed_ntile_75th;
            if (message.txspeed_ntile_95th != null && message.hasOwnProperty("txspeed_ntile_95th"))
                object.txspeed_ntile_95th = message.txspeed_ntile_95th;
            if (message.txspeed_ntile_98th != null && message.hasOwnProperty("txspeed_ntile_98th"))
                object.txspeed_ntile_98th = message.txspeed_ntile_98th;
            if (message.rxspeed_max != null && message.hasOwnProperty("rxspeed_max"))
                object.rxspeed_max = message.rxspeed_max;
            if (message.rxspeed_histogram_16 != null && message.hasOwnProperty("rxspeed_histogram_16"))
                object.rxspeed_histogram_16 = message.rxspeed_histogram_16;
            if (message.rxspeed_histogram_32 != null && message.hasOwnProperty("rxspeed_histogram_32"))
                object.rxspeed_histogram_32 = message.rxspeed_histogram_32;
            if (message.rxspeed_histogram_64 != null && message.hasOwnProperty("rxspeed_histogram_64"))
                object.rxspeed_histogram_64 = message.rxspeed_histogram_64;
            if (message.rxspeed_histogram_128 != null && message.hasOwnProperty("rxspeed_histogram_128"))
                object.rxspeed_histogram_128 = message.rxspeed_histogram_128;
            if (message.rxspeed_histogram_256 != null && message.hasOwnProperty("rxspeed_histogram_256"))
                object.rxspeed_histogram_256 = message.rxspeed_histogram_256;
            if (message.rxspeed_histogram_512 != null && message.hasOwnProperty("rxspeed_histogram_512"))
                object.rxspeed_histogram_512 = message.rxspeed_histogram_512;
            if (message.rxspeed_histogram_1024 != null && message.hasOwnProperty("rxspeed_histogram_1024"))
                object.rxspeed_histogram_1024 = message.rxspeed_histogram_1024;
            if (message.rxspeed_histogram_max != null && message.hasOwnProperty("rxspeed_histogram_max"))
                object.rxspeed_histogram_max = message.rxspeed_histogram_max;
            if (message.rxspeed_ntile_5th != null && message.hasOwnProperty("rxspeed_ntile_5th"))
                object.rxspeed_ntile_5th = message.rxspeed_ntile_5th;
            if (message.rxspeed_ntile_50th != null && message.hasOwnProperty("rxspeed_ntile_50th"))
                object.rxspeed_ntile_50th = message.rxspeed_ntile_50th;
            if (message.rxspeed_ntile_75th != null && message.hasOwnProperty("rxspeed_ntile_75th"))
                object.rxspeed_ntile_75th = message.rxspeed_ntile_75th;
            if (message.rxspeed_ntile_95th != null && message.hasOwnProperty("rxspeed_ntile_95th"))
                object.rxspeed_ntile_95th = message.rxspeed_ntile_95th;
            if (message.rxspeed_ntile_98th != null && message.hasOwnProperty("rxspeed_ntile_98th"))
                object.rxspeed_ntile_98th = message.rxspeed_ntile_98th;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramLinkLifetimeStats to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramLinkLifetimeStats;
    })();
    
    $root.CMsgSteamDatagramConnectionQuality = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionQuality.
         * @exports ICMsgSteamDatagramConnectionQuality
         * @interface ICMsgSteamDatagramConnectionQuality
         * @property {ICMsgSteamDatagramLinkInstantaneousStats|null} [instantaneous] CMsgSteamDatagramConnectionQuality instantaneous
         * @property {ICMsgSteamDatagramLinkLifetimeStats|null} [lifetime] CMsgSteamDatagramConnectionQuality lifetime
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionQuality.
         * @exports CMsgSteamDatagramConnectionQuality
         * @classdesc Represents a CMsgSteamDatagramConnectionQuality.
         * @implements ICMsgSteamDatagramConnectionQuality
         * @constructor
         * @param {ICMsgSteamDatagramConnectionQuality=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionQuality(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionQuality instantaneous.
         * @member {ICMsgSteamDatagramLinkInstantaneousStats|null|undefined} instantaneous
         * @memberof CMsgSteamDatagramConnectionQuality
         * @instance
         */
        CMsgSteamDatagramConnectionQuality.prototype.instantaneous = null;
    
        /**
         * CMsgSteamDatagramConnectionQuality lifetime.
         * @member {ICMsgSteamDatagramLinkLifetimeStats|null|undefined} lifetime
         * @memberof CMsgSteamDatagramConnectionQuality
         * @instance
         */
        CMsgSteamDatagramConnectionQuality.prototype.lifetime = null;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionQuality instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {ICMsgSteamDatagramConnectionQuality=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality instance
         */
        CMsgSteamDatagramConnectionQuality.create = function create(properties) {
            return new CMsgSteamDatagramConnectionQuality(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionQuality message. Does not implicitly {@link CMsgSteamDatagramConnectionQuality.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {ICMsgSteamDatagramConnectionQuality} message CMsgSteamDatagramConnectionQuality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionQuality.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.instantaneous != null && Object.hasOwnProperty.call(message, "instantaneous"))
                $root.CMsgSteamDatagramLinkInstantaneousStats.encode(message.instantaneous, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.lifetime != null && Object.hasOwnProperty.call(message, "lifetime"))
                $root.CMsgSteamDatagramLinkLifetimeStats.encode(message.lifetime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionQuality message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionQuality.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {ICMsgSteamDatagramConnectionQuality} message CMsgSteamDatagramConnectionQuality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionQuality.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionQuality message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionQuality.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionQuality();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.instantaneous = $root.CMsgSteamDatagramLinkInstantaneousStats.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lifetime = $root.CMsgSteamDatagramLinkLifetimeStats.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionQuality message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionQuality.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionQuality message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionQuality.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.instantaneous != null && message.hasOwnProperty("instantaneous")) {
                var error = $root.CMsgSteamDatagramLinkInstantaneousStats.verify(message.instantaneous);
                if (error)
                    return "instantaneous." + error;
            }
            if (message.lifetime != null && message.hasOwnProperty("lifetime")) {
                var error = $root.CMsgSteamDatagramLinkLifetimeStats.verify(message.lifetime);
                if (error)
                    return "lifetime." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionQuality message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality
         */
        CMsgSteamDatagramConnectionQuality.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionQuality)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionQuality();
            if (object.instantaneous != null) {
                if (typeof object.instantaneous !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionQuality.instantaneous: object expected");
                message.instantaneous = $root.CMsgSteamDatagramLinkInstantaneousStats.fromObject(object.instantaneous);
            }
            if (object.lifetime != null) {
                if (typeof object.lifetime !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionQuality.lifetime: object expected");
                message.lifetime = $root.CMsgSteamDatagramLinkLifetimeStats.fromObject(object.lifetime);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionQuality message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {CMsgSteamDatagramConnectionQuality} message CMsgSteamDatagramConnectionQuality
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionQuality.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.instantaneous = null;
                object.lifetime = null;
            }
            if (message.instantaneous != null && message.hasOwnProperty("instantaneous"))
                object.instantaneous = $root.CMsgSteamDatagramLinkInstantaneousStats.toObject(message.instantaneous, options);
            if (message.lifetime != null && message.hasOwnProperty("lifetime"))
                object.lifetime = $root.CMsgSteamDatagramLinkLifetimeStats.toObject(message.lifetime, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionQuality to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionQuality
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionQuality.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamDatagramConnectionQuality;
    })();
    
    $root.CMsgICERendezvous = (function() {
    
        /**
         * Properties of a CMsgICERendezvous.
         * @exports ICMsgICERendezvous
         * @interface ICMsgICERendezvous
         * @property {CMsgICERendezvous.IAuth|null} [auth] CMsgICERendezvous auth
         * @property {CMsgICERendezvous.ICandidate|null} [add_candidate] CMsgICERendezvous add_candidate
         */
    
        /**
         * Constructs a new CMsgICERendezvous.
         * @exports CMsgICERendezvous
         * @classdesc Represents a CMsgICERendezvous.
         * @implements ICMsgICERendezvous
         * @constructor
         * @param {ICMsgICERendezvous=} [properties] Properties to set
         */
        function CMsgICERendezvous(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgICERendezvous auth.
         * @member {CMsgICERendezvous.IAuth|null|undefined} auth
         * @memberof CMsgICERendezvous
         * @instance
         */
        CMsgICERendezvous.prototype.auth = null;
    
        /**
         * CMsgICERendezvous add_candidate.
         * @member {CMsgICERendezvous.ICandidate|null|undefined} add_candidate
         * @memberof CMsgICERendezvous
         * @instance
         */
        CMsgICERendezvous.prototype.add_candidate = null;
    
        /**
         * Creates a new CMsgICERendezvous instance using the specified properties.
         * @function create
         * @memberof CMsgICERendezvous
         * @static
         * @param {ICMsgICERendezvous=} [properties] Properties to set
         * @returns {CMsgICERendezvous} CMsgICERendezvous instance
         */
        CMsgICERendezvous.create = function create(properties) {
            return new CMsgICERendezvous(properties);
        };
    
        /**
         * Encodes the specified CMsgICERendezvous message. Does not implicitly {@link CMsgICERendezvous.verify|verify} messages.
         * @function encode
         * @memberof CMsgICERendezvous
         * @static
         * @param {ICMsgICERendezvous} message CMsgICERendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgICERendezvous.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.add_candidate != null && Object.hasOwnProperty.call(message, "add_candidate"))
                $root.CMsgICERendezvous.Candidate.encode(message.add_candidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.auth != null && Object.hasOwnProperty.call(message, "auth"))
                $root.CMsgICERendezvous.Auth.encode(message.auth, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgICERendezvous message, length delimited. Does not implicitly {@link CMsgICERendezvous.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgICERendezvous
         * @static
         * @param {ICMsgICERendezvous} message CMsgICERendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgICERendezvous.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgICERendezvous message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgICERendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgICERendezvous} CMsgICERendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgICERendezvous.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgICERendezvous();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.auth = $root.CMsgICERendezvous.Auth.decode(reader, reader.uint32());
                    break;
                case 1:
                    message.add_candidate = $root.CMsgICERendezvous.Candidate.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgICERendezvous message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgICERendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgICERendezvous} CMsgICERendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgICERendezvous.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgICERendezvous message.
         * @function verify
         * @memberof CMsgICERendezvous
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgICERendezvous.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.auth != null && message.hasOwnProperty("auth")) {
                var error = $root.CMsgICERendezvous.Auth.verify(message.auth);
                if (error)
                    return "auth." + error;
            }
            if (message.add_candidate != null && message.hasOwnProperty("add_candidate")) {
                var error = $root.CMsgICERendezvous.Candidate.verify(message.add_candidate);
                if (error)
                    return "add_candidate." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgICERendezvous message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgICERendezvous
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgICERendezvous} CMsgICERendezvous
         */
        CMsgICERendezvous.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgICERendezvous)
                return object;
            var message = new $root.CMsgICERendezvous();
            if (object.auth != null) {
                if (typeof object.auth !== "object")
                    throw TypeError(".CMsgICERendezvous.auth: object expected");
                message.auth = $root.CMsgICERendezvous.Auth.fromObject(object.auth);
            }
            if (object.add_candidate != null) {
                if (typeof object.add_candidate !== "object")
                    throw TypeError(".CMsgICERendezvous.add_candidate: object expected");
                message.add_candidate = $root.CMsgICERendezvous.Candidate.fromObject(object.add_candidate);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgICERendezvous message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgICERendezvous
         * @static
         * @param {CMsgICERendezvous} message CMsgICERendezvous
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgICERendezvous.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.add_candidate = null;
                object.auth = null;
            }
            if (message.add_candidate != null && message.hasOwnProperty("add_candidate"))
                object.add_candidate = $root.CMsgICERendezvous.Candidate.toObject(message.add_candidate, options);
            if (message.auth != null && message.hasOwnProperty("auth"))
                object.auth = $root.CMsgICERendezvous.Auth.toObject(message.auth, options);
            return object;
        };
    
        /**
         * Converts this CMsgICERendezvous to JSON.
         * @function toJSON
         * @memberof CMsgICERendezvous
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgICERendezvous.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgICERendezvous.Auth = (function() {
    
            /**
             * Properties of an Auth.
             * @memberof CMsgICERendezvous
             * @interface IAuth
             * @property {string|null} [pwd_frag] Auth pwd_frag
             */
    
            /**
             * Constructs a new Auth.
             * @memberof CMsgICERendezvous
             * @classdesc Represents an Auth.
             * @implements IAuth
             * @constructor
             * @param {CMsgICERendezvous.IAuth=} [properties] Properties to set
             */
            function Auth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Auth pwd_frag.
             * @member {string} pwd_frag
             * @memberof CMsgICERendezvous.Auth
             * @instance
             */
            Auth.prototype.pwd_frag = "";
    
            /**
             * Creates a new Auth instance using the specified properties.
             * @function create
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.IAuth=} [properties] Properties to set
             * @returns {CMsgICERendezvous.Auth} Auth instance
             */
            Auth.create = function create(properties) {
                return new Auth(properties);
            };
    
            /**
             * Encodes the specified Auth message. Does not implicitly {@link CMsgICERendezvous.Auth.verify|verify} messages.
             * @function encode
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.IAuth} message Auth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Auth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pwd_frag != null && Object.hasOwnProperty.call(message, "pwd_frag"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.pwd_frag);
                return writer;
            };
    
            /**
             * Encodes the specified Auth message, length delimited. Does not implicitly {@link CMsgICERendezvous.Auth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.IAuth} message Auth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Auth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Auth message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgICERendezvous.Auth} Auth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Auth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgICERendezvous.Auth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pwd_frag = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Auth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgICERendezvous.Auth} Auth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Auth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Auth message.
             * @function verify
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Auth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pwd_frag != null && message.hasOwnProperty("pwd_frag"))
                    if (!$util.isString(message.pwd_frag))
                        return "pwd_frag: string expected";
                return null;
            };
    
            /**
             * Creates an Auth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgICERendezvous.Auth} Auth
             */
            Auth.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgICERendezvous.Auth)
                    return object;
                var message = new $root.CMsgICERendezvous.Auth();
                if (object.pwd_frag != null)
                    message.pwd_frag = String(object.pwd_frag);
                return message;
            };
    
            /**
             * Creates a plain object from an Auth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.Auth} message Auth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Auth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.pwd_frag = "";
                if (message.pwd_frag != null && message.hasOwnProperty("pwd_frag"))
                    object.pwd_frag = message.pwd_frag;
                return object;
            };
    
            /**
             * Converts this Auth to JSON.
             * @function toJSON
             * @memberof CMsgICERendezvous.Auth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Auth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Auth;
        })();
    
        CMsgICERendezvous.Candidate = (function() {
    
            /**
             * Properties of a Candidate.
             * @memberof CMsgICERendezvous
             * @interface ICandidate
             * @property {string|null} [candidate] Candidate candidate
             */
    
            /**
             * Constructs a new Candidate.
             * @memberof CMsgICERendezvous
             * @classdesc Represents a Candidate.
             * @implements ICandidate
             * @constructor
             * @param {CMsgICERendezvous.ICandidate=} [properties] Properties to set
             */
            function Candidate(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Candidate candidate.
             * @member {string} candidate
             * @memberof CMsgICERendezvous.Candidate
             * @instance
             */
            Candidate.prototype.candidate = "";
    
            /**
             * Creates a new Candidate instance using the specified properties.
             * @function create
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {CMsgICERendezvous.ICandidate=} [properties] Properties to set
             * @returns {CMsgICERendezvous.Candidate} Candidate instance
             */
            Candidate.create = function create(properties) {
                return new Candidate(properties);
            };
    
            /**
             * Encodes the specified Candidate message. Does not implicitly {@link CMsgICERendezvous.Candidate.verify|verify} messages.
             * @function encode
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {CMsgICERendezvous.ICandidate} message Candidate message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Candidate.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.candidate != null && Object.hasOwnProperty.call(message, "candidate"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.candidate);
                return writer;
            };
    
            /**
             * Encodes the specified Candidate message, length delimited. Does not implicitly {@link CMsgICERendezvous.Candidate.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {CMsgICERendezvous.ICandidate} message Candidate message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Candidate.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Candidate message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgICERendezvous.Candidate} Candidate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Candidate.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgICERendezvous.Candidate();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 3:
                        message.candidate = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Candidate message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgICERendezvous.Candidate} Candidate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Candidate.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Candidate message.
             * @function verify
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Candidate.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    if (!$util.isString(message.candidate))
                        return "candidate: string expected";
                return null;
            };
    
            /**
             * Creates a Candidate message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgICERendezvous.Candidate} Candidate
             */
            Candidate.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgICERendezvous.Candidate)
                    return object;
                var message = new $root.CMsgICERendezvous.Candidate();
                if (object.candidate != null)
                    message.candidate = String(object.candidate);
                return message;
            };
    
            /**
             * Creates a plain object from a Candidate message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgICERendezvous.Candidate
             * @static
             * @param {CMsgICERendezvous.Candidate} message Candidate
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Candidate.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.candidate = "";
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    object.candidate = message.candidate;
                return object;
            };
    
            /**
             * Converts this Candidate to JSON.
             * @function toJSON
             * @memberof CMsgICERendezvous.Candidate
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Candidate.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Candidate;
        })();
    
        return CMsgICERendezvous;
    })();
    
    $root.CMsgSteamNetworkingP2PRendezvous = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingP2PRendezvous.
         * @exports ICMsgSteamNetworkingP2PRendezvous
         * @interface ICMsgSteamNetworkingP2PRendezvous
         * @property {string|null} [from_identity] CMsgSteamNetworkingP2PRendezvous from_identity
         * @property {number|null} [from_connection_id] CMsgSteamNetworkingP2PRendezvous from_connection_id
         * @property {string|null} [to_identity] CMsgSteamNetworkingP2PRendezvous to_identity
         * @property {number|null} [to_connection_id] CMsgSteamNetworkingP2PRendezvous to_connection_id
         * @property {Uint8Array|null} [sdr_routes] CMsgSteamNetworkingP2PRendezvous sdr_routes
         * @property {number|null} [ack_peer_routes_revision] CMsgSteamNetworkingP2PRendezvous ack_peer_routes_revision
         * @property {boolean|null} [ice_enabled] CMsgSteamNetworkingP2PRendezvous ice_enabled
         * @property {CMsgSteamNetworkingP2PRendezvous.IConnectRequest|null} [connect_request] CMsgSteamNetworkingP2PRendezvous connect_request
         * @property {CMsgSteamNetworkingP2PRendezvous.IConnectOK|null} [connect_ok] CMsgSteamNetworkingP2PRendezvous connect_ok
         * @property {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed|null} [connection_closed] CMsgSteamNetworkingP2PRendezvous connection_closed
         * @property {number|null} [ack_reliable_msg] CMsgSteamNetworkingP2PRendezvous ack_reliable_msg
         * @property {number|null} [first_reliable_msg] CMsgSteamNetworkingP2PRendezvous first_reliable_msg
         * @property {Array.<CMsgSteamNetworkingP2PRendezvous.IReliableMessage>|null} [reliable_messages] CMsgSteamNetworkingP2PRendezvous reliable_messages
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingP2PRendezvous.
         * @exports CMsgSteamNetworkingP2PRendezvous
         * @classdesc Represents a CMsgSteamNetworkingP2PRendezvous.
         * @implements ICMsgSteamNetworkingP2PRendezvous
         * @constructor
         * @param {ICMsgSteamNetworkingP2PRendezvous=} [properties] Properties to set
         */
        function CMsgSteamNetworkingP2PRendezvous(properties) {
            this.reliable_messages = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingP2PRendezvous from_identity.
         * @member {string} from_identity
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.from_identity = "";
    
        /**
         * CMsgSteamNetworkingP2PRendezvous from_connection_id.
         * @member {number} from_connection_id
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.from_connection_id = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous to_identity.
         * @member {string} to_identity
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.to_identity = "";
    
        /**
         * CMsgSteamNetworkingP2PRendezvous to_connection_id.
         * @member {number} to_connection_id
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.to_connection_id = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous sdr_routes.
         * @member {Uint8Array} sdr_routes
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.sdr_routes = $util.newBuffer([]);
    
        /**
         * CMsgSteamNetworkingP2PRendezvous ack_peer_routes_revision.
         * @member {number} ack_peer_routes_revision
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.ack_peer_routes_revision = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous ice_enabled.
         * @member {boolean} ice_enabled
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.ice_enabled = false;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous connect_request.
         * @member {CMsgSteamNetworkingP2PRendezvous.IConnectRequest|null|undefined} connect_request
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.connect_request = null;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous connect_ok.
         * @member {CMsgSteamNetworkingP2PRendezvous.IConnectOK|null|undefined} connect_ok
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.connect_ok = null;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous connection_closed.
         * @member {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed|null|undefined} connection_closed
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.connection_closed = null;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous ack_reliable_msg.
         * @member {number} ack_reliable_msg
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.ack_reliable_msg = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous first_reliable_msg.
         * @member {number} first_reliable_msg
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.first_reliable_msg = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous reliable_messages.
         * @member {Array.<CMsgSteamNetworkingP2PRendezvous.IReliableMessage>} reliable_messages
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.reliable_messages = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamNetworkingP2PRendezvous instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {ICMsgSteamNetworkingP2PRendezvous=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous instance
         */
        CMsgSteamNetworkingP2PRendezvous.create = function create(properties) {
            return new CMsgSteamNetworkingP2PRendezvous(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PRendezvous message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {ICMsgSteamNetworkingP2PRendezvous} message CMsgSteamNetworkingP2PRendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PRendezvous.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.to_connection_id != null && Object.hasOwnProperty.call(message, "to_connection_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.to_connection_id);
            if (message.sdr_routes != null && Object.hasOwnProperty.call(message, "sdr_routes"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.sdr_routes);
            if (message.ack_peer_routes_revision != null && Object.hasOwnProperty.call(message, "ack_peer_routes_revision"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ack_peer_routes_revision);
            if (message.connect_request != null && Object.hasOwnProperty.call(message, "connect_request"))
                $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.encode(message.connect_request, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.connect_ok != null && Object.hasOwnProperty.call(message, "connect_ok"))
                $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.encode(message.connect_ok, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.connection_closed != null && Object.hasOwnProperty.call(message, "connection_closed"))
                $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.encode(message.connection_closed, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.ice_enabled != null && Object.hasOwnProperty.call(message, "ice_enabled"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.ice_enabled);
            if (message.from_identity != null && Object.hasOwnProperty.call(message, "from_identity"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.from_identity);
            if (message.from_connection_id != null && Object.hasOwnProperty.call(message, "from_connection_id"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.from_connection_id);
            if (message.to_identity != null && Object.hasOwnProperty.call(message, "to_identity"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.to_identity);
            if (message.ack_reliable_msg != null && Object.hasOwnProperty.call(message, "ack_reliable_msg"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.ack_reliable_msg);
            if (message.first_reliable_msg != null && Object.hasOwnProperty.call(message, "first_reliable_msg"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.first_reliable_msg);
            if (message.reliable_messages != null && message.reliable_messages.length)
                for (var i = 0; i < message.reliable_messages.length; ++i)
                    $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.encode(message.reliable_messages[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PRendezvous message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {ICMsgSteamNetworkingP2PRendezvous} message CMsgSteamNetworkingP2PRendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PRendezvous.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PRendezvous message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PRendezvous.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 8:
                    message.from_identity = reader.string();
                    break;
                case 9:
                    message.from_connection_id = reader.fixed32();
                    break;
                case 10:
                    message.to_identity = reader.string();
                    break;
                case 1:
                    message.to_connection_id = reader.fixed32();
                    break;
                case 2:
                    message.sdr_routes = reader.bytes();
                    break;
                case 3:
                    message.ack_peer_routes_revision = reader.uint32();
                    break;
                case 7:
                    message.ice_enabled = reader.bool();
                    break;
                case 4:
                    message.connect_request = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.connect_ok = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.connection_closed = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.ack_reliable_msg = reader.uint32();
                    break;
                case 12:
                    message.first_reliable_msg = reader.uint32();
                    break;
                case 13:
                    if (!(message.reliable_messages && message.reliable_messages.length))
                        message.reliable_messages = [];
                    message.reliable_messages.push($root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PRendezvous message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PRendezvous.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingP2PRendezvous message.
         * @function verify
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingP2PRendezvous.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.from_identity != null && message.hasOwnProperty("from_identity"))
                if (!$util.isString(message.from_identity))
                    return "from_identity: string expected";
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                if (!$util.isInteger(message.from_connection_id))
                    return "from_connection_id: integer expected";
            if (message.to_identity != null && message.hasOwnProperty("to_identity"))
                if (!$util.isString(message.to_identity))
                    return "to_identity: string expected";
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                if (!$util.isInteger(message.to_connection_id))
                    return "to_connection_id: integer expected";
            if (message.sdr_routes != null && message.hasOwnProperty("sdr_routes"))
                if (!(message.sdr_routes && typeof message.sdr_routes.length === "number" || $util.isString(message.sdr_routes)))
                    return "sdr_routes: buffer expected";
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                if (!$util.isInteger(message.ack_peer_routes_revision))
                    return "ack_peer_routes_revision: integer expected";
            if (message.ice_enabled != null && message.hasOwnProperty("ice_enabled"))
                if (typeof message.ice_enabled !== "boolean")
                    return "ice_enabled: boolean expected";
            if (message.connect_request != null && message.hasOwnProperty("connect_request")) {
                var error = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.verify(message.connect_request);
                if (error)
                    return "connect_request." + error;
            }
            if (message.connect_ok != null && message.hasOwnProperty("connect_ok")) {
                var error = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.verify(message.connect_ok);
                if (error)
                    return "connect_ok." + error;
            }
            if (message.connection_closed != null && message.hasOwnProperty("connection_closed")) {
                var error = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.verify(message.connection_closed);
                if (error)
                    return "connection_closed." + error;
            }
            if (message.ack_reliable_msg != null && message.hasOwnProperty("ack_reliable_msg"))
                if (!$util.isInteger(message.ack_reliable_msg))
                    return "ack_reliable_msg: integer expected";
            if (message.first_reliable_msg != null && message.hasOwnProperty("first_reliable_msg"))
                if (!$util.isInteger(message.first_reliable_msg))
                    return "first_reliable_msg: integer expected";
            if (message.reliable_messages != null && message.hasOwnProperty("reliable_messages")) {
                if (!Array.isArray(message.reliable_messages))
                    return "reliable_messages: array expected";
                for (var i = 0; i < message.reliable_messages.length; ++i) {
                    var error = $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.verify(message.reliable_messages[i]);
                    if (error)
                        return "reliable_messages." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingP2PRendezvous message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous
         */
        CMsgSteamNetworkingP2PRendezvous.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous)
                return object;
            var message = new $root.CMsgSteamNetworkingP2PRendezvous();
            if (object.from_identity != null)
                message.from_identity = String(object.from_identity);
            if (object.from_connection_id != null)
                message.from_connection_id = object.from_connection_id >>> 0;
            if (object.to_identity != null)
                message.to_identity = String(object.to_identity);
            if (object.to_connection_id != null)
                message.to_connection_id = object.to_connection_id >>> 0;
            if (object.sdr_routes != null)
                if (typeof object.sdr_routes === "string")
                    $util.base64.decode(object.sdr_routes, message.sdr_routes = $util.newBuffer($util.base64.length(object.sdr_routes)), 0);
                else if (object.sdr_routes.length)
                    message.sdr_routes = object.sdr_routes;
            if (object.ack_peer_routes_revision != null)
                message.ack_peer_routes_revision = object.ack_peer_routes_revision >>> 0;
            if (object.ice_enabled != null)
                message.ice_enabled = Boolean(object.ice_enabled);
            if (object.connect_request != null) {
                if (typeof object.connect_request !== "object")
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.connect_request: object expected");
                message.connect_request = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.fromObject(object.connect_request);
            }
            if (object.connect_ok != null) {
                if (typeof object.connect_ok !== "object")
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.connect_ok: object expected");
                message.connect_ok = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.fromObject(object.connect_ok);
            }
            if (object.connection_closed != null) {
                if (typeof object.connection_closed !== "object")
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.connection_closed: object expected");
                message.connection_closed = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.fromObject(object.connection_closed);
            }
            if (object.ack_reliable_msg != null)
                message.ack_reliable_msg = object.ack_reliable_msg >>> 0;
            if (object.first_reliable_msg != null)
                message.first_reliable_msg = object.first_reliable_msg >>> 0;
            if (object.reliable_messages) {
                if (!Array.isArray(object.reliable_messages))
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.reliable_messages: array expected");
                message.reliable_messages = [];
                for (var i = 0; i < object.reliable_messages.length; ++i) {
                    if (typeof object.reliable_messages[i] !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.reliable_messages: object expected");
                    message.reliable_messages[i] = $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.fromObject(object.reliable_messages[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingP2PRendezvous message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {CMsgSteamNetworkingP2PRendezvous} message CMsgSteamNetworkingP2PRendezvous
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingP2PRendezvous.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.reliable_messages = [];
            if (options.defaults) {
                object.to_connection_id = 0;
                if (options.bytes === String)
                    object.sdr_routes = "";
                else {
                    object.sdr_routes = [];
                    if (options.bytes !== Array)
                        object.sdr_routes = $util.newBuffer(object.sdr_routes);
                }
                object.ack_peer_routes_revision = 0;
                object.connect_request = null;
                object.connect_ok = null;
                object.connection_closed = null;
                object.ice_enabled = false;
                object.from_identity = "";
                object.from_connection_id = 0;
                object.to_identity = "";
                object.ack_reliable_msg = 0;
                object.first_reliable_msg = 0;
            }
            if (message.to_connection_id != null && message.hasOwnProperty("to_connection_id"))
                object.to_connection_id = message.to_connection_id;
            if (message.sdr_routes != null && message.hasOwnProperty("sdr_routes"))
                object.sdr_routes = options.bytes === String ? $util.base64.encode(message.sdr_routes, 0, message.sdr_routes.length) : options.bytes === Array ? Array.prototype.slice.call(message.sdr_routes) : message.sdr_routes;
            if (message.ack_peer_routes_revision != null && message.hasOwnProperty("ack_peer_routes_revision"))
                object.ack_peer_routes_revision = message.ack_peer_routes_revision;
            if (message.connect_request != null && message.hasOwnProperty("connect_request"))
                object.connect_request = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.toObject(message.connect_request, options);
            if (message.connect_ok != null && message.hasOwnProperty("connect_ok"))
                object.connect_ok = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.toObject(message.connect_ok, options);
            if (message.connection_closed != null && message.hasOwnProperty("connection_closed"))
                object.connection_closed = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.toObject(message.connection_closed, options);
            if (message.ice_enabled != null && message.hasOwnProperty("ice_enabled"))
                object.ice_enabled = message.ice_enabled;
            if (message.from_identity != null && message.hasOwnProperty("from_identity"))
                object.from_identity = message.from_identity;
            if (message.from_connection_id != null && message.hasOwnProperty("from_connection_id"))
                object.from_connection_id = message.from_connection_id;
            if (message.to_identity != null && message.hasOwnProperty("to_identity"))
                object.to_identity = message.to_identity;
            if (message.ack_reliable_msg != null && message.hasOwnProperty("ack_reliable_msg"))
                object.ack_reliable_msg = message.ack_reliable_msg;
            if (message.first_reliable_msg != null && message.hasOwnProperty("first_reliable_msg"))
                object.first_reliable_msg = message.first_reliable_msg;
            if (message.reliable_messages && message.reliable_messages.length) {
                object.reliable_messages = [];
                for (var j = 0; j < message.reliable_messages.length; ++j)
                    object.reliable_messages[j] = $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.toObject(message.reliable_messages[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingP2PRendezvous to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgSteamNetworkingP2PRendezvous.ConnectRequest = (function() {
    
            /**
             * Properties of a ConnectRequest.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IConnectRequest
             * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] ConnectRequest crypt
             * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] ConnectRequest cert
             * @property {number|null} [to_virtual_port] ConnectRequest to_virtual_port
             * @property {number|null} [from_virtual_port] ConnectRequest from_virtual_port
             */
    
            /**
             * Constructs a new ConnectRequest.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ConnectRequest.
             * @implements IConnectRequest
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest=} [properties] Properties to set
             */
            function ConnectRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ConnectRequest crypt.
             * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.crypt = null;
    
            /**
             * ConnectRequest cert.
             * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.cert = null;
    
            /**
             * ConnectRequest to_virtual_port.
             * @member {number} to_virtual_port
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.to_virtual_port = 0;
    
            /**
             * ConnectRequest from_virtual_port.
             * @member {number} from_virtual_port
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.from_virtual_port = 0;
    
            /**
             * Creates a new ConnectRequest instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest instance
             */
            ConnectRequest.create = function create(properties) {
                return new ConnectRequest(properties);
            };
    
            /**
             * Encodes the specified ConnectRequest message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectRequest.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest} message ConnectRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                    $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                    $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.to_virtual_port != null && Object.hasOwnProperty.call(message, "to_virtual_port"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.to_virtual_port);
                if (message.from_virtual_port != null && Object.hasOwnProperty.call(message, "from_virtual_port"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.from_virtual_port);
                return writer;
            };
    
            /**
             * Encodes the specified ConnectRequest message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest} message ConnectRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ConnectRequest message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 6:
                        message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.to_virtual_port = reader.uint32();
                        break;
                    case 10:
                        message.from_virtual_port = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ConnectRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ConnectRequest message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.crypt != null && message.hasOwnProperty("crypt")) {
                    var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                    if (error)
                        return "crypt." + error;
                }
                if (message.cert != null && message.hasOwnProperty("cert")) {
                    var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                    if (error)
                        return "cert." + error;
                }
                if (message.to_virtual_port != null && message.hasOwnProperty("to_virtual_port"))
                    if (!$util.isInteger(message.to_virtual_port))
                        return "to_virtual_port: integer expected";
                if (message.from_virtual_port != null && message.hasOwnProperty("from_virtual_port"))
                    if (!$util.isInteger(message.from_virtual_port))
                        return "from_virtual_port: integer expected";
                return null;
            };
    
            /**
             * Creates a ConnectRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest
             */
            ConnectRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest();
                if (object.crypt != null) {
                    if (typeof object.crypt !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectRequest.crypt: object expected");
                    message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
                }
                if (object.cert != null) {
                    if (typeof object.cert !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectRequest.cert: object expected");
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
                }
                if (object.to_virtual_port != null)
                    message.to_virtual_port = object.to_virtual_port >>> 0;
                if (object.from_virtual_port != null)
                    message.from_virtual_port = object.from_virtual_port >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ConnectRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} message ConnectRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.crypt = null;
                    object.cert = null;
                    object.to_virtual_port = 0;
                    object.from_virtual_port = 0;
                }
                if (message.crypt != null && message.hasOwnProperty("crypt"))
                    object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
                if (message.cert != null && message.hasOwnProperty("cert"))
                    object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
                if (message.to_virtual_port != null && message.hasOwnProperty("to_virtual_port"))
                    object.to_virtual_port = message.to_virtual_port;
                if (message.from_virtual_port != null && message.hasOwnProperty("from_virtual_port"))
                    object.from_virtual_port = message.from_virtual_port;
                return object;
            };
    
            /**
             * Converts this ConnectRequest to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ConnectRequest;
        })();
    
        CMsgSteamNetworkingP2PRendezvous.ConnectOK = (function() {
    
            /**
             * Properties of a ConnectOK.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IConnectOK
             * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] ConnectOK crypt
             * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] ConnectOK cert
             */
    
            /**
             * Constructs a new ConnectOK.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ConnectOK.
             * @implements IConnectOK
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK=} [properties] Properties to set
             */
            function ConnectOK(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ConnectOK crypt.
             * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @instance
             */
            ConnectOK.prototype.crypt = null;
    
            /**
             * ConnectOK cert.
             * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @instance
             */
            ConnectOK.prototype.cert = null;
    
            /**
             * Creates a new ConnectOK instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK instance
             */
            ConnectOK.create = function create(properties) {
                return new ConnectOK(properties);
            };
    
            /**
             * Encodes the specified ConnectOK message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectOK.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK} message ConnectOK message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectOK.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                    $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                    $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ConnectOK message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectOK.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK} message ConnectOK message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectOK.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ConnectOK message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectOK.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 5:
                        message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ConnectOK message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectOK.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ConnectOK message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectOK.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.crypt != null && message.hasOwnProperty("crypt")) {
                    var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                    if (error)
                        return "crypt." + error;
                }
                if (message.cert != null && message.hasOwnProperty("cert")) {
                    var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                    if (error)
                        return "cert." + error;
                }
                return null;
            };
    
            /**
             * Creates a ConnectOK message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK
             */
            ConnectOK.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK();
                if (object.crypt != null) {
                    if (typeof object.crypt !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectOK.crypt: object expected");
                    message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
                }
                if (object.cert != null) {
                    if (typeof object.cert !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectOK.cert: object expected");
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ConnectOK message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ConnectOK} message ConnectOK
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectOK.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.crypt = null;
                    object.cert = null;
                }
                if (message.crypt != null && message.hasOwnProperty("crypt"))
                    object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
                if (message.cert != null && message.hasOwnProperty("cert"))
                    object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
                return object;
            };
    
            /**
             * Converts this ConnectOK to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectOK.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ConnectOK;
        })();
    
        CMsgSteamNetworkingP2PRendezvous.ConnectionClosed = (function() {
    
            /**
             * Properties of a ConnectionClosed.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IConnectionClosed
             * @property {string|null} [debug] ConnectionClosed debug
             * @property {number|null} [reason_code] ConnectionClosed reason_code
             */
    
            /**
             * Constructs a new ConnectionClosed.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ConnectionClosed.
             * @implements IConnectionClosed
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed=} [properties] Properties to set
             */
            function ConnectionClosed(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ConnectionClosed debug.
             * @member {string} debug
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @instance
             */
            ConnectionClosed.prototype.debug = "";
    
            /**
             * ConnectionClosed reason_code.
             * @member {number} reason_code
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @instance
             */
            ConnectionClosed.prototype.reason_code = 0;
    
            /**
             * Creates a new ConnectionClosed instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed instance
             */
            ConnectionClosed.create = function create(properties) {
                return new ConnectionClosed(properties);
            };
    
            /**
             * Encodes the specified ConnectionClosed message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed} message ConnectionClosed message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectionClosed.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.debug);
                if (message.reason_code != null && Object.hasOwnProperty.call(message, "reason_code"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.reason_code);
                return writer;
            };
    
            /**
             * Encodes the specified ConnectionClosed message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed} message ConnectionClosed message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectionClosed.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ConnectionClosed message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectionClosed.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 5:
                        message.debug = reader.string();
                        break;
                    case 6:
                        message.reason_code = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ConnectionClosed message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectionClosed.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ConnectionClosed message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectionClosed.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.debug != null && message.hasOwnProperty("debug"))
                    if (!$util.isString(message.debug))
                        return "debug: string expected";
                if (message.reason_code != null && message.hasOwnProperty("reason_code"))
                    if (!$util.isInteger(message.reason_code))
                        return "reason_code: integer expected";
                return null;
            };
    
            /**
             * Creates a ConnectionClosed message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed
             */
            ConnectionClosed.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed();
                if (object.debug != null)
                    message.debug = String(object.debug);
                if (object.reason_code != null)
                    message.reason_code = object.reason_code >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ConnectionClosed message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} message ConnectionClosed
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectionClosed.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.debug = "";
                    object.reason_code = 0;
                }
                if (message.debug != null && message.hasOwnProperty("debug"))
                    object.debug = message.debug;
                if (message.reason_code != null && message.hasOwnProperty("reason_code"))
                    object.reason_code = message.reason_code;
                return object;
            };
    
            /**
             * Converts this ConnectionClosed to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectionClosed.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ConnectionClosed;
        })();
    
        CMsgSteamNetworkingP2PRendezvous.ReliableMessage = (function() {
    
            /**
             * Properties of a ReliableMessage.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IReliableMessage
             * @property {ICMsgICERendezvous|null} [ice] ReliableMessage ice
             */
    
            /**
             * Constructs a new ReliableMessage.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ReliableMessage.
             * @implements IReliableMessage
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage=} [properties] Properties to set
             */
            function ReliableMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ReliableMessage ice.
             * @member {ICMsgICERendezvous|null|undefined} ice
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @instance
             */
            ReliableMessage.prototype.ice = null;
    
            /**
             * Creates a new ReliableMessage instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage instance
             */
            ReliableMessage.create = function create(properties) {
                return new ReliableMessage(properties);
            };
    
            /**
             * Encodes the specified ReliableMessage message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ReliableMessage.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage} message ReliableMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReliableMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ice != null && Object.hasOwnProperty.call(message, "ice"))
                    $root.CMsgICERendezvous.encode(message.ice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ReliableMessage message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ReliableMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage} message ReliableMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReliableMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ReliableMessage message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReliableMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ice = $root.CMsgICERendezvous.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ReliableMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReliableMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ReliableMessage message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReliableMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ice != null && message.hasOwnProperty("ice")) {
                    var error = $root.CMsgICERendezvous.verify(message.ice);
                    if (error)
                        return "ice." + error;
                }
                return null;
            };
    
            /**
             * Creates a ReliableMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage
             */
            ReliableMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage();
                if (object.ice != null) {
                    if (typeof object.ice !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ReliableMessage.ice: object expected");
                    message.ice = $root.CMsgICERendezvous.fromObject(object.ice);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ReliableMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} message ReliableMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReliableMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ice = null;
                if (message.ice != null && message.hasOwnProperty("ice"))
                    object.ice = $root.CMsgICERendezvous.toObject(message.ice, options);
                return object;
            };
    
            /**
             * Converts this ReliableMessage to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReliableMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ReliableMessage;
        })();
    
        return CMsgSteamNetworkingP2PRendezvous;
    })();
    
    $root.CMsgSteamNetworkingICESessionSummary = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingICESessionSummary.
         * @exports ICMsgSteamNetworkingICESessionSummary
         * @interface ICMsgSteamNetworkingICESessionSummary
         * @property {number|null} [failure_reason_code] CMsgSteamNetworkingICESessionSummary failure_reason_code
         * @property {number|null} [local_candidate_types] CMsgSteamNetworkingICESessionSummary local_candidate_types
         * @property {number|null} [remote_candidate_types] CMsgSteamNetworkingICESessionSummary remote_candidate_types
         * @property {number|null} [initial_route_kind] CMsgSteamNetworkingICESessionSummary initial_route_kind
         * @property {number|null} [initial_ping] CMsgSteamNetworkingICESessionSummary initial_ping
         * @property {number|null} [initial_score] CMsgSteamNetworkingICESessionSummary initial_score
         * @property {number|null} [negotiation_ms] CMsgSteamNetworkingICESessionSummary negotiation_ms
         * @property {number|null} [selected_seconds] CMsgSteamNetworkingICESessionSummary selected_seconds
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingICESessionSummary.
         * @exports CMsgSteamNetworkingICESessionSummary
         * @classdesc Represents a CMsgSteamNetworkingICESessionSummary.
         * @implements ICMsgSteamNetworkingICESessionSummary
         * @constructor
         * @param {ICMsgSteamNetworkingICESessionSummary=} [properties] Properties to set
         */
        function CMsgSteamNetworkingICESessionSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingICESessionSummary failure_reason_code.
         * @member {number} failure_reason_code
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.failure_reason_code = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary local_candidate_types.
         * @member {number} local_candidate_types
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.local_candidate_types = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary remote_candidate_types.
         * @member {number} remote_candidate_types
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.remote_candidate_types = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary initial_route_kind.
         * @member {number} initial_route_kind
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.initial_route_kind = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary initial_ping.
         * @member {number} initial_ping
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.initial_ping = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary initial_score.
         * @member {number} initial_score
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.initial_score = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary negotiation_ms.
         * @member {number} negotiation_ms
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.negotiation_ms = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary selected_seconds.
         * @member {number} selected_seconds
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.selected_seconds = 0;
    
        /**
         * Creates a new CMsgSteamNetworkingICESessionSummary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {ICMsgSteamNetworkingICESessionSummary=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary instance
         */
        CMsgSteamNetworkingICESessionSummary.create = function create(properties) {
            return new CMsgSteamNetworkingICESessionSummary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingICESessionSummary message. Does not implicitly {@link CMsgSteamNetworkingICESessionSummary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {ICMsgSteamNetworkingICESessionSummary} message CMsgSteamNetworkingICESessionSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingICESessionSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.local_candidate_types != null && Object.hasOwnProperty.call(message, "local_candidate_types"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.local_candidate_types);
            if (message.remote_candidate_types != null && Object.hasOwnProperty.call(message, "remote_candidate_types"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.remote_candidate_types);
            if (message.initial_route_kind != null && Object.hasOwnProperty.call(message, "initial_route_kind"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.initial_route_kind);
            if (message.initial_ping != null && Object.hasOwnProperty.call(message, "initial_ping"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.initial_ping);
            if (message.negotiation_ms != null && Object.hasOwnProperty.call(message, "negotiation_ms"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.negotiation_ms);
            if (message.initial_score != null && Object.hasOwnProperty.call(message, "initial_score"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.initial_score);
            if (message.failure_reason_code != null && Object.hasOwnProperty.call(message, "failure_reason_code"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.failure_reason_code);
            if (message.selected_seconds != null && Object.hasOwnProperty.call(message, "selected_seconds"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.selected_seconds);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingICESessionSummary message, length delimited. Does not implicitly {@link CMsgSteamNetworkingICESessionSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {ICMsgSteamNetworkingICESessionSummary} message CMsgSteamNetworkingICESessionSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingICESessionSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingICESessionSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingICESessionSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingICESessionSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7:
                    message.failure_reason_code = reader.uint32();
                    break;
                case 1:
                    message.local_candidate_types = reader.uint32();
                    break;
                case 2:
                    message.remote_candidate_types = reader.uint32();
                    break;
                case 3:
                    message.initial_route_kind = reader.uint32();
                    break;
                case 4:
                    message.initial_ping = reader.uint32();
                    break;
                case 6:
                    message.initial_score = reader.uint32();
                    break;
                case 5:
                    message.negotiation_ms = reader.uint32();
                    break;
                case 12:
                    message.selected_seconds = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingICESessionSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingICESessionSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingICESessionSummary message.
         * @function verify
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingICESessionSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.failure_reason_code != null && message.hasOwnProperty("failure_reason_code"))
                if (!$util.isInteger(message.failure_reason_code))
                    return "failure_reason_code: integer expected";
            if (message.local_candidate_types != null && message.hasOwnProperty("local_candidate_types"))
                if (!$util.isInteger(message.local_candidate_types))
                    return "local_candidate_types: integer expected";
            if (message.remote_candidate_types != null && message.hasOwnProperty("remote_candidate_types"))
                if (!$util.isInteger(message.remote_candidate_types))
                    return "remote_candidate_types: integer expected";
            if (message.initial_route_kind != null && message.hasOwnProperty("initial_route_kind"))
                if (!$util.isInteger(message.initial_route_kind))
                    return "initial_route_kind: integer expected";
            if (message.initial_ping != null && message.hasOwnProperty("initial_ping"))
                if (!$util.isInteger(message.initial_ping))
                    return "initial_ping: integer expected";
            if (message.initial_score != null && message.hasOwnProperty("initial_score"))
                if (!$util.isInteger(message.initial_score))
                    return "initial_score: integer expected";
            if (message.negotiation_ms != null && message.hasOwnProperty("negotiation_ms"))
                if (!$util.isInteger(message.negotiation_ms))
                    return "negotiation_ms: integer expected";
            if (message.selected_seconds != null && message.hasOwnProperty("selected_seconds"))
                if (!$util.isInteger(message.selected_seconds))
                    return "selected_seconds: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingICESessionSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary
         */
        CMsgSteamNetworkingICESessionSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingICESessionSummary)
                return object;
            var message = new $root.CMsgSteamNetworkingICESessionSummary();
            if (object.failure_reason_code != null)
                message.failure_reason_code = object.failure_reason_code >>> 0;
            if (object.local_candidate_types != null)
                message.local_candidate_types = object.local_candidate_types >>> 0;
            if (object.remote_candidate_types != null)
                message.remote_candidate_types = object.remote_candidate_types >>> 0;
            if (object.initial_route_kind != null)
                message.initial_route_kind = object.initial_route_kind >>> 0;
            if (object.initial_ping != null)
                message.initial_ping = object.initial_ping >>> 0;
            if (object.initial_score != null)
                message.initial_score = object.initial_score >>> 0;
            if (object.negotiation_ms != null)
                message.negotiation_ms = object.negotiation_ms >>> 0;
            if (object.selected_seconds != null)
                message.selected_seconds = object.selected_seconds >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingICESessionSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {CMsgSteamNetworkingICESessionSummary} message CMsgSteamNetworkingICESessionSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingICESessionSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.local_candidate_types = 0;
                object.remote_candidate_types = 0;
                object.initial_route_kind = 0;
                object.initial_ping = 0;
                object.negotiation_ms = 0;
                object.initial_score = 0;
                object.failure_reason_code = 0;
                object.selected_seconds = 0;
            }
            if (message.local_candidate_types != null && message.hasOwnProperty("local_candidate_types"))
                object.local_candidate_types = message.local_candidate_types;
            if (message.remote_candidate_types != null && message.hasOwnProperty("remote_candidate_types"))
                object.remote_candidate_types = message.remote_candidate_types;
            if (message.initial_route_kind != null && message.hasOwnProperty("initial_route_kind"))
                object.initial_route_kind = message.initial_route_kind;
            if (message.initial_ping != null && message.hasOwnProperty("initial_ping"))
                object.initial_ping = message.initial_ping;
            if (message.negotiation_ms != null && message.hasOwnProperty("negotiation_ms"))
                object.negotiation_ms = message.negotiation_ms;
            if (message.initial_score != null && message.hasOwnProperty("initial_score"))
                object.initial_score = message.initial_score;
            if (message.failure_reason_code != null && message.hasOwnProperty("failure_reason_code"))
                object.failure_reason_code = message.failure_reason_code;
            if (message.selected_seconds != null && message.hasOwnProperty("selected_seconds"))
                object.selected_seconds = message.selected_seconds;
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingICESessionSummary to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingICESessionSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgSteamNetworkingICESessionSummary;
    })();

    return $root;
});
